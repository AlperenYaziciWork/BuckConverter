
saykal_buck_converter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bc0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002d48  08002d48  00003d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d58  08002d58  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002d58  08002d58  00003d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d60  08002d60  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d60  08002d60  00003d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d64  08002d64  00003d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002d68  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          000000d8  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000e4  200000e4  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ad1b  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019fa  00000000  00000000  0000ed57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb0  00000000  00000000  00010758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000905  00000000  00000000  00011308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000216ca  00000000  00000000  00011c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c67a  00000000  00000000  000332d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d415e  00000000  00000000  0003f951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00113aaf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003188  00000000  00000000  00113af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00116c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002d30 	.word	0x08002d30

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002d30 	.word	0x08002d30

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fb48 	bl	8000b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f80a 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f98c 	bl	800081c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000504:	f000 f8b4 	bl	8000670 <MX_CAN1_Init>
  MX_TIM1_Init();
 8000508:	f000 f8e8 	bl	80006dc <MX_TIM1_Init>
  MX_ADC1_Init();
 800050c:	f000 f85e 	bl	80005cc <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <main+0x1c>

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	@ 0x50
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0320 	add.w	r3, r7, #32
 800051e:	2230      	movs	r2, #48	@ 0x30
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f002 fbd8 	bl	8002cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	4b21      	ldr	r3, [pc, #132]	@ (80005c4 <SystemClock_Config+0xb0>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000540:	4a20      	ldr	r2, [pc, #128]	@ (80005c4 <SystemClock_Config+0xb0>)
 8000542:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000546:	6413      	str	r3, [r2, #64]	@ 0x40
 8000548:	4b1e      	ldr	r3, [pc, #120]	@ (80005c4 <SystemClock_Config+0xb0>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800054c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <SystemClock_Config+0xb4>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a1a      	ldr	r2, [pc, #104]	@ (80005c8 <SystemClock_Config+0xb4>)
 800055e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	4b18      	ldr	r3, [pc, #96]	@ (80005c8 <SystemClock_Config+0xb4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000570:	2301      	movs	r3, #1
 8000572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000574:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000578:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800057a:	2300      	movs	r3, #0
 800057c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	4618      	mov	r0, r3
 8000584:	f001 f954 	bl	8001830 <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800058e:	f000 f97b 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	230f      	movs	r3, #15
 8000594:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000596:	2301      	movs	r3, #1
 8000598:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 fbb7 	bl	8001d20 <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80005b8:	f000 f966 	bl	8000888 <Error_Handler>
  }
}
 80005bc:	bf00      	nop
 80005be:	3750      	adds	r7, #80	@ 0x50
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40007000 	.word	0x40007000

080005cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005d2:	463b      	mov	r3, r7
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005de:	4b21      	ldr	r3, [pc, #132]	@ (8000664 <MX_ADC1_Init+0x98>)
 80005e0:	4a21      	ldr	r2, [pc, #132]	@ (8000668 <MX_ADC1_Init+0x9c>)
 80005e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000664 <MX_ADC1_Init+0x98>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000664 <MX_ADC1_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000664 <MX_ADC1_Init+0x98>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000664 <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005fc:	4b19      	ldr	r3, [pc, #100]	@ (8000664 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000604:	4b17      	ldr	r3, [pc, #92]	@ (8000664 <MX_ADC1_Init+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800060a:	4b16      	ldr	r3, [pc, #88]	@ (8000664 <MX_ADC1_Init+0x98>)
 800060c:	4a17      	ldr	r2, [pc, #92]	@ (800066c <MX_ADC1_Init+0xa0>)
 800060e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000610:	4b14      	ldr	r3, [pc, #80]	@ (8000664 <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000616:	4b13      	ldr	r3, [pc, #76]	@ (8000664 <MX_ADC1_Init+0x98>)
 8000618:	2201      	movs	r2, #1
 800061a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800061c:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <MX_ADC1_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000624:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <MX_ADC1_Init+0x98>)
 8000626:	2201      	movs	r2, #1
 8000628:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800062a:	480e      	ldr	r0, [pc, #56]	@ (8000664 <MX_ADC1_Init+0x98>)
 800062c:	f000 fb20 	bl	8000c70 <HAL_ADC_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000636:	f000 f927 	bl	8000888 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800063a:	2310      	movs	r3, #16
 800063c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800063e:	2301      	movs	r3, #1
 8000640:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000646:	463b      	mov	r3, r7
 8000648:	4619      	mov	r1, r3
 800064a:	4806      	ldr	r0, [pc, #24]	@ (8000664 <MX_ADC1_Init+0x98>)
 800064c:	f000 fb54 	bl	8000cf8 <HAL_ADC_ConfigChannel>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000656:	f000 f917 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000028 	.word	0x20000028
 8000668:	40012000 	.word	0x40012000
 800066c:	0f000001 	.word	0x0f000001

08000670 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000674:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <MX_CAN1_Init+0x64>)
 8000676:	4a18      	ldr	r2, [pc, #96]	@ (80006d8 <MX_CAN1_Init+0x68>)
 8000678:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 800067a:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <MX_CAN1_Init+0x64>)
 800067c:	2201      	movs	r2, #1
 800067e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_CAN1_Init+0x64>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000686:	4b13      	ldr	r3, [pc, #76]	@ (80006d4 <MX_CAN1_Init+0x64>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800068c:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <MX_CAN1_Init+0x64>)
 800068e:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000692:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000694:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <MX_CAN1_Init+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800069a:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <MX_CAN1_Init+0x64>)
 800069c:	2200      	movs	r2, #0
 800069e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <MX_CAN1_Init+0x64>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	@ (80006d4 <MX_CAN1_Init+0x64>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006ac:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <MX_CAN1_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <MX_CAN1_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006b8:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <MX_CAN1_Init+0x64>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	@ (80006d4 <MX_CAN1_Init+0x64>)
 80006c0:	f000 fd38 	bl	8001134 <HAL_CAN_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80006ca:	f000 f8dd 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000070 	.word	0x20000070
 80006d8:	40006400 	.word	0x40006400

080006dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b096      	sub	sp, #88	@ 0x58
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]
 800070a:	615a      	str	r2, [r3, #20]
 800070c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2220      	movs	r2, #32
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f002 fadf 	bl	8002cd8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800071a:	4b3e      	ldr	r3, [pc, #248]	@ (8000814 <MX_TIM1_Init+0x138>)
 800071c:	4a3e      	ldr	r2, [pc, #248]	@ (8000818 <MX_TIM1_Init+0x13c>)
 800071e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000720:	4b3c      	ldr	r3, [pc, #240]	@ (8000814 <MX_TIM1_Init+0x138>)
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000726:	4b3b      	ldr	r3, [pc, #236]	@ (8000814 <MX_TIM1_Init+0x138>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 399;
 800072c:	4b39      	ldr	r3, [pc, #228]	@ (8000814 <MX_TIM1_Init+0x138>)
 800072e:	f240 128f 	movw	r2, #399	@ 0x18f
 8000732:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000734:	4b37      	ldr	r3, [pc, #220]	@ (8000814 <MX_TIM1_Init+0x138>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800073a:	4b36      	ldr	r3, [pc, #216]	@ (8000814 <MX_TIM1_Init+0x138>)
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000740:	4b34      	ldr	r3, [pc, #208]	@ (8000814 <MX_TIM1_Init+0x138>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000746:	4833      	ldr	r0, [pc, #204]	@ (8000814 <MX_TIM1_Init+0x138>)
 8000748:	f001 fcd6 	bl	80020f8 <HAL_TIM_Base_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000752:	f000 f899 	bl	8000888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000756:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800075c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000760:	4619      	mov	r1, r3
 8000762:	482c      	ldr	r0, [pc, #176]	@ (8000814 <MX_TIM1_Init+0x138>)
 8000764:	f001 fe32 	bl	80023cc <HAL_TIM_ConfigClockSource>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800076e:	f000 f88b 	bl	8000888 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000772:	4828      	ldr	r0, [pc, #160]	@ (8000814 <MX_TIM1_Init+0x138>)
 8000774:	f001 fd0f 	bl	8002196 <HAL_TIM_PWM_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800077e:	f000 f883 	bl	8000888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000782:	2300      	movs	r3, #0
 8000784:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800078a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800078e:	4619      	mov	r1, r3
 8000790:	4820      	ldr	r0, [pc, #128]	@ (8000814 <MX_TIM1_Init+0x138>)
 8000792:	f002 f9d3 	bl	8002b3c <HAL_TIMEx_MasterConfigSynchronization>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800079c:	f000 f874 	bl	8000888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a0:	2360      	movs	r3, #96	@ 0x60
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007ac:	2300      	movs	r3, #0
 80007ae:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007b8:	2300      	movs	r3, #0
 80007ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c0:	2200      	movs	r2, #0
 80007c2:	4619      	mov	r1, r3
 80007c4:	4813      	ldr	r0, [pc, #76]	@ (8000814 <MX_TIM1_Init+0x138>)
 80007c6:	f001 fd3f 	bl	8002248 <HAL_TIM_PWM_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80007d0:	f000 f85a 	bl	8000888 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	4619      	mov	r1, r3
 80007f6:	4807      	ldr	r0, [pc, #28]	@ (8000814 <MX_TIM1_Init+0x138>)
 80007f8:	f002 fa1c 	bl	8002c34 <HAL_TIMEx_ConfigBreakDeadTime>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000802:	f000 f841 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000806:	4803      	ldr	r0, [pc, #12]	@ (8000814 <MX_TIM1_Init+0x138>)
 8000808:	f000 f91a 	bl	8000a40 <HAL_TIM_MspPostInit>

}
 800080c:	bf00      	nop
 800080e:	3758      	adds	r7, #88	@ 0x58
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000098 	.word	0x20000098
 8000818:	40010000 	.word	0x40010000

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <MX_GPIO_Init+0x68>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a16      	ldr	r2, [pc, #88]	@ (8000884 <MX_GPIO_Init+0x68>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_GPIO_Init+0x68>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <MX_GPIO_Init+0x68>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a0f      	ldr	r2, [pc, #60]	@ (8000884 <MX_GPIO_Init+0x68>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <MX_GPIO_Init+0x68>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_GPIO_Init+0x68>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a08      	ldr	r2, [pc, #32]	@ (8000884 <MX_GPIO_Init+0x68>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_GPIO_Init+0x68>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000876:	bf00      	nop
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <Error_Handler+0x8>

08000894 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a2:	4a0f      	ldr	r2, [pc, #60]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008aa:	4b0d      	ldr	r3, [pc, #52]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008be:	4a08      	ldr	r2, [pc, #32]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c6:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	@ 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a17      	ldr	r2, [pc, #92]	@ (8000960 <HAL_ADC_MspInit+0x7c>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d127      	bne.n	8000956 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <HAL_ADC_MspInit+0x80>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090e:	4a15      	ldr	r2, [pc, #84]	@ (8000964 <HAL_ADC_MspInit+0x80>)
 8000910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000914:	6453      	str	r3, [r2, #68]	@ 0x44
 8000916:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <HAL_ADC_MspInit+0x80>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <HAL_ADC_MspInit+0x80>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a0e      	ldr	r2, [pc, #56]	@ (8000964 <HAL_ADC_MspInit+0x80>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <HAL_ADC_MspInit+0x80>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800093e:	2306      	movs	r3, #6
 8000940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000942:	2303      	movs	r3, #3
 8000944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	4805      	ldr	r0, [pc, #20]	@ (8000968 <HAL_ADC_MspInit+0x84>)
 8000952:	f000 fdd1 	bl	80014f8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000956:	bf00      	nop
 8000958:	3728      	adds	r7, #40	@ 0x28
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40012000 	.word	0x40012000
 8000964:	40023800 	.word	0x40023800
 8000968:	40020000 	.word	0x40020000

0800096c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	@ 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a19      	ldr	r2, [pc, #100]	@ (80009f0 <HAL_CAN_MspInit+0x84>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d12c      	bne.n	80009e8 <HAL_CAN_MspInit+0x7c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <HAL_CAN_MspInit+0x88>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000996:	4a17      	ldr	r2, [pc, #92]	@ (80009f4 <HAL_CAN_MspInit+0x88>)
 8000998:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800099c:	6413      	str	r3, [r2, #64]	@ 0x40
 800099e:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <HAL_CAN_MspInit+0x88>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <HAL_CAN_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a10      	ldr	r2, [pc, #64]	@ (80009f4 <HAL_CAN_MspInit+0x88>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <HAL_CAN_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009d8:	2309      	movs	r3, #9
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <HAL_CAN_MspInit+0x8c>)
 80009e4:	f000 fd88 	bl	80014f8 <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	@ 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40006400 	.word	0x40006400
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020400 	.word	0x40020400

080009fc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0b      	ldr	r2, [pc, #44]	@ (8000a38 <HAL_TIM_Base_MspInit+0x3c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d10d      	bne.n	8000a2a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <HAL_TIM_Base_MspInit+0x40>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	4a09      	ldr	r2, [pc, #36]	@ (8000a3c <HAL_TIM_Base_MspInit+0x40>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1e:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <HAL_TIM_Base_MspInit+0x40>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40010000 	.word	0x40010000
 8000a3c:	40023800 	.word	0x40023800

08000a40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a12      	ldr	r2, [pc, #72]	@ (8000aa8 <HAL_TIM_MspPostInit+0x68>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d11e      	bne.n	8000aa0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <HAL_TIM_MspPostInit+0x6c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a10      	ldr	r2, [pc, #64]	@ (8000aac <HAL_TIM_MspPostInit+0x6c>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <HAL_TIM_MspPostInit+0x6c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <HAL_TIM_MspPostInit+0x70>)
 8000a9c:	f000 fd2c 	bl	80014f8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000aa0:	bf00      	nop
 8000aa2:	3720      	adds	r7, #32
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40010000 	.word	0x40010000
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020000 	.word	0x40020000

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <NMI_Handler+0x4>

08000abc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <MemManage_Handler+0x4>

08000acc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0a:	f000 f891 	bl	8000c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b3c:	f7ff ffea 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b42:	490d      	ldr	r1, [pc, #52]	@ (8000b78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b44:	4a0d      	ldr	r2, [pc, #52]	@ (8000b7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b58:	4c0a      	ldr	r4, [pc, #40]	@ (8000b84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b66:	f002 f8bf 	bl	8002ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6a:	f7ff fcc3 	bl	80004f4 <main>
  bx  lr    
 8000b6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b7c:	08002d68 	.word	0x08002d68
  ldr r2, =_sbss
 8000b80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b84:	200000e4 	.word	0x200000e4

08000b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC_IRQHandler>
	...

08000b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b90:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0d      	ldr	r2, [pc, #52]	@ (8000bcc <HAL_Init+0x40>)
 8000b96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <HAL_Init+0x40>)
 8000ba2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <HAL_Init+0x40>)
 8000bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f000 fc6b 	bl	8001490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bba:	200f      	movs	r0, #15
 8000bbc:	f000 f808 	bl	8000bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc0:	f7ff fe68 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023c00 	.word	0x40023c00

08000bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <HAL_InitTick+0x54>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <HAL_InitTick+0x58>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4619      	mov	r1, r3
 8000be2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 fc75 	bl	80014de <HAL_SYSTICK_Config>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e00e      	b.n	8000c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b0f      	cmp	r3, #15
 8000c02:	d80a      	bhi.n	8000c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c04:	2200      	movs	r2, #0
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 fc4b 	bl	80014a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c10:	4a06      	ldr	r2, [pc, #24]	@ (8000c2c <HAL_InitTick+0x5c>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c16:	2300      	movs	r3, #0
 8000c18:	e000      	b.n	8000c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000000 	.word	0x20000000
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	20000004 	.word	0x20000004

08000c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_IncTick+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_IncTick+0x24>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <HAL_IncTick+0x24>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000008 	.word	0x20000008
 8000c54:	200000e0 	.word	0x200000e0

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	@ (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	200000e0 	.word	0x200000e0

08000c70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d101      	bne.n	8000c86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e033      	b.n	8000cee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d109      	bne.n	8000ca2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff fe28 	bl	80008e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2200      	movs	r2, #0
 8000c98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca6:	f003 0310 	and.w	r3, r3, #16
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d118      	bne.n	8000ce0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000cb6:	f023 0302 	bic.w	r3, r3, #2
 8000cba:	f043 0202 	orr.w	r2, r3, #2
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f000 f93a 	bl	8000f3c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	f023 0303 	bic.w	r3, r3, #3
 8000cd6:	f043 0201 	orr.w	r2, r3, #1
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cde:	e001      	b.n	8000ce4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d101      	bne.n	8000d14 <HAL_ADC_ConfigChannel+0x1c>
 8000d10:	2302      	movs	r3, #2
 8000d12:	e105      	b.n	8000f20 <HAL_ADC_ConfigChannel+0x228>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2201      	movs	r2, #1
 8000d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b09      	cmp	r3, #9
 8000d22:	d925      	bls.n	8000d70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	68d9      	ldr	r1, [r3, #12]
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	461a      	mov	r2, r3
 8000d32:	4613      	mov	r3, r2
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	4413      	add	r3, r2
 8000d38:	3b1e      	subs	r3, #30
 8000d3a:	2207      	movs	r2, #7
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43da      	mvns	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	400a      	ands	r2, r1
 8000d48:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	68d9      	ldr	r1, [r3, #12]
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4403      	add	r3, r0
 8000d62:	3b1e      	subs	r3, #30
 8000d64:	409a      	lsls	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	e022      	b.n	8000db6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6919      	ldr	r1, [r3, #16]
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4613      	mov	r3, r2
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	4413      	add	r3, r2
 8000d84:	2207      	movs	r2, #7
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	400a      	ands	r2, r1
 8000d92:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6919      	ldr	r1, [r3, #16]
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	4618      	mov	r0, r3
 8000da6:	4603      	mov	r3, r0
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	4403      	add	r3, r0
 8000dac:	409a      	lsls	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	430a      	orrs	r2, r1
 8000db4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d824      	bhi.n	8000e08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	4413      	add	r3, r2
 8000dce:	3b05      	subs	r3, #5
 8000dd0:	221f      	movs	r2, #31
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	400a      	ands	r2, r1
 8000dde:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	4618      	mov	r0, r3
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	4613      	mov	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	3b05      	subs	r3, #5
 8000dfa:	fa00 f203 	lsl.w	r2, r0, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	430a      	orrs	r2, r1
 8000e04:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e06:	e04c      	b.n	8000ea2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b0c      	cmp	r3, #12
 8000e0e:	d824      	bhi.n	8000e5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4413      	add	r3, r2
 8000e20:	3b23      	subs	r3, #35	@ 0x23
 8000e22:	221f      	movs	r2, #31
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43da      	mvns	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	400a      	ands	r2, r1
 8000e30:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	4613      	mov	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4413      	add	r3, r2
 8000e4a:	3b23      	subs	r3, #35	@ 0x23
 8000e4c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	430a      	orrs	r2, r1
 8000e56:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e58:	e023      	b.n	8000ea2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	4613      	mov	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	3b41      	subs	r3, #65	@ 0x41
 8000e6c:	221f      	movs	r2, #31
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	400a      	ands	r2, r1
 8000e7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	4618      	mov	r0, r3
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	3b41      	subs	r3, #65	@ 0x41
 8000e96:	fa00 f203 	lsl.w	r2, r0, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ea2:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <HAL_ADC_ConfigChannel+0x234>)
 8000ea4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a21      	ldr	r2, [pc, #132]	@ (8000f30 <HAL_ADC_ConfigChannel+0x238>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d109      	bne.n	8000ec4 <HAL_ADC_ConfigChannel+0x1cc>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b12      	cmp	r3, #18
 8000eb6:	d105      	bne.n	8000ec4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a19      	ldr	r2, [pc, #100]	@ (8000f30 <HAL_ADC_ConfigChannel+0x238>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d123      	bne.n	8000f16 <HAL_ADC_ConfigChannel+0x21e>
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b10      	cmp	r3, #16
 8000ed4:	d003      	beq.n	8000ede <HAL_ADC_ConfigChannel+0x1e6>
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b11      	cmp	r3, #17
 8000edc:	d11b      	bne.n	8000f16 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b10      	cmp	r3, #16
 8000ef0:	d111      	bne.n	8000f16 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ef2:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <HAL_ADC_ConfigChannel+0x23c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a10      	ldr	r2, [pc, #64]	@ (8000f38 <HAL_ADC_ConfigChannel+0x240>)
 8000ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8000efc:	0c9a      	lsrs	r2, r3, #18
 8000efe:	4613      	mov	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000f08:	e002      	b.n	8000f10 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1f9      	bne.n	8000f0a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	40012300 	.word	0x40012300
 8000f30:	40012000 	.word	0x40012000
 8000f34:	20000000 	.word	0x20000000
 8000f38:	431bde83 	.word	0x431bde83

08000f3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f44:	4b79      	ldr	r3, [pc, #484]	@ (800112c <ADC_Init+0x1f0>)
 8000f46:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	6859      	ldr	r1, [r3, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	021a      	lsls	r2, r3, #8
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	430a      	orrs	r2, r1
 8000f84:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8000f94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	6859      	ldr	r1, [r3, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000fb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	6899      	ldr	r1, [r3, #8]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fce:	4a58      	ldr	r2, [pc, #352]	@ (8001130 <ADC_Init+0x1f4>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d022      	beq.n	800101a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000fe2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	6899      	ldr	r1, [r3, #8]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001004:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6899      	ldr	r1, [r3, #8]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	430a      	orrs	r2, r1
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	e00f      	b.n	800103a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001028:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001038:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 0202 	bic.w	r2, r2, #2
 8001048:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6899      	ldr	r1, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7e1b      	ldrb	r3, [r3, #24]
 8001054:	005a      	lsls	r2, r3, #1
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	430a      	orrs	r2, r1
 800105c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d01b      	beq.n	80010a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001076:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001086:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6859      	ldr	r1, [r3, #4]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001092:	3b01      	subs	r3, #1
 8001094:	035a      	lsls	r2, r3, #13
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	430a      	orrs	r2, r1
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	e007      	b.n	80010b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80010ae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80010be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	051a      	lsls	r2, r3, #20
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	430a      	orrs	r2, r1
 80010d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80010e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	6899      	ldr	r1, [r3, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80010f2:	025a      	lsls	r2, r3, #9
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	430a      	orrs	r2, r1
 80010fa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800110a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6899      	ldr	r1, [r3, #8]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	029a      	lsls	r2, r3, #10
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	609a      	str	r2, [r3, #8]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	40012300 	.word	0x40012300
 8001130:	0f000001 	.word	0x0f000001

08001134 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e0ed      	b.n	8001322 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3020 	ldrb.w	r3, [r3, #32]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d102      	bne.n	8001158 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff fc0a 	bl	800096c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 0201 	orr.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001168:	f7ff fd76 	bl	8000c58 <HAL_GetTick>
 800116c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800116e:	e012      	b.n	8001196 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001170:	f7ff fd72 	bl	8000c58 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b0a      	cmp	r3, #10
 800117c:	d90b      	bls.n	8001196 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001182:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2205      	movs	r2, #5
 800118e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e0c5      	b.n	8001322 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0e5      	beq.n	8001170 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0202 	bic.w	r2, r2, #2
 80011b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011b4:	f7ff fd50 	bl	8000c58 <HAL_GetTick>
 80011b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011ba:	e012      	b.n	80011e2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011bc:	f7ff fd4c 	bl	8000c58 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b0a      	cmp	r3, #10
 80011c8:	d90b      	bls.n	80011e2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2205      	movs	r2, #5
 80011da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e09f      	b.n	8001322 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1e5      	bne.n	80011bc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7e1b      	ldrb	r3, [r3, #24]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d108      	bne.n	800120a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	e007      	b.n	800121a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001218:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7e5b      	ldrb	r3, [r3, #25]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d108      	bne.n	8001234 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	e007      	b.n	8001244 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001242:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7e9b      	ldrb	r3, [r3, #26]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d108      	bne.n	800125e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0220 	orr.w	r2, r2, #32
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	e007      	b.n	800126e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0220 	bic.w	r2, r2, #32
 800126c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7edb      	ldrb	r3, [r3, #27]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d108      	bne.n	8001288 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0210 	bic.w	r2, r2, #16
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	e007      	b.n	8001298 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0210 	orr.w	r2, r2, #16
 8001296:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7f1b      	ldrb	r3, [r3, #28]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d108      	bne.n	80012b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0208 	orr.w	r2, r2, #8
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e007      	b.n	80012c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0208 	bic.w	r2, r2, #8
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7f5b      	ldrb	r3, [r3, #29]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d108      	bne.n	80012dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f042 0204 	orr.w	r2, r2, #4
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	e007      	b.n	80012ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0204 	bic.w	r2, r2, #4
 80012ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	431a      	orrs	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	ea42 0103 	orr.w	r1, r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	1e5a      	subs	r2, r3, #1
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001348:	4013      	ands	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001354:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800135c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135e:	4a04      	ldr	r2, [pc, #16]	@ (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	60d3      	str	r3, [r2, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001378:	4b04      	ldr	r3, [pc, #16]	@ (800138c <__NVIC_GetPriorityGrouping+0x18>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	f003 0307 	and.w	r3, r3, #7
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db0a      	blt.n	80013ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	490c      	ldr	r1, [pc, #48]	@ (80013dc <__NVIC_SetPriority+0x4c>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	0112      	lsls	r2, r2, #4
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	440b      	add	r3, r1
 80013b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b8:	e00a      	b.n	80013d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4908      	ldr	r1, [pc, #32]	@ (80013e0 <__NVIC_SetPriority+0x50>)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	3b04      	subs	r3, #4
 80013c8:	0112      	lsls	r2, r2, #4
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	440b      	add	r3, r1
 80013ce:	761a      	strb	r2, [r3, #24]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	@ 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f1c3 0307 	rsb	r3, r3, #7
 80013fe:	2b04      	cmp	r3, #4
 8001400:	bf28      	it	cs
 8001402:	2304      	movcs	r3, #4
 8001404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3304      	adds	r3, #4
 800140a:	2b06      	cmp	r3, #6
 800140c:	d902      	bls.n	8001414 <NVIC_EncodePriority+0x30>
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3b03      	subs	r3, #3
 8001412:	e000      	b.n	8001416 <NVIC_EncodePriority+0x32>
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43da      	mvns	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	401a      	ands	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800142c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43d9      	mvns	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	4313      	orrs	r3, r2
         );
}
 800143e:	4618      	mov	r0, r3
 8001440:	3724      	adds	r7, #36	@ 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800145c:	d301      	bcc.n	8001462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145e:	2301      	movs	r3, #1
 8001460:	e00f      	b.n	8001482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001462:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <SysTick_Config+0x40>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146a:	210f      	movs	r1, #15
 800146c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001470:	f7ff ff8e 	bl	8001390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <SysTick_Config+0x40>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147a:	4b04      	ldr	r3, [pc, #16]	@ (800148c <SysTick_Config+0x40>)
 800147c:	2207      	movs	r2, #7
 800147e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	e000e010 	.word	0xe000e010

08001490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff47 	bl	800132c <__NVIC_SetPriorityGrouping>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b8:	f7ff ff5c 	bl	8001374 <__NVIC_GetPriorityGrouping>
 80014bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	68b9      	ldr	r1, [r7, #8]
 80014c2:	6978      	ldr	r0, [r7, #20]
 80014c4:	f7ff ff8e 	bl	80013e4 <NVIC_EncodePriority>
 80014c8:	4602      	mov	r2, r0
 80014ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff5d 	bl	8001390 <__NVIC_SetPriority>
}
 80014d6:	bf00      	nop
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ffb0 	bl	800144c <SysTick_Config>
 80014ec:	4603      	mov	r3, r0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	@ 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	e16b      	b.n	80017ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001514:	2201      	movs	r2, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	429a      	cmp	r2, r3
 800152e:	f040 815a 	bne.w	80017e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	2b01      	cmp	r3, #1
 800153c:	d005      	beq.n	800154a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001546:	2b02      	cmp	r3, #2
 8001548:	d130      	bne.n	80015ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	2203      	movs	r2, #3
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001580:	2201      	movs	r2, #1
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	091b      	lsrs	r3, r3, #4
 8001596:	f003 0201 	and.w	r2, r3, #1
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d017      	beq.n	80015e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d123      	bne.n	800163c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	08da      	lsrs	r2, r3, #3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3208      	adds	r2, #8
 80015fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	220f      	movs	r2, #15
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	691a      	ldr	r2, [r3, #16]
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	08da      	lsrs	r2, r3, #3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3208      	adds	r2, #8
 8001636:	69b9      	ldr	r1, [r7, #24]
 8001638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	2203      	movs	r2, #3
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0203 	and.w	r2, r3, #3
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80b4 	beq.w	80017e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b60      	ldr	r3, [pc, #384]	@ (8001804 <HAL_GPIO_Init+0x30c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001686:	4a5f      	ldr	r2, [pc, #380]	@ (8001804 <HAL_GPIO_Init+0x30c>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800168c:	6453      	str	r3, [r2, #68]	@ 0x44
 800168e:	4b5d      	ldr	r3, [pc, #372]	@ (8001804 <HAL_GPIO_Init+0x30c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800169a:	4a5b      	ldr	r2, [pc, #364]	@ (8001808 <HAL_GPIO_Init+0x310>)
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	3302      	adds	r3, #2
 80016a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	220f      	movs	r2, #15
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a52      	ldr	r2, [pc, #328]	@ (800180c <HAL_GPIO_Init+0x314>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d02b      	beq.n	800171e <HAL_GPIO_Init+0x226>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a51      	ldr	r2, [pc, #324]	@ (8001810 <HAL_GPIO_Init+0x318>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d025      	beq.n	800171a <HAL_GPIO_Init+0x222>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a50      	ldr	r2, [pc, #320]	@ (8001814 <HAL_GPIO_Init+0x31c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d01f      	beq.n	8001716 <HAL_GPIO_Init+0x21e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001818 <HAL_GPIO_Init+0x320>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d019      	beq.n	8001712 <HAL_GPIO_Init+0x21a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4e      	ldr	r2, [pc, #312]	@ (800181c <HAL_GPIO_Init+0x324>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d013      	beq.n	800170e <HAL_GPIO_Init+0x216>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4d      	ldr	r2, [pc, #308]	@ (8001820 <HAL_GPIO_Init+0x328>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d00d      	beq.n	800170a <HAL_GPIO_Init+0x212>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001824 <HAL_GPIO_Init+0x32c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d007      	beq.n	8001706 <HAL_GPIO_Init+0x20e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001828 <HAL_GPIO_Init+0x330>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d101      	bne.n	8001702 <HAL_GPIO_Init+0x20a>
 80016fe:	2307      	movs	r3, #7
 8001700:	e00e      	b.n	8001720 <HAL_GPIO_Init+0x228>
 8001702:	2308      	movs	r3, #8
 8001704:	e00c      	b.n	8001720 <HAL_GPIO_Init+0x228>
 8001706:	2306      	movs	r3, #6
 8001708:	e00a      	b.n	8001720 <HAL_GPIO_Init+0x228>
 800170a:	2305      	movs	r3, #5
 800170c:	e008      	b.n	8001720 <HAL_GPIO_Init+0x228>
 800170e:	2304      	movs	r3, #4
 8001710:	e006      	b.n	8001720 <HAL_GPIO_Init+0x228>
 8001712:	2303      	movs	r3, #3
 8001714:	e004      	b.n	8001720 <HAL_GPIO_Init+0x228>
 8001716:	2302      	movs	r3, #2
 8001718:	e002      	b.n	8001720 <HAL_GPIO_Init+0x228>
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <HAL_GPIO_Init+0x228>
 800171e:	2300      	movs	r3, #0
 8001720:	69fa      	ldr	r2, [r7, #28]
 8001722:	f002 0203 	and.w	r2, r2, #3
 8001726:	0092      	lsls	r2, r2, #2
 8001728:	4093      	lsls	r3, r2
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001730:	4935      	ldr	r1, [pc, #212]	@ (8001808 <HAL_GPIO_Init+0x310>)
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	089b      	lsrs	r3, r3, #2
 8001736:	3302      	adds	r3, #2
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800173e:	4b3b      	ldr	r3, [pc, #236]	@ (800182c <HAL_GPIO_Init+0x334>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001762:	4a32      	ldr	r2, [pc, #200]	@ (800182c <HAL_GPIO_Init+0x334>)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001768:	4b30      	ldr	r3, [pc, #192]	@ (800182c <HAL_GPIO_Init+0x334>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800178c:	4a27      	ldr	r2, [pc, #156]	@ (800182c <HAL_GPIO_Init+0x334>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001792:	4b26      	ldr	r3, [pc, #152]	@ (800182c <HAL_GPIO_Init+0x334>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	43db      	mvns	r3, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4013      	ands	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017b6:	4a1d      	ldr	r2, [pc, #116]	@ (800182c <HAL_GPIO_Init+0x334>)
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017bc:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <HAL_GPIO_Init+0x334>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017e0:	4a12      	ldr	r2, [pc, #72]	@ (800182c <HAL_GPIO_Init+0x334>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3301      	adds	r3, #1
 80017ea:	61fb      	str	r3, [r7, #28]
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	2b0f      	cmp	r3, #15
 80017f0:	f67f ae90 	bls.w	8001514 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	3724      	adds	r7, #36	@ 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	40013800 	.word	0x40013800
 800180c:	40020000 	.word	0x40020000
 8001810:	40020400 	.word	0x40020400
 8001814:	40020800 	.word	0x40020800
 8001818:	40020c00 	.word	0x40020c00
 800181c:	40021000 	.word	0x40021000
 8001820:	40021400 	.word	0x40021400
 8001824:	40021800 	.word	0x40021800
 8001828:	40021c00 	.word	0x40021c00
 800182c:	40013c00 	.word	0x40013c00

08001830 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e267      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d075      	beq.n	800193a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800184e:	4b88      	ldr	r3, [pc, #544]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b04      	cmp	r3, #4
 8001858:	d00c      	beq.n	8001874 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800185a:	4b85      	ldr	r3, [pc, #532]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001862:	2b08      	cmp	r3, #8
 8001864:	d112      	bne.n	800188c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001866:	4b82      	ldr	r3, [pc, #520]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800186e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001872:	d10b      	bne.n	800188c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001874:	4b7e      	ldr	r3, [pc, #504]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d05b      	beq.n	8001938 <HAL_RCC_OscConfig+0x108>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d157      	bne.n	8001938 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e242      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001894:	d106      	bne.n	80018a4 <HAL_RCC_OscConfig+0x74>
 8001896:	4b76      	ldr	r3, [pc, #472]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a75      	ldr	r2, [pc, #468]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 800189c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e01d      	b.n	80018e0 <HAL_RCC_OscConfig+0xb0>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018ac:	d10c      	bne.n	80018c8 <HAL_RCC_OscConfig+0x98>
 80018ae:	4b70      	ldr	r3, [pc, #448]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a6f      	ldr	r2, [pc, #444]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b6d      	ldr	r3, [pc, #436]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a6c      	ldr	r2, [pc, #432]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e00b      	b.n	80018e0 <HAL_RCC_OscConfig+0xb0>
 80018c8:	4b69      	ldr	r3, [pc, #420]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a68      	ldr	r2, [pc, #416]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b66      	ldr	r3, [pc, #408]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a65      	ldr	r2, [pc, #404]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 80018da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d013      	beq.n	8001910 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7ff f9b6 	bl	8000c58 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f0:	f7ff f9b2 	bl	8000c58 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b64      	cmp	r3, #100	@ 0x64
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e207      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	4b5b      	ldr	r3, [pc, #364]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0xc0>
 800190e:	e014      	b.n	800193a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7ff f9a2 	bl	8000c58 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff f99e 	bl	8000c58 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	@ 0x64
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e1f3      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192a:	4b51      	ldr	r3, [pc, #324]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0xe8>
 8001936:	e000      	b.n	800193a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d063      	beq.n	8001a0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001946:	4b4a      	ldr	r3, [pc, #296]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00b      	beq.n	800196a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001952:	4b47      	ldr	r3, [pc, #284]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800195a:	2b08      	cmp	r3, #8
 800195c:	d11c      	bne.n	8001998 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800195e:	4b44      	ldr	r3, [pc, #272]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d116      	bne.n	8001998 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196a:	4b41      	ldr	r3, [pc, #260]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <HAL_RCC_OscConfig+0x152>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d001      	beq.n	8001982 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e1c7      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001982:	4b3b      	ldr	r3, [pc, #236]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4937      	ldr	r1, [pc, #220]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001996:	e03a      	b.n	8001a0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d020      	beq.n	80019e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a0:	4b34      	ldr	r3, [pc, #208]	@ (8001a74 <HAL_RCC_OscConfig+0x244>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a6:	f7ff f957 	bl	8000c58 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ae:	f7ff f953 	bl	8000c58 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e1a8      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019cc:	4b28      	ldr	r3, [pc, #160]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4925      	ldr	r1, [pc, #148]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	600b      	str	r3, [r1, #0]
 80019e0:	e015      	b.n	8001a0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e2:	4b24      	ldr	r3, [pc, #144]	@ (8001a74 <HAL_RCC_OscConfig+0x244>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7ff f936 	bl	8000c58 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f0:	f7ff f932 	bl	8000c58 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e187      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a02:	4b1b      	ldr	r3, [pc, #108]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d036      	beq.n	8001a88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d016      	beq.n	8001a50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a22:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <HAL_RCC_OscConfig+0x248>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a28:	f7ff f916 	bl	8000c58 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a30:	f7ff f912 	bl	8000c58 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e167      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a42:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <HAL_RCC_OscConfig+0x240>)
 8001a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0x200>
 8001a4e:	e01b      	b.n	8001a88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a50:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <HAL_RCC_OscConfig+0x248>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a56:	f7ff f8ff 	bl	8000c58 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5c:	e00e      	b.n	8001a7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5e:	f7ff f8fb 	bl	8000c58 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d907      	bls.n	8001a7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e150      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
 8001a70:	40023800 	.word	0x40023800
 8001a74:	42470000 	.word	0x42470000
 8001a78:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7c:	4b88      	ldr	r3, [pc, #544]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1ea      	bne.n	8001a5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 8097 	beq.w	8001bc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9a:	4b81      	ldr	r3, [pc, #516]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10f      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	4b7d      	ldr	r3, [pc, #500]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	4a7c      	ldr	r2, [pc, #496]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac6:	4b77      	ldr	r3, [pc, #476]	@ (8001ca4 <HAL_RCC_OscConfig+0x474>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d118      	bne.n	8001b04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad2:	4b74      	ldr	r3, [pc, #464]	@ (8001ca4 <HAL_RCC_OscConfig+0x474>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a73      	ldr	r2, [pc, #460]	@ (8001ca4 <HAL_RCC_OscConfig+0x474>)
 8001ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ade:	f7ff f8bb 	bl	8000c58 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae6:	f7ff f8b7 	bl	8000c58 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e10c      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af8:	4b6a      	ldr	r3, [pc, #424]	@ (8001ca4 <HAL_RCC_OscConfig+0x474>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d106      	bne.n	8001b1a <HAL_RCC_OscConfig+0x2ea>
 8001b0c:	4b64      	ldr	r3, [pc, #400]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b10:	4a63      	ldr	r2, [pc, #396]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b18:	e01c      	b.n	8001b54 <HAL_RCC_OscConfig+0x324>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b05      	cmp	r3, #5
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x30c>
 8001b22:	4b5f      	ldr	r3, [pc, #380]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b26:	4a5e      	ldr	r2, [pc, #376]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b2e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b32:	4a5b      	ldr	r2, [pc, #364]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b3a:	e00b      	b.n	8001b54 <HAL_RCC_OscConfig+0x324>
 8001b3c:	4b58      	ldr	r3, [pc, #352]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b40:	4a57      	ldr	r2, [pc, #348]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b48:	4b55      	ldr	r3, [pc, #340]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b4c:	4a54      	ldr	r2, [pc, #336]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b4e:	f023 0304 	bic.w	r3, r3, #4
 8001b52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d015      	beq.n	8001b88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5c:	f7ff f87c 	bl	8000c58 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b64:	f7ff f878 	bl	8000c58 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e0cb      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7a:	4b49      	ldr	r3, [pc, #292]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0ee      	beq.n	8001b64 <HAL_RCC_OscConfig+0x334>
 8001b86:	e014      	b.n	8001bb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b88:	f7ff f866 	bl	8000c58 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b90:	f7ff f862 	bl	8000c58 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e0b5      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1ee      	bne.n	8001b90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d105      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb8:	4b39      	ldr	r3, [pc, #228]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbc:	4a38      	ldr	r2, [pc, #224]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001bbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bc2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80a1 	beq.w	8001d10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bce:	4b34      	ldr	r3, [pc, #208]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d05c      	beq.n	8001c94 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d141      	bne.n	8001c66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be2:	4b31      	ldr	r3, [pc, #196]	@ (8001ca8 <HAL_RCC_OscConfig+0x478>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7ff f836 	bl	8000c58 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf0:	f7ff f832 	bl	8000c58 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e087      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c02:	4b27      	ldr	r3, [pc, #156]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69da      	ldr	r2, [r3, #28]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1c:	019b      	lsls	r3, r3, #6
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c24:	085b      	lsrs	r3, r3, #1
 8001c26:	3b01      	subs	r3, #1
 8001c28:	041b      	lsls	r3, r3, #16
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c30:	061b      	lsls	r3, r3, #24
 8001c32:	491b      	ldr	r1, [pc, #108]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca8 <HAL_RCC_OscConfig+0x478>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3e:	f7ff f80b 	bl	8000c58 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c46:	f7ff f807 	bl	8000c58 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e05c      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c58:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x416>
 8001c64:	e054      	b.n	8001d10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c66:	4b10      	ldr	r3, [pc, #64]	@ (8001ca8 <HAL_RCC_OscConfig+0x478>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7fe fff4 	bl	8000c58 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c74:	f7fe fff0 	bl	8000c58 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e045      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c86:	4b06      	ldr	r3, [pc, #24]	@ (8001ca0 <HAL_RCC_OscConfig+0x470>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0x444>
 8001c92:	e03d      	b.n	8001d10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d107      	bne.n	8001cac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e038      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40007000 	.word	0x40007000
 8001ca8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	@ (8001d1c <HAL_RCC_OscConfig+0x4ec>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d028      	beq.n	8001d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d121      	bne.n	8001d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d11a      	bne.n	8001d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001cdc:	4013      	ands	r3, r2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ce2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d111      	bne.n	8001d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf2:	085b      	lsrs	r3, r3, #1
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d107      	bne.n	8001d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800

08001d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0cc      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d34:	4b68      	ldr	r3, [pc, #416]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d90c      	bls.n	8001d5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b65      	ldr	r3, [pc, #404]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b63      	ldr	r3, [pc, #396]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0b8      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d020      	beq.n	8001daa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d74:	4b59      	ldr	r3, [pc, #356]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	4a58      	ldr	r2, [pc, #352]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d8c:	4b53      	ldr	r3, [pc, #332]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4a52      	ldr	r2, [pc, #328]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d98:	4b50      	ldr	r3, [pc, #320]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	494d      	ldr	r1, [pc, #308]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d044      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	4b47      	ldr	r3, [pc, #284]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d119      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e07f      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d003      	beq.n	8001dde <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dde:	4b3f      	ldr	r3, [pc, #252]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e06f      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dee:	4b3b      	ldr	r3, [pc, #236]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e067      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dfe:	4b37      	ldr	r3, [pc, #220]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f023 0203 	bic.w	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4934      	ldr	r1, [pc, #208]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e10:	f7fe ff22 	bl	8000c58 <HAL_GetTick>
 8001e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	e00a      	b.n	8001e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e18:	f7fe ff1e 	bl	8000c58 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e04f      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 020c 	and.w	r2, r3, #12
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d1eb      	bne.n	8001e18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e40:	4b25      	ldr	r3, [pc, #148]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d20c      	bcs.n	8001e68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b22      	ldr	r3, [pc, #136]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e56:	4b20      	ldr	r3, [pc, #128]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e032      	b.n	8001ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e74:	4b19      	ldr	r3, [pc, #100]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	4916      	ldr	r1, [pc, #88]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d009      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e92:	4b12      	ldr	r3, [pc, #72]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	490e      	ldr	r1, [pc, #56]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ea6:	f000 f821 	bl	8001eec <HAL_RCC_GetSysClockFreq>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	490a      	ldr	r1, [pc, #40]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	5ccb      	ldrb	r3, [r1, r3]
 8001eba:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebe:	4a09      	ldr	r2, [pc, #36]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ec2:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe fe82 	bl	8000bd0 <HAL_InitTick>

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023c00 	.word	0x40023c00
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	08002d48 	.word	0x08002d48
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	20000004 	.word	0x20000004

08001eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ef0:	b094      	sub	sp, #80	@ 0x50
 8001ef2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f04:	4b79      	ldr	r3, [pc, #484]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d00d      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x40>
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	f200 80e1 	bhi.w	80020d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <HAL_RCC_GetSysClockFreq+0x34>
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d003      	beq.n	8001f26 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f1e:	e0db      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f20:	4b73      	ldr	r3, [pc, #460]	@ (80020f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f24:	e0db      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f26:	4b73      	ldr	r3, [pc, #460]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f2a:	e0d8      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f2c:	4b6f      	ldr	r3, [pc, #444]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f34:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f36:	4b6d      	ldr	r3, [pc, #436]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d063      	beq.n	800200a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f42:	4b6a      	ldr	r3, [pc, #424]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	099b      	lsrs	r3, r3, #6
 8001f48:	2200      	movs	r2, #0
 8001f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f54:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f56:	2300      	movs	r3, #0
 8001f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f5e:	4622      	mov	r2, r4
 8001f60:	462b      	mov	r3, r5
 8001f62:	f04f 0000 	mov.w	r0, #0
 8001f66:	f04f 0100 	mov.w	r1, #0
 8001f6a:	0159      	lsls	r1, r3, #5
 8001f6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f70:	0150      	lsls	r0, r2, #5
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4621      	mov	r1, r4
 8001f78:	1a51      	subs	r1, r2, r1
 8001f7a:	6139      	str	r1, [r7, #16]
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f90:	4659      	mov	r1, fp
 8001f92:	018b      	lsls	r3, r1, #6
 8001f94:	4651      	mov	r1, sl
 8001f96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f9a:	4651      	mov	r1, sl
 8001f9c:	018a      	lsls	r2, r1, #6
 8001f9e:	4651      	mov	r1, sl
 8001fa0:	ebb2 0801 	subs.w	r8, r2, r1
 8001fa4:	4659      	mov	r1, fp
 8001fa6:	eb63 0901 	sbc.w	r9, r3, r1
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fbe:	4690      	mov	r8, r2
 8001fc0:	4699      	mov	r9, r3
 8001fc2:	4623      	mov	r3, r4
 8001fc4:	eb18 0303 	adds.w	r3, r8, r3
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	462b      	mov	r3, r5
 8001fcc:	eb49 0303 	adc.w	r3, r9, r3
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fde:	4629      	mov	r1, r5
 8001fe0:	024b      	lsls	r3, r1, #9
 8001fe2:	4621      	mov	r1, r4
 8001fe4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fe8:	4621      	mov	r1, r4
 8001fea:	024a      	lsls	r2, r1, #9
 8001fec:	4610      	mov	r0, r2
 8001fee:	4619      	mov	r1, r3
 8001ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ff6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ff8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ffc:	f7fe f8e4 	bl	80001c8 <__aeabi_uldivmod>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4613      	mov	r3, r2
 8002006:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002008:	e058      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800200a:	4b38      	ldr	r3, [pc, #224]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x200>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	099b      	lsrs	r3, r3, #6
 8002010:	2200      	movs	r2, #0
 8002012:	4618      	mov	r0, r3
 8002014:	4611      	mov	r1, r2
 8002016:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800201a:	623b      	str	r3, [r7, #32]
 800201c:	2300      	movs	r3, #0
 800201e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002020:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002024:	4642      	mov	r2, r8
 8002026:	464b      	mov	r3, r9
 8002028:	f04f 0000 	mov.w	r0, #0
 800202c:	f04f 0100 	mov.w	r1, #0
 8002030:	0159      	lsls	r1, r3, #5
 8002032:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002036:	0150      	lsls	r0, r2, #5
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4641      	mov	r1, r8
 800203e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002042:	4649      	mov	r1, r9
 8002044:	eb63 0b01 	sbc.w	fp, r3, r1
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	f04f 0300 	mov.w	r3, #0
 8002050:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002054:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002058:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800205c:	ebb2 040a 	subs.w	r4, r2, sl
 8002060:	eb63 050b 	sbc.w	r5, r3, fp
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	00eb      	lsls	r3, r5, #3
 800206e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002072:	00e2      	lsls	r2, r4, #3
 8002074:	4614      	mov	r4, r2
 8002076:	461d      	mov	r5, r3
 8002078:	4643      	mov	r3, r8
 800207a:	18e3      	adds	r3, r4, r3
 800207c:	603b      	str	r3, [r7, #0]
 800207e:	464b      	mov	r3, r9
 8002080:	eb45 0303 	adc.w	r3, r5, r3
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002092:	4629      	mov	r1, r5
 8002094:	028b      	lsls	r3, r1, #10
 8002096:	4621      	mov	r1, r4
 8002098:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800209c:	4621      	mov	r1, r4
 800209e:	028a      	lsls	r2, r1, #10
 80020a0:	4610      	mov	r0, r2
 80020a2:	4619      	mov	r1, r3
 80020a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020a6:	2200      	movs	r2, #0
 80020a8:	61bb      	str	r3, [r7, #24]
 80020aa:	61fa      	str	r2, [r7, #28]
 80020ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020b0:	f7fe f88a 	bl	80001c8 <__aeabi_uldivmod>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4613      	mov	r3, r2
 80020ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80020bc:	4b0b      	ldr	r3, [pc, #44]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x200>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	0c1b      	lsrs	r3, r3, #16
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	3301      	adds	r3, #1
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80020cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020d6:	e002      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80020da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3750      	adds	r7, #80	@ 0x50
 80020e4:	46bd      	mov	sp, r7
 80020e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800
 80020f0:	00f42400 	.word	0x00f42400
 80020f4:	007a1200 	.word	0x007a1200

080020f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e041      	b.n	800218e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d106      	bne.n	8002124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe fc6c 	bl	80009fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3304      	adds	r3, #4
 8002134:	4619      	mov	r1, r3
 8002136:	4610      	mov	r0, r2
 8002138:	f000 fa10 	bl	800255c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e041      	b.n	800222c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d106      	bne.n	80021c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f839 	bl	8002234 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2202      	movs	r2, #2
 80021c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3304      	adds	r3, #4
 80021d2:	4619      	mov	r1, r3
 80021d4:	4610      	mov	r0, r2
 80021d6:	f000 f9c1 	bl	800255c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002262:	2302      	movs	r3, #2
 8002264:	e0ae      	b.n	80023c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b0c      	cmp	r3, #12
 8002272:	f200 809f 	bhi.w	80023b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002276:	a201      	add	r2, pc, #4	@ (adr r2, 800227c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227c:	080022b1 	.word	0x080022b1
 8002280:	080023b5 	.word	0x080023b5
 8002284:	080023b5 	.word	0x080023b5
 8002288:	080023b5 	.word	0x080023b5
 800228c:	080022f1 	.word	0x080022f1
 8002290:	080023b5 	.word	0x080023b5
 8002294:	080023b5 	.word	0x080023b5
 8002298:	080023b5 	.word	0x080023b5
 800229c:	08002333 	.word	0x08002333
 80022a0:	080023b5 	.word	0x080023b5
 80022a4:	080023b5 	.word	0x080023b5
 80022a8:	080023b5 	.word	0x080023b5
 80022ac:	08002373 	.word	0x08002373
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 f9f6 	bl	80026a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699a      	ldr	r2, [r3, #24]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0208 	orr.w	r2, r2, #8
 80022ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699a      	ldr	r2, [r3, #24]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0204 	bic.w	r2, r2, #4
 80022da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6999      	ldr	r1, [r3, #24]
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	691a      	ldr	r2, [r3, #16]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	619a      	str	r2, [r3, #24]
      break;
 80022ee:	e064      	b.n	80023ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 fa46 	bl	8002788 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699a      	ldr	r2, [r3, #24]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800230a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699a      	ldr	r2, [r3, #24]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800231a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6999      	ldr	r1, [r3, #24]
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	021a      	lsls	r2, r3, #8
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	619a      	str	r2, [r3, #24]
      break;
 8002330:	e043      	b.n	80023ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68b9      	ldr	r1, [r7, #8]
 8002338:	4618      	mov	r0, r3
 800233a:	f000 fa9b 	bl	8002874 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	69da      	ldr	r2, [r3, #28]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0208 	orr.w	r2, r2, #8
 800234c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	69da      	ldr	r2, [r3, #28]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0204 	bic.w	r2, r2, #4
 800235c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	69d9      	ldr	r1, [r3, #28]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	61da      	str	r2, [r3, #28]
      break;
 8002370:	e023      	b.n	80023ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68b9      	ldr	r1, [r7, #8]
 8002378:	4618      	mov	r0, r3
 800237a:	f000 faef 	bl	800295c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	69da      	ldr	r2, [r3, #28]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800238c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	69da      	ldr	r2, [r3, #28]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800239c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	69d9      	ldr	r1, [r3, #28]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	021a      	lsls	r2, r3, #8
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	61da      	str	r2, [r3, #28]
      break;
 80023b2:	e002      	b.n	80023ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	75fb      	strb	r3, [r7, #23]
      break;
 80023b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80023c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_TIM_ConfigClockSource+0x1c>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e0b4      	b.n	8002552 <HAL_TIM_ConfigClockSource+0x186>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800240e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002420:	d03e      	beq.n	80024a0 <HAL_TIM_ConfigClockSource+0xd4>
 8002422:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002426:	f200 8087 	bhi.w	8002538 <HAL_TIM_ConfigClockSource+0x16c>
 800242a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800242e:	f000 8086 	beq.w	800253e <HAL_TIM_ConfigClockSource+0x172>
 8002432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002436:	d87f      	bhi.n	8002538 <HAL_TIM_ConfigClockSource+0x16c>
 8002438:	2b70      	cmp	r3, #112	@ 0x70
 800243a:	d01a      	beq.n	8002472 <HAL_TIM_ConfigClockSource+0xa6>
 800243c:	2b70      	cmp	r3, #112	@ 0x70
 800243e:	d87b      	bhi.n	8002538 <HAL_TIM_ConfigClockSource+0x16c>
 8002440:	2b60      	cmp	r3, #96	@ 0x60
 8002442:	d050      	beq.n	80024e6 <HAL_TIM_ConfigClockSource+0x11a>
 8002444:	2b60      	cmp	r3, #96	@ 0x60
 8002446:	d877      	bhi.n	8002538 <HAL_TIM_ConfigClockSource+0x16c>
 8002448:	2b50      	cmp	r3, #80	@ 0x50
 800244a:	d03c      	beq.n	80024c6 <HAL_TIM_ConfigClockSource+0xfa>
 800244c:	2b50      	cmp	r3, #80	@ 0x50
 800244e:	d873      	bhi.n	8002538 <HAL_TIM_ConfigClockSource+0x16c>
 8002450:	2b40      	cmp	r3, #64	@ 0x40
 8002452:	d058      	beq.n	8002506 <HAL_TIM_ConfigClockSource+0x13a>
 8002454:	2b40      	cmp	r3, #64	@ 0x40
 8002456:	d86f      	bhi.n	8002538 <HAL_TIM_ConfigClockSource+0x16c>
 8002458:	2b30      	cmp	r3, #48	@ 0x30
 800245a:	d064      	beq.n	8002526 <HAL_TIM_ConfigClockSource+0x15a>
 800245c:	2b30      	cmp	r3, #48	@ 0x30
 800245e:	d86b      	bhi.n	8002538 <HAL_TIM_ConfigClockSource+0x16c>
 8002460:	2b20      	cmp	r3, #32
 8002462:	d060      	beq.n	8002526 <HAL_TIM_ConfigClockSource+0x15a>
 8002464:	2b20      	cmp	r3, #32
 8002466:	d867      	bhi.n	8002538 <HAL_TIM_ConfigClockSource+0x16c>
 8002468:	2b00      	cmp	r3, #0
 800246a:	d05c      	beq.n	8002526 <HAL_TIM_ConfigClockSource+0x15a>
 800246c:	2b10      	cmp	r3, #16
 800246e:	d05a      	beq.n	8002526 <HAL_TIM_ConfigClockSource+0x15a>
 8002470:	e062      	b.n	8002538 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002482:	f000 fb3b 	bl	8002afc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002494:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	609a      	str	r2, [r3, #8]
      break;
 800249e:	e04f      	b.n	8002540 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024b0:	f000 fb24 	bl	8002afc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024c2:	609a      	str	r2, [r3, #8]
      break;
 80024c4:	e03c      	b.n	8002540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024d2:	461a      	mov	r2, r3
 80024d4:	f000 fa98 	bl	8002a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2150      	movs	r1, #80	@ 0x50
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 faf1 	bl	8002ac6 <TIM_ITRx_SetConfig>
      break;
 80024e4:	e02c      	b.n	8002540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024f2:	461a      	mov	r2, r3
 80024f4:	f000 fab7 	bl	8002a66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2160      	movs	r1, #96	@ 0x60
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fae1 	bl	8002ac6 <TIM_ITRx_SetConfig>
      break;
 8002504:	e01c      	b.n	8002540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002512:	461a      	mov	r2, r3
 8002514:	f000 fa78 	bl	8002a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2140      	movs	r1, #64	@ 0x40
 800251e:	4618      	mov	r0, r3
 8002520:	f000 fad1 	bl	8002ac6 <TIM_ITRx_SetConfig>
      break;
 8002524:	e00c      	b.n	8002540 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4619      	mov	r1, r3
 8002530:	4610      	mov	r0, r2
 8002532:	f000 fac8 	bl	8002ac6 <TIM_ITRx_SetConfig>
      break;
 8002536:	e003      	b.n	8002540 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
      break;
 800253c:	e000      	b.n	8002540 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800253e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002550:	7bfb      	ldrb	r3, [r7, #15]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a43      	ldr	r2, [pc, #268]	@ (800267c <TIM_Base_SetConfig+0x120>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d013      	beq.n	800259c <TIM_Base_SetConfig+0x40>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800257a:	d00f      	beq.n	800259c <TIM_Base_SetConfig+0x40>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a40      	ldr	r2, [pc, #256]	@ (8002680 <TIM_Base_SetConfig+0x124>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d00b      	beq.n	800259c <TIM_Base_SetConfig+0x40>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a3f      	ldr	r2, [pc, #252]	@ (8002684 <TIM_Base_SetConfig+0x128>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d007      	beq.n	800259c <TIM_Base_SetConfig+0x40>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a3e      	ldr	r2, [pc, #248]	@ (8002688 <TIM_Base_SetConfig+0x12c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d003      	beq.n	800259c <TIM_Base_SetConfig+0x40>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a3d      	ldr	r2, [pc, #244]	@ (800268c <TIM_Base_SetConfig+0x130>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d108      	bne.n	80025ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a32      	ldr	r2, [pc, #200]	@ (800267c <TIM_Base_SetConfig+0x120>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d02b      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025bc:	d027      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a2f      	ldr	r2, [pc, #188]	@ (8002680 <TIM_Base_SetConfig+0x124>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d023      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a2e      	ldr	r2, [pc, #184]	@ (8002684 <TIM_Base_SetConfig+0x128>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01f      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002688 <TIM_Base_SetConfig+0x12c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d01b      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a2c      	ldr	r2, [pc, #176]	@ (800268c <TIM_Base_SetConfig+0x130>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d017      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002690 <TIM_Base_SetConfig+0x134>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d013      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a2a      	ldr	r2, [pc, #168]	@ (8002694 <TIM_Base_SetConfig+0x138>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00f      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a29      	ldr	r2, [pc, #164]	@ (8002698 <TIM_Base_SetConfig+0x13c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00b      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a28      	ldr	r2, [pc, #160]	@ (800269c <TIM_Base_SetConfig+0x140>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d007      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a27      	ldr	r2, [pc, #156]	@ (80026a0 <TIM_Base_SetConfig+0x144>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d003      	beq.n	800260e <TIM_Base_SetConfig+0xb2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a26      	ldr	r2, [pc, #152]	@ (80026a4 <TIM_Base_SetConfig+0x148>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d108      	bne.n	8002620 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4313      	orrs	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a0e      	ldr	r2, [pc, #56]	@ (800267c <TIM_Base_SetConfig+0x120>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d003      	beq.n	800264e <TIM_Base_SetConfig+0xf2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a10      	ldr	r2, [pc, #64]	@ (800268c <TIM_Base_SetConfig+0x130>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d103      	bne.n	8002656 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	691a      	ldr	r2, [r3, #16]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f043 0204 	orr.w	r2, r3, #4
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	601a      	str	r2, [r3, #0]
}
 800266e:	bf00      	nop
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40010000 	.word	0x40010000
 8002680:	40000400 	.word	0x40000400
 8002684:	40000800 	.word	0x40000800
 8002688:	40000c00 	.word	0x40000c00
 800268c:	40010400 	.word	0x40010400
 8002690:	40014000 	.word	0x40014000
 8002694:	40014400 	.word	0x40014400
 8002698:	40014800 	.word	0x40014800
 800269c:	40001800 	.word	0x40001800
 80026a0:	40001c00 	.word	0x40001c00
 80026a4:	40002000 	.word	0x40002000

080026a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	f023 0201 	bic.w	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f023 0303 	bic.w	r3, r3, #3
 80026de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f023 0302 	bic.w	r3, r3, #2
 80026f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a20      	ldr	r2, [pc, #128]	@ (8002780 <TIM_OC1_SetConfig+0xd8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d003      	beq.n	800270c <TIM_OC1_SetConfig+0x64>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a1f      	ldr	r2, [pc, #124]	@ (8002784 <TIM_OC1_SetConfig+0xdc>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d10c      	bne.n	8002726 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f023 0308 	bic.w	r3, r3, #8
 8002712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	4313      	orrs	r3, r2
 800271c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f023 0304 	bic.w	r3, r3, #4
 8002724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a15      	ldr	r2, [pc, #84]	@ (8002780 <TIM_OC1_SetConfig+0xd8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d003      	beq.n	8002736 <TIM_OC1_SetConfig+0x8e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a14      	ldr	r2, [pc, #80]	@ (8002784 <TIM_OC1_SetConfig+0xdc>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d111      	bne.n	800275a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800273c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	621a      	str	r2, [r3, #32]
}
 8002774:	bf00      	nop
 8002776:	371c      	adds	r7, #28
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	40010000 	.word	0x40010000
 8002784:	40010400 	.word	0x40010400

08002788 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	f023 0210 	bic.w	r2, r3, #16
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	021b      	lsls	r3, r3, #8
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f023 0320 	bic.w	r3, r3, #32
 80027d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a22      	ldr	r2, [pc, #136]	@ (800286c <TIM_OC2_SetConfig+0xe4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d003      	beq.n	80027f0 <TIM_OC2_SetConfig+0x68>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a21      	ldr	r2, [pc, #132]	@ (8002870 <TIM_OC2_SetConfig+0xe8>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d10d      	bne.n	800280c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	4313      	orrs	r3, r2
 8002802:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800280a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a17      	ldr	r2, [pc, #92]	@ (800286c <TIM_OC2_SetConfig+0xe4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d003      	beq.n	800281c <TIM_OC2_SetConfig+0x94>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a16      	ldr	r2, [pc, #88]	@ (8002870 <TIM_OC2_SetConfig+0xe8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d113      	bne.n	8002844 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002822:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800282a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	621a      	str	r2, [r3, #32]
}
 800285e:	bf00      	nop
 8002860:	371c      	adds	r7, #28
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40010000 	.word	0x40010000
 8002870:	40010400 	.word	0x40010400

08002874 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 0303 	bic.w	r3, r3, #3
 80028aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80028bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	021b      	lsls	r3, r3, #8
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a21      	ldr	r2, [pc, #132]	@ (8002954 <TIM_OC3_SetConfig+0xe0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d003      	beq.n	80028da <TIM_OC3_SetConfig+0x66>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a20      	ldr	r2, [pc, #128]	@ (8002958 <TIM_OC3_SetConfig+0xe4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d10d      	bne.n	80028f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80028e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80028f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a16      	ldr	r2, [pc, #88]	@ (8002954 <TIM_OC3_SetConfig+0xe0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d003      	beq.n	8002906 <TIM_OC3_SetConfig+0x92>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a15      	ldr	r2, [pc, #84]	@ (8002958 <TIM_OC3_SetConfig+0xe4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d113      	bne.n	800292e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800290c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	621a      	str	r2, [r3, #32]
}
 8002948:	bf00      	nop
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	40010000 	.word	0x40010000
 8002958:	40010400 	.word	0x40010400

0800295c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800298a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80029a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	031b      	lsls	r3, r3, #12
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a12      	ldr	r2, [pc, #72]	@ (8002a00 <TIM_OC4_SetConfig+0xa4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d003      	beq.n	80029c4 <TIM_OC4_SetConfig+0x68>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a11      	ldr	r2, [pc, #68]	@ (8002a04 <TIM_OC4_SetConfig+0xa8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d109      	bne.n	80029d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	019b      	lsls	r3, r3, #6
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	621a      	str	r2, [r3, #32]
}
 80029f2:	bf00      	nop
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40010000 	.word	0x40010000
 8002a04:	40010400 	.word	0x40010400

08002a08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	f023 0201 	bic.w	r2, r3, #1
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f023 030a 	bic.w	r3, r3, #10
 8002a44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	621a      	str	r2, [r3, #32]
}
 8002a5a:	bf00      	nop
 8002a5c:	371c      	adds	r7, #28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b087      	sub	sp, #28
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	f023 0210 	bic.w	r2, r3, #16
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	031b      	lsls	r3, r3, #12
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002aa2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	621a      	str	r2, [r3, #32]
}
 8002aba:	bf00      	nop
 8002abc:	371c      	adds	r7, #28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b085      	sub	sp, #20
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002adc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f043 0307 	orr.w	r3, r3, #7
 8002ae8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	609a      	str	r2, [r3, #8]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	021a      	lsls	r2, r3, #8
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	609a      	str	r2, [r3, #8]
}
 8002b30:	bf00      	nop
 8002b32:	371c      	adds	r7, #28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e05a      	b.n	8002c0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a21      	ldr	r2, [pc, #132]	@ (8002c18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d022      	beq.n	8002bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba0:	d01d      	beq.n	8002bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d018      	beq.n	8002bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d013      	beq.n	8002bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a1a      	ldr	r2, [pc, #104]	@ (8002c24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d00e      	beq.n	8002bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a18      	ldr	r2, [pc, #96]	@ (8002c28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d009      	beq.n	8002bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a17      	ldr	r2, [pc, #92]	@ (8002c2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d004      	beq.n	8002bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a15      	ldr	r2, [pc, #84]	@ (8002c30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40010000 	.word	0x40010000
 8002c1c:	40000400 	.word	0x40000400
 8002c20:	40000800 	.word	0x40000800
 8002c24:	40000c00 	.word	0x40000c00
 8002c28:	40010400 	.word	0x40010400
 8002c2c:	40014000 	.word	0x40014000
 8002c30:	40001800 	.word	0x40001800

08002c34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e03d      	b.n	8002ccc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <memset>:
 8002cd8:	4402      	add	r2, r0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d100      	bne.n	8002ce2 <memset+0xa>
 8002ce0:	4770      	bx	lr
 8002ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ce6:	e7f9      	b.n	8002cdc <memset+0x4>

08002ce8 <__libc_init_array>:
 8002ce8:	b570      	push	{r4, r5, r6, lr}
 8002cea:	4d0d      	ldr	r5, [pc, #52]	@ (8002d20 <__libc_init_array+0x38>)
 8002cec:	4c0d      	ldr	r4, [pc, #52]	@ (8002d24 <__libc_init_array+0x3c>)
 8002cee:	1b64      	subs	r4, r4, r5
 8002cf0:	10a4      	asrs	r4, r4, #2
 8002cf2:	2600      	movs	r6, #0
 8002cf4:	42a6      	cmp	r6, r4
 8002cf6:	d109      	bne.n	8002d0c <__libc_init_array+0x24>
 8002cf8:	4d0b      	ldr	r5, [pc, #44]	@ (8002d28 <__libc_init_array+0x40>)
 8002cfa:	4c0c      	ldr	r4, [pc, #48]	@ (8002d2c <__libc_init_array+0x44>)
 8002cfc:	f000 f818 	bl	8002d30 <_init>
 8002d00:	1b64      	subs	r4, r4, r5
 8002d02:	10a4      	asrs	r4, r4, #2
 8002d04:	2600      	movs	r6, #0
 8002d06:	42a6      	cmp	r6, r4
 8002d08:	d105      	bne.n	8002d16 <__libc_init_array+0x2e>
 8002d0a:	bd70      	pop	{r4, r5, r6, pc}
 8002d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d10:	4798      	blx	r3
 8002d12:	3601      	adds	r6, #1
 8002d14:	e7ee      	b.n	8002cf4 <__libc_init_array+0xc>
 8002d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d1a:	4798      	blx	r3
 8002d1c:	3601      	adds	r6, #1
 8002d1e:	e7f2      	b.n	8002d06 <__libc_init_array+0x1e>
 8002d20:	08002d60 	.word	0x08002d60
 8002d24:	08002d60 	.word	0x08002d60
 8002d28:	08002d60 	.word	0x08002d60
 8002d2c:	08002d64 	.word	0x08002d64

08002d30 <_init>:
 8002d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d32:	bf00      	nop
 8002d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d36:	bc08      	pop	{r3}
 8002d38:	469e      	mov	lr, r3
 8002d3a:	4770      	bx	lr

08002d3c <_fini>:
 8002d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3e:	bf00      	nop
 8002d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d42:	bc08      	pop	{r3}
 8002d44:	469e      	mov	lr, r3
 8002d46:	4770      	bx	lr
