
saykal_buck_converter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004538  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080046c0  080046c0  000056c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004868  08004868  00006064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004868  08004868  00005868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004870  08004870  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004870  08004870  00005870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004874  08004874  00005874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08004878  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006064  2**0
                  CONTENTS
 10 .bss          0000013c  20000064  20000064  00006064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001a0  200001a0  00006064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f175  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f51  00000000  00000000  00015209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec0  00000000  00000000  00018160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab6  00000000  00000000  00019020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002379e  00000000  00000000  00019ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000162e5  00000000  00000000  0003d274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d65bb  00000000  00000000  00053559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00129b14  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003888  00000000  00000000  00129b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  0012d3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000064 	.word	0x20000064
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080046a8 	.word	0x080046a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000068 	.word	0x20000068
 80001c4:	080046a8 	.word	0x080046a8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  run_state_machine_of_system_manager();
 80004f8:	f003 ff48 	bl	800438c <run_state_machine_of_system_manager>
 80004fc:	e7fc      	b.n	80004f8 <main+0x4>
	...

08000500 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
 800050a:	4b10      	ldr	r3, [pc, #64]	@ (800054c <HAL_MspInit+0x4c>)
 800050c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800050e:	4a0f      	ldr	r2, [pc, #60]	@ (800054c <HAL_MspInit+0x4c>)
 8000510:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000514:	6453      	str	r3, [r2, #68]	@ 0x44
 8000516:	4b0d      	ldr	r3, [pc, #52]	@ (800054c <HAL_MspInit+0x4c>)
 8000518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800051a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	603b      	str	r3, [r7, #0]
 8000526:	4b09      	ldr	r3, [pc, #36]	@ (800054c <HAL_MspInit+0x4c>)
 8000528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800052a:	4a08      	ldr	r2, [pc, #32]	@ (800054c <HAL_MspInit+0x4c>)
 800052c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000530:	6413      	str	r3, [r2, #64]	@ 0x40
 8000532:	4b06      	ldr	r3, [pc, #24]	@ (800054c <HAL_MspInit+0x4c>)
 8000534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40023800 	.word	0x40023800

08000550 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08a      	sub	sp, #40	@ 0x28
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	f107 0314 	add.w	r3, r7, #20
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a17      	ldr	r2, [pc, #92]	@ (80005cc <HAL_ADC_MspInit+0x7c>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d127      	bne.n	80005c2 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	613b      	str	r3, [r7, #16]
 8000576:	4b16      	ldr	r3, [pc, #88]	@ (80005d0 <HAL_ADC_MspInit+0x80>)
 8000578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800057a:	4a15      	ldr	r2, [pc, #84]	@ (80005d0 <HAL_ADC_MspInit+0x80>)
 800057c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000580:	6453      	str	r3, [r2, #68]	@ 0x44
 8000582:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <HAL_ADC_MspInit+0x80>)
 8000584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	4b0f      	ldr	r3, [pc, #60]	@ (80005d0 <HAL_ADC_MspInit+0x80>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	4a0e      	ldr	r2, [pc, #56]	@ (80005d0 <HAL_ADC_MspInit+0x80>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	6313      	str	r3, [r2, #48]	@ 0x30
 800059e:	4b0c      	ldr	r3, [pc, #48]	@ (80005d0 <HAL_ADC_MspInit+0x80>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80005aa:	2306      	movs	r3, #6
 80005ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ae:	2303      	movs	r3, #3
 80005b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	4805      	ldr	r0, [pc, #20]	@ (80005d4 <HAL_ADC_MspInit+0x84>)
 80005be:	f001 f80b 	bl	80015d8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80005c2:	bf00      	nop
 80005c4:	3728      	adds	r7, #40	@ 0x28
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40012000 	.word	0x40012000
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40020000 	.word	0x40020000

080005d8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000614 <HAL_TIM_Base_MspInit+0x3c>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d10d      	bne.n	8000606 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <HAL_TIM_Base_MspInit+0x40>)
 80005f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005f2:	4a09      	ldr	r2, [pc, #36]	@ (8000618 <HAL_TIM_Base_MspInit+0x40>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80005fa:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <HAL_TIM_Base_MspInit+0x40>)
 80005fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40010000 	.word	0x40010000
 8000618:	40023800 	.word	0x40023800

0800061c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <NMI_Handler+0x4>

08000624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <HardFault_Handler+0x4>

0800062c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <MemManage_Handler+0x4>

08000634 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <BusFault_Handler+0x4>

0800063c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <UsageFault_Handler+0x4>

08000644 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000672:	f000 f891 	bl	8000798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <SystemInit+0x20>)
 8000682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000686:	4a05      	ldr	r2, [pc, #20]	@ (800069c <SystemInit+0x20>)
 8000688:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800068c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80006a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80006a4:	f7ff ffea 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006a8:	480c      	ldr	r0, [pc, #48]	@ (80006dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006aa:	490d      	ldr	r1, [pc, #52]	@ (80006e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006ac:	4a0d      	ldr	r2, [pc, #52]	@ (80006e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a0a      	ldr	r2, [pc, #40]	@ (80006e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006c0:	4c0a      	ldr	r4, [pc, #40]	@ (80006ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ce:	f003 ffc7 	bl	8004660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006d2:	f7ff ff0f 	bl	80004f4 <main>
  bx  lr    
 80006d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80006d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006e4:	08004878 	.word	0x08004878
  ldr r2, =_sbss
 80006e8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006ec:	200001a0 	.word	0x200001a0

080006f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC_IRQHandler>
	...

080006f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <HAL_Init+0x40>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000734 <HAL_Init+0x40>)
 80006fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000702:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000704:	4b0b      	ldr	r3, [pc, #44]	@ (8000734 <HAL_Init+0x40>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a0a      	ldr	r2, [pc, #40]	@ (8000734 <HAL_Init+0x40>)
 800070a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800070e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000710:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <HAL_Init+0x40>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a07      	ldr	r2, [pc, #28]	@ (8000734 <HAL_Init+0x40>)
 8000716:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800071a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800071c:	2003      	movs	r0, #3
 800071e:	f000 ff27 	bl	8001570 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000722:	200f      	movs	r0, #15
 8000724:	f000 f808 	bl	8000738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000728:	f7ff feea 	bl	8000500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800072c:	2300      	movs	r3, #0
}
 800072e:	4618      	mov	r0, r3
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023c00 	.word	0x40023c00

08000738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <HAL_InitTick+0x54>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <HAL_InitTick+0x58>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4619      	mov	r1, r3
 800074a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800074e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000752:	fbb2 f3f3 	udiv	r3, r2, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f000 ff31 	bl	80015be <HAL_SYSTICK_Config>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
 8000764:	e00e      	b.n	8000784 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2b0f      	cmp	r3, #15
 800076a:	d80a      	bhi.n	8000782 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800076c:	2200      	movs	r2, #0
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000774:	f000 ff07 	bl	8001586 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000778:	4a06      	ldr	r2, [pc, #24]	@ (8000794 <HAL_InitTick+0x5c>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800077e:	2300      	movs	r3, #0
 8000780:	e000      	b.n	8000784 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000000 	.word	0x20000000
 8000790:	20000008 	.word	0x20000008
 8000794:	20000004 	.word	0x20000004

08000798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <HAL_IncTick+0x20>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <HAL_IncTick+0x24>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4413      	add	r3, r2
 80007a8:	4a04      	ldr	r2, [pc, #16]	@ (80007bc <HAL_IncTick+0x24>)
 80007aa:	6013      	str	r3, [r2, #0]
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	20000008 	.word	0x20000008
 80007bc:	20000080 	.word	0x20000080

080007c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  return uwTick;
 80007c4:	4b03      	ldr	r3, [pc, #12]	@ (80007d4 <HAL_GetTick+0x14>)
 80007c6:	681b      	ldr	r3, [r3, #0]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	20000080 	.word	0x20000080

080007d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007e0:	2300      	movs	r3, #0
 80007e2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
 80007ec:	e033      	b.n	8000856 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d109      	bne.n	800080a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff feaa 	bl	8000550 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2200      	movs	r2, #0
 8000800:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2200      	movs	r2, #0
 8000806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080e:	f003 0310 	and.w	r3, r3, #16
 8000812:	2b00      	cmp	r3, #0
 8000814:	d118      	bne.n	8000848 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800081e:	f023 0302 	bic.w	r3, r3, #2
 8000822:	f043 0202 	orr.w	r2, r3, #2
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f000 fad8 	bl	8000de0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2200      	movs	r2, #0
 8000834:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083a:	f023 0303 	bic.w	r3, r3, #3
 800083e:	f043 0201 	orr.w	r2, r3, #1
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	641a      	str	r2, [r3, #64]	@ 0x40
 8000846:	e001      	b.n	800084c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000848:	2301      	movs	r3, #1
 800084a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2200      	movs	r2, #0
 8000850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000854:	7bfb      	ldrb	r3, [r7, #15]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000872:	2b01      	cmp	r3, #1
 8000874:	d101      	bne.n	800087a <HAL_ADC_Start+0x1a>
 8000876:	2302      	movs	r3, #2
 8000878:	e0b2      	b.n	80009e0 <HAL_ADC_Start+0x180>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2201      	movs	r2, #1
 800087e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	f003 0301 	and.w	r3, r3, #1
 800088c:	2b01      	cmp	r3, #1
 800088e:	d018      	beq.n	80008c2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	689a      	ldr	r2, [r3, #8]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f042 0201 	orr.w	r2, r2, #1
 800089e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80008a0:	4b52      	ldr	r3, [pc, #328]	@ (80009ec <HAL_ADC_Start+0x18c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a52      	ldr	r2, [pc, #328]	@ (80009f0 <HAL_ADC_Start+0x190>)
 80008a6:	fba2 2303 	umull	r2, r3, r2, r3
 80008aa:	0c9a      	lsrs	r2, r3, #18
 80008ac:	4613      	mov	r3, r2
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	4413      	add	r3, r2
 80008b2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80008b4:	e002      	b.n	80008bc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	3b01      	subs	r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1f9      	bne.n	80008b6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d17a      	bne.n	80009c6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80008d8:	f023 0301 	bic.w	r3, r3, #1
 80008dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d007      	beq.n	8000902 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80008fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000906:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800090a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800090e:	d106      	bne.n	800091e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000914:	f023 0206 	bic.w	r2, r3, #6
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	645a      	str	r2, [r3, #68]	@ 0x44
 800091c:	e002      	b.n	8000924 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2200      	movs	r2, #0
 8000928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800092c:	4b31      	ldr	r3, [pc, #196]	@ (80009f4 <HAL_ADC_Start+0x194>)
 800092e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000938:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f003 031f 	and.w	r3, r3, #31
 8000942:	2b00      	cmp	r3, #0
 8000944:	d12a      	bne.n	800099c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a2b      	ldr	r2, [pc, #172]	@ (80009f8 <HAL_ADC_Start+0x198>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d015      	beq.n	800097c <HAL_ADC_Start+0x11c>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a29      	ldr	r2, [pc, #164]	@ (80009fc <HAL_ADC_Start+0x19c>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d105      	bne.n	8000966 <HAL_ADC_Start+0x106>
 800095a:	4b26      	ldr	r3, [pc, #152]	@ (80009f4 <HAL_ADC_Start+0x194>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	f003 031f 	and.w	r3, r3, #31
 8000962:	2b00      	cmp	r3, #0
 8000964:	d00a      	beq.n	800097c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a25      	ldr	r2, [pc, #148]	@ (8000a00 <HAL_ADC_Start+0x1a0>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d136      	bne.n	80009de <HAL_ADC_Start+0x17e>
 8000970:	4b20      	ldr	r3, [pc, #128]	@ (80009f4 <HAL_ADC_Start+0x194>)
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f003 0310 	and.w	r3, r3, #16
 8000978:	2b00      	cmp	r3, #0
 800097a:	d130      	bne.n	80009de <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000986:	2b00      	cmp	r3, #0
 8000988:	d129      	bne.n	80009de <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	689a      	ldr	r2, [r3, #8]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	e020      	b.n	80009de <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a15      	ldr	r2, [pc, #84]	@ (80009f8 <HAL_ADC_Start+0x198>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d11b      	bne.n	80009de <HAL_ADC_Start+0x17e>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d114      	bne.n	80009de <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	689a      	ldr	r2, [r3, #8]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	e00b      	b.n	80009de <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ca:	f043 0210 	orr.w	r2, r3, #16
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d6:	f043 0201 	orr.w	r2, r3, #1
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80009de:	2300      	movs	r3, #0
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	20000000 	.word	0x20000000
 80009f0:	431bde83 	.word	0x431bde83
 80009f4:	40012300 	.word	0x40012300
 80009f8:	40012000 	.word	0x40012000
 80009fc:	40012100 	.word	0x40012100
 8000a00:	40012200 	.word	0x40012200

08000a04 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d101      	bne.n	8000a1a <HAL_ADC_Stop+0x16>
 8000a16:	2302      	movs	r3, #2
 8000a18:	e021      	b.n	8000a5e <HAL_ADC_Stop+0x5a>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	689a      	ldr	r2, [r3, #8]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f022 0201 	bic.w	r2, r2, #1
 8000a30:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d109      	bne.n	8000a54 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a44:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000a48:	f023 0301 	bic.w	r3, r3, #1
 8000a4c:	f043 0201 	orr.w	r2, r3, #1
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2200      	movs	r2, #0
 8000a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b084      	sub	sp, #16
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
 8000a72:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a86:	d113      	bne.n	8000ab0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000a92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a96:	d10b      	bne.n	8000ab0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	f043 0220 	orr.w	r2, r3, #32
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	e063      	b.n	8000b78 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ab0:	f7ff fe86 	bl	80007c0 <HAL_GetTick>
 8000ab4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000ab6:	e021      	b.n	8000afc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000abe:	d01d      	beq.n	8000afc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d007      	beq.n	8000ad6 <HAL_ADC_PollForConversion+0x6c>
 8000ac6:	f7ff fe7b 	bl	80007c0 <HAL_GetTick>
 8000aca:	4602      	mov	r2, r0
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	683a      	ldr	r2, [r7, #0]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d212      	bcs.n	8000afc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f003 0302 	and.w	r3, r3, #2
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d00b      	beq.n	8000afc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae8:	f043 0204 	orr.w	r2, r3, #4
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2200      	movs	r2, #0
 8000af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8000af8:	2303      	movs	r3, #3
 8000afa:	e03d      	b.n	8000b78 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d1d6      	bne.n	8000ab8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f06f 0212 	mvn.w	r2, #18
 8000b12:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b18:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d123      	bne.n	8000b76 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d11f      	bne.n	8000b76 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b3c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d006      	beq.n	8000b52 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d111      	bne.n	8000b76 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b56:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d105      	bne.n	8000b76 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	f043 0201 	orr.w	r2, r3, #1
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d101      	bne.n	8000bb8 <HAL_ADC_ConfigChannel+0x1c>
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	e105      	b.n	8000dc4 <HAL_ADC_ConfigChannel+0x228>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b09      	cmp	r3, #9
 8000bc6:	d925      	bls.n	8000c14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	68d9      	ldr	r1, [r3, #12]
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	4413      	add	r3, r2
 8000bdc:	3b1e      	subs	r3, #30
 8000bde:	2207      	movs	r2, #7
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	43da      	mvns	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	400a      	ands	r2, r1
 8000bec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	68d9      	ldr	r1, [r3, #12]
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	689a      	ldr	r2, [r3, #8]
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	4603      	mov	r3, r0
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	4403      	add	r3, r0
 8000c06:	3b1e      	subs	r3, #30
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	e022      	b.n	8000c5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	6919      	ldr	r1, [r3, #16]
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	461a      	mov	r2, r3
 8000c22:	4613      	mov	r3, r2
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	4413      	add	r3, r2
 8000c28:	2207      	movs	r2, #7
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	400a      	ands	r2, r1
 8000c36:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6919      	ldr	r1, [r3, #16]
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	4618      	mov	r0, r3
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	4403      	add	r3, r0
 8000c50:	409a      	lsls	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	430a      	orrs	r2, r1
 8000c58:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d824      	bhi.n	8000cac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685a      	ldr	r2, [r3, #4]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	4413      	add	r3, r2
 8000c72:	3b05      	subs	r3, #5
 8000c74:	221f      	movs	r2, #31
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	400a      	ands	r2, r1
 8000c82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	4618      	mov	r0, r3
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685a      	ldr	r2, [r3, #4]
 8000c96:	4613      	mov	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	3b05      	subs	r3, #5
 8000c9e:	fa00 f203 	lsl.w	r2, r0, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000caa:	e04c      	b.n	8000d46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2b0c      	cmp	r3, #12
 8000cb2:	d824      	bhi.n	8000cfe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	3b23      	subs	r3, #35	@ 0x23
 8000cc6:	221f      	movs	r2, #31
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43da      	mvns	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	400a      	ands	r2, r1
 8000cd4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	3b23      	subs	r3, #35	@ 0x23
 8000cf0:	fa00 f203 	lsl.w	r2, r0, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8000cfc:	e023      	b.n	8000d46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	3b41      	subs	r3, #65	@ 0x41
 8000d10:	221f      	movs	r2, #31
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43da      	mvns	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	400a      	ands	r2, r1
 8000d1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	4613      	mov	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	3b41      	subs	r3, #65	@ 0x41
 8000d3a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	430a      	orrs	r2, r1
 8000d44:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d46:	4b22      	ldr	r3, [pc, #136]	@ (8000dd0 <HAL_ADC_ConfigChannel+0x234>)
 8000d48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a21      	ldr	r2, [pc, #132]	@ (8000dd4 <HAL_ADC_ConfigChannel+0x238>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d109      	bne.n	8000d68 <HAL_ADC_ConfigChannel+0x1cc>
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b12      	cmp	r3, #18
 8000d5a:	d105      	bne.n	8000d68 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a19      	ldr	r2, [pc, #100]	@ (8000dd4 <HAL_ADC_ConfigChannel+0x238>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d123      	bne.n	8000dba <HAL_ADC_ConfigChannel+0x21e>
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b10      	cmp	r3, #16
 8000d78:	d003      	beq.n	8000d82 <HAL_ADC_ConfigChannel+0x1e6>
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b11      	cmp	r3, #17
 8000d80:	d11b      	bne.n	8000dba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b10      	cmp	r3, #16
 8000d94:	d111      	bne.n	8000dba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d96:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <HAL_ADC_ConfigChannel+0x23c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a10      	ldr	r2, [pc, #64]	@ (8000ddc <HAL_ADC_ConfigChannel+0x240>)
 8000d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000da0:	0c9a      	lsrs	r2, r3, #18
 8000da2:	4613      	mov	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	4413      	add	r3, r2
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000dac:	e002      	b.n	8000db4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1f9      	bne.n	8000dae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	40012300 	.word	0x40012300
 8000dd4:	40012000 	.word	0x40012000
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	431bde83 	.word	0x431bde83

08000de0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000de8:	4b79      	ldr	r3, [pc, #484]	@ (8000fd0 <ADC_Init+0x1f0>)
 8000dea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	431a      	orrs	r2, r3
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6859      	ldr	r1, [r3, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	021a      	lsls	r2, r3, #8
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	430a      	orrs	r2, r1
 8000e28:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8000e38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	6859      	ldr	r1, [r3, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000e5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	6899      	ldr	r1, [r3, #8]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68da      	ldr	r2, [r3, #12]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e72:	4a58      	ldr	r2, [pc, #352]	@ (8000fd4 <ADC_Init+0x1f4>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d022      	beq.n	8000ebe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000e86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6899      	ldr	r1, [r3, #8]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	430a      	orrs	r2, r1
 8000e98:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000ea8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	6899      	ldr	r1, [r3, #8]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	e00f      	b.n	8000ede <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000ecc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000edc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 0202 	bic.w	r2, r2, #2
 8000eec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	6899      	ldr	r1, [r3, #8]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	7e1b      	ldrb	r3, [r3, #24]
 8000ef8:	005a      	lsls	r2, r3, #1
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	430a      	orrs	r2, r1
 8000f00:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d01b      	beq.n	8000f44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000f1a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8000f2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6859      	ldr	r1, [r3, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f36:	3b01      	subs	r3, #1
 8000f38:	035a      	lsls	r2, r3, #13
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	e007      	b.n	8000f54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000f52:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8000f62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	051a      	lsls	r2, r3, #20
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	430a      	orrs	r2, r1
 8000f78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000f88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6899      	ldr	r1, [r3, #8]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000f96:	025a      	lsls	r2, r3, #9
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000fae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6899      	ldr	r1, [r3, #8]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	029a      	lsls	r2, r3, #10
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	609a      	str	r2, [r3, #8]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	40012300 	.word	0x40012300
 8000fd4:	0f000001 	.word	0x0f000001

08000fd8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e0ed      	b.n	80011c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d102      	bne.n	8000ffc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 f8e9 	bl	80011ce <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f042 0201 	orr.w	r2, r2, #1
 800100a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800100c:	f7ff fbd8 	bl	80007c0 <HAL_GetTick>
 8001010:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001012:	e012      	b.n	800103a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001014:	f7ff fbd4 	bl	80007c0 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b0a      	cmp	r3, #10
 8001020:	d90b      	bls.n	800103a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001026:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2205      	movs	r2, #5
 8001032:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e0c5      	b.n	80011c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0e5      	beq.n	8001014 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0202 	bic.w	r2, r2, #2
 8001056:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001058:	f7ff fbb2 	bl	80007c0 <HAL_GetTick>
 800105c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800105e:	e012      	b.n	8001086 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001060:	f7ff fbae 	bl	80007c0 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b0a      	cmp	r3, #10
 800106c:	d90b      	bls.n	8001086 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001072:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2205      	movs	r2, #5
 800107e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e09f      	b.n	80011c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1e5      	bne.n	8001060 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	7e1b      	ldrb	r3, [r3, #24]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d108      	bne.n	80010ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	e007      	b.n	80010be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7e5b      	ldrb	r3, [r3, #25]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d108      	bne.n	80010d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	e007      	b.n	80010e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80010e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7e9b      	ldrb	r3, [r3, #26]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d108      	bne.n	8001102 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 0220 	orr.w	r2, r2, #32
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	e007      	b.n	8001112 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 0220 	bic.w	r2, r2, #32
 8001110:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7edb      	ldrb	r3, [r3, #27]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d108      	bne.n	800112c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 0210 	bic.w	r2, r2, #16
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	e007      	b.n	800113c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0210 	orr.w	r2, r2, #16
 800113a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	7f1b      	ldrb	r3, [r3, #28]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d108      	bne.n	8001156 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0208 	orr.w	r2, r2, #8
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e007      	b.n	8001166 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f022 0208 	bic.w	r2, r2, #8
 8001164:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7f5b      	ldrb	r3, [r3, #29]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d108      	bne.n	8001180 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f042 0204 	orr.w	r2, r2, #4
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	e007      	b.n	8001190 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0204 	bic.w	r2, r2, #4
 800118e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	431a      	orrs	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	431a      	orrs	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	ea42 0103 	orr.w	r1, r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	1e5a      	subs	r2, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_CAN_MspInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_MspInit could be implemented in the user file
   */
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b084      	sub	sp, #16
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d12e      	bne.n	8001254 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2202      	movs	r2, #2
 80011fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 0201 	bic.w	r2, r2, #1
 800120c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800120e:	f7ff fad7 	bl	80007c0 <HAL_GetTick>
 8001212:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001214:	e012      	b.n	800123c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001216:	f7ff fad3 	bl	80007c0 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b0a      	cmp	r3, #10
 8001222:	d90b      	bls.n	800123c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001228:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2205      	movs	r2, #5
 8001234:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e012      	b.n	8001262 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1e5      	bne.n	8001216 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001250:	2300      	movs	r3, #0
 8001252:	e006      	b.n	8001262 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001258:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
  }
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800126a:	b480      	push	{r7}
 800126c:	b089      	sub	sp, #36	@ 0x24
 800126e:	af00      	add	r7, sp, #0
 8001270:	60f8      	str	r0, [r7, #12]
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800127e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001288:	7ffb      	ldrb	r3, [r7, #31]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d003      	beq.n	8001296 <HAL_CAN_AddTxMessage+0x2c>
 800128e:	7ffb      	ldrb	r3, [r7, #31]
 8001290:	2b02      	cmp	r3, #2
 8001292:	f040 80ad 	bne.w	80013f0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10a      	bne.n	80012b6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d105      	bne.n	80012b6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 8095 	beq.w	80013e0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	0e1b      	lsrs	r3, r3, #24
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012c0:	2201      	movs	r2, #1
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	409a      	lsls	r2, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10d      	bne.n	80012ee <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012dc:	68f9      	ldr	r1, [r7, #12]
 80012de:	6809      	ldr	r1, [r1, #0]
 80012e0:	431a      	orrs	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3318      	adds	r3, #24
 80012e6:	011b      	lsls	r3, r3, #4
 80012e8:	440b      	add	r3, r1
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	e00f      	b.n	800130e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012f8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012fe:	68f9      	ldr	r1, [r7, #12]
 8001300:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001302:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	3318      	adds	r3, #24
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	440b      	add	r3, r1
 800130c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6819      	ldr	r1, [r3, #0]
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	691a      	ldr	r2, [r3, #16]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3318      	adds	r3, #24
 800131a:	011b      	lsls	r3, r3, #4
 800131c:	440b      	add	r3, r1
 800131e:	3304      	adds	r3, #4
 8001320:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	7d1b      	ldrb	r3, [r3, #20]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d111      	bne.n	800134e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3318      	adds	r3, #24
 8001332:	011b      	lsls	r3, r3, #4
 8001334:	4413      	add	r3, r2
 8001336:	3304      	adds	r3, #4
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	6811      	ldr	r1, [r2, #0]
 800133e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	3318      	adds	r3, #24
 8001346:	011b      	lsls	r3, r3, #4
 8001348:	440b      	add	r3, r1
 800134a:	3304      	adds	r3, #4
 800134c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3307      	adds	r3, #7
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	061a      	lsls	r2, r3, #24
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3306      	adds	r3, #6
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	041b      	lsls	r3, r3, #16
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3305      	adds	r3, #5
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	4313      	orrs	r3, r2
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	3204      	adds	r2, #4
 800136e:	7812      	ldrb	r2, [r2, #0]
 8001370:	4610      	mov	r0, r2
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	6811      	ldr	r1, [r2, #0]
 8001376:	ea43 0200 	orr.w	r2, r3, r0
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	011b      	lsls	r3, r3, #4
 800137e:	440b      	add	r3, r1
 8001380:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001384:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3303      	adds	r3, #3
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	061a      	lsls	r2, r3, #24
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3302      	adds	r3, #2
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	041b      	lsls	r3, r3, #16
 8001396:	431a      	orrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3301      	adds	r3, #1
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	4313      	orrs	r3, r2
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	7812      	ldrb	r2, [r2, #0]
 80013a6:	4610      	mov	r0, r2
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	6811      	ldr	r1, [r2, #0]
 80013ac:	ea43 0200 	orr.w	r2, r3, r0
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	440b      	add	r3, r1
 80013b6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80013ba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	3318      	adds	r3, #24
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	4413      	add	r3, r2
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	6811      	ldr	r1, [r2, #0]
 80013ce:	f043 0201 	orr.w	r2, r3, #1
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3318      	adds	r3, #24
 80013d6:	011b      	lsls	r3, r3, #4
 80013d8:	440b      	add	r3, r1
 80013da:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80013dc:	2300      	movs	r3, #0
 80013de:	e00e      	b.n	80013fe <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e006      	b.n	80013fe <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
  }
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3724      	adds	r7, #36	@ 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001434:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800143c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143e:	4a04      	ldr	r2, [pc, #16]	@ (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	60d3      	str	r3, [r2, #12]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001458:	4b04      	ldr	r3, [pc, #16]	@ (800146c <__NVIC_GetPriorityGrouping+0x18>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	f003 0307 	and.w	r3, r3, #7
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	db0a      	blt.n	800149a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	490c      	ldr	r1, [pc, #48]	@ (80014bc <__NVIC_SetPriority+0x4c>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	440b      	add	r3, r1
 8001494:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001498:	e00a      	b.n	80014b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4908      	ldr	r1, [pc, #32]	@ (80014c0 <__NVIC_SetPriority+0x50>)
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	3b04      	subs	r3, #4
 80014a8:	0112      	lsls	r2, r2, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	761a      	strb	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	@ 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2b04      	cmp	r3, #4
 80014e0:	bf28      	it	cs
 80014e2:	2304      	movcs	r3, #4
 80014e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d902      	bls.n	80014f4 <NVIC_EncodePriority+0x30>
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3b03      	subs	r3, #3
 80014f2:	e000      	b.n	80014f6 <NVIC_EncodePriority+0x32>
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800150c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43d9      	mvns	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	4313      	orrs	r3, r2
         );
}
 800151e:	4618      	mov	r0, r3
 8001520:	3724      	adds	r7, #36	@ 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800153c:	d301      	bcc.n	8001542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153e:	2301      	movs	r3, #1
 8001540:	e00f      	b.n	8001562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001542:	4a0a      	ldr	r2, [pc, #40]	@ (800156c <SysTick_Config+0x40>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154a:	210f      	movs	r1, #15
 800154c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001550:	f7ff ff8e 	bl	8001470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <SysTick_Config+0x40>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155a:	4b04      	ldr	r3, [pc, #16]	@ (800156c <SysTick_Config+0x40>)
 800155c:	2207      	movs	r2, #7
 800155e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	e000e010 	.word	0xe000e010

08001570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff47 	bl	800140c <__NVIC_SetPriorityGrouping>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001598:	f7ff ff5c 	bl	8001454 <__NVIC_GetPriorityGrouping>
 800159c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	6978      	ldr	r0, [r7, #20]
 80015a4:	f7ff ff8e 	bl	80014c4 <NVIC_EncodePriority>
 80015a8:	4602      	mov	r2, r0
 80015aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff5d 	bl	8001470 <__NVIC_SetPriority>
}
 80015b6:	bf00      	nop
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ffb0 	bl	800152c <SysTick_Config>
 80015cc:	4603      	mov	r3, r0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	@ 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	e16b      	b.n	80018cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015f4:	2201      	movs	r2, #1
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	429a      	cmp	r2, r3
 800160e:	f040 815a 	bne.w	80018c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	2b01      	cmp	r3, #1
 800161c:	d005      	beq.n	800162a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001626:	2b02      	cmp	r3, #2
 8001628:	d130      	bne.n	800168c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	2203      	movs	r2, #3
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	68da      	ldr	r2, [r3, #12]
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001660:	2201      	movs	r2, #1
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	091b      	lsrs	r3, r3, #4
 8001676:	f003 0201 	and.w	r2, r3, #1
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	2b03      	cmp	r3, #3
 8001696:	d017      	beq.n	80016c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	2203      	movs	r2, #3
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d123      	bne.n	800171c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	08da      	lsrs	r2, r3, #3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3208      	adds	r2, #8
 80016dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	220f      	movs	r2, #15
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	08da      	lsrs	r2, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3208      	adds	r2, #8
 8001716:	69b9      	ldr	r1, [r7, #24]
 8001718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0203 	and.w	r2, r3, #3
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 80b4 	beq.w	80018c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b60      	ldr	r3, [pc, #384]	@ (80018e4 <HAL_GPIO_Init+0x30c>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001766:	4a5f      	ldr	r2, [pc, #380]	@ (80018e4 <HAL_GPIO_Init+0x30c>)
 8001768:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800176c:	6453      	str	r3, [r2, #68]	@ 0x44
 800176e:	4b5d      	ldr	r3, [pc, #372]	@ (80018e4 <HAL_GPIO_Init+0x30c>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800177a:	4a5b      	ldr	r2, [pc, #364]	@ (80018e8 <HAL_GPIO_Init+0x310>)
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	089b      	lsrs	r3, r3, #2
 8001780:	3302      	adds	r3, #2
 8001782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	220f      	movs	r2, #15
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a52      	ldr	r2, [pc, #328]	@ (80018ec <HAL_GPIO_Init+0x314>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d02b      	beq.n	80017fe <HAL_GPIO_Init+0x226>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a51      	ldr	r2, [pc, #324]	@ (80018f0 <HAL_GPIO_Init+0x318>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d025      	beq.n	80017fa <HAL_GPIO_Init+0x222>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a50      	ldr	r2, [pc, #320]	@ (80018f4 <HAL_GPIO_Init+0x31c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d01f      	beq.n	80017f6 <HAL_GPIO_Init+0x21e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4f      	ldr	r2, [pc, #316]	@ (80018f8 <HAL_GPIO_Init+0x320>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d019      	beq.n	80017f2 <HAL_GPIO_Init+0x21a>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4e      	ldr	r2, [pc, #312]	@ (80018fc <HAL_GPIO_Init+0x324>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d013      	beq.n	80017ee <HAL_GPIO_Init+0x216>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4d      	ldr	r2, [pc, #308]	@ (8001900 <HAL_GPIO_Init+0x328>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d00d      	beq.n	80017ea <HAL_GPIO_Init+0x212>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001904 <HAL_GPIO_Init+0x32c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d007      	beq.n	80017e6 <HAL_GPIO_Init+0x20e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001908 <HAL_GPIO_Init+0x330>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d101      	bne.n	80017e2 <HAL_GPIO_Init+0x20a>
 80017de:	2307      	movs	r3, #7
 80017e0:	e00e      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017e2:	2308      	movs	r3, #8
 80017e4:	e00c      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017e6:	2306      	movs	r3, #6
 80017e8:	e00a      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017ea:	2305      	movs	r3, #5
 80017ec:	e008      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017ee:	2304      	movs	r3, #4
 80017f0:	e006      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017f2:	2303      	movs	r3, #3
 80017f4:	e004      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e002      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017fe:	2300      	movs	r3, #0
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	f002 0203 	and.w	r2, r2, #3
 8001806:	0092      	lsls	r2, r2, #2
 8001808:	4093      	lsls	r3, r2
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001810:	4935      	ldr	r1, [pc, #212]	@ (80018e8 <HAL_GPIO_Init+0x310>)
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	3302      	adds	r3, #2
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800181e:	4b3b      	ldr	r3, [pc, #236]	@ (800190c <HAL_GPIO_Init+0x334>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001842:	4a32      	ldr	r2, [pc, #200]	@ (800190c <HAL_GPIO_Init+0x334>)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001848:	4b30      	ldr	r3, [pc, #192]	@ (800190c <HAL_GPIO_Init+0x334>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800186c:	4a27      	ldr	r2, [pc, #156]	@ (800190c <HAL_GPIO_Init+0x334>)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001872:	4b26      	ldr	r3, [pc, #152]	@ (800190c <HAL_GPIO_Init+0x334>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001896:	4a1d      	ldr	r2, [pc, #116]	@ (800190c <HAL_GPIO_Init+0x334>)
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800189c:	4b1b      	ldr	r3, [pc, #108]	@ (800190c <HAL_GPIO_Init+0x334>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018c0:	4a12      	ldr	r2, [pc, #72]	@ (800190c <HAL_GPIO_Init+0x334>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3301      	adds	r3, #1
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	2b0f      	cmp	r3, #15
 80018d0:	f67f ae90 	bls.w	80015f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3724      	adds	r7, #36	@ 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40013800 	.word	0x40013800
 80018ec:	40020000 	.word	0x40020000
 80018f0:	40020400 	.word	0x40020400
 80018f4:	40020800 	.word	0x40020800
 80018f8:	40020c00 	.word	0x40020c00
 80018fc:	40021000 	.word	0x40021000
 8001900:	40021400 	.word	0x40021400
 8001904:	40021800 	.word	0x40021800
 8001908:	40021c00 	.word	0x40021c00
 800190c:	40013c00 	.word	0x40013c00

08001910 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e267      	b.n	8001df2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d075      	beq.n	8001a1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800192e:	4b88      	ldr	r3, [pc, #544]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b04      	cmp	r3, #4
 8001938:	d00c      	beq.n	8001954 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800193a:	4b85      	ldr	r3, [pc, #532]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001942:	2b08      	cmp	r3, #8
 8001944:	d112      	bne.n	800196c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001946:	4b82      	ldr	r3, [pc, #520]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800194e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001952:	d10b      	bne.n	800196c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001954:	4b7e      	ldr	r3, [pc, #504]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d05b      	beq.n	8001a18 <HAL_RCC_OscConfig+0x108>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d157      	bne.n	8001a18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e242      	b.n	8001df2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001974:	d106      	bne.n	8001984 <HAL_RCC_OscConfig+0x74>
 8001976:	4b76      	ldr	r3, [pc, #472]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a75      	ldr	r2, [pc, #468]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 800197c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	e01d      	b.n	80019c0 <HAL_RCC_OscConfig+0xb0>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x98>
 800198e:	4b70      	ldr	r3, [pc, #448]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a6f      	ldr	r2, [pc, #444]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 8001994:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	4b6d      	ldr	r3, [pc, #436]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a6c      	ldr	r2, [pc, #432]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 80019a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e00b      	b.n	80019c0 <HAL_RCC_OscConfig+0xb0>
 80019a8:	4b69      	ldr	r3, [pc, #420]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a68      	ldr	r2, [pc, #416]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 80019ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	4b66      	ldr	r3, [pc, #408]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a65      	ldr	r2, [pc, #404]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 80019ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d013      	beq.n	80019f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7fe fefa 	bl	80007c0 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d0:	f7fe fef6 	bl	80007c0 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	@ 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e207      	b.n	8001df2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0xc0>
 80019ee:	e014      	b.n	8001a1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7fe fee6 	bl	80007c0 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7fe fee2 	bl	80007c0 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	@ 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e1f3      	b.n	8001df2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0a:	4b51      	ldr	r3, [pc, #324]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0xe8>
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d063      	beq.n	8001aee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a26:	4b4a      	ldr	r3, [pc, #296]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00b      	beq.n	8001a4a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a32:	4b47      	ldr	r3, [pc, #284]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d11c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a3e:	4b44      	ldr	r3, [pc, #272]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d116      	bne.n	8001a78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4a:	4b41      	ldr	r3, [pc, #260]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <HAL_RCC_OscConfig+0x152>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d001      	beq.n	8001a62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e1c7      	b.n	8001df2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a62:	4b3b      	ldr	r3, [pc, #236]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	4937      	ldr	r1, [pc, #220]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a76:	e03a      	b.n	8001aee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d020      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a80:	4b34      	ldr	r3, [pc, #208]	@ (8001b54 <HAL_RCC_OscConfig+0x244>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7fe fe9b 	bl	80007c0 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8e:	f7fe fe97 	bl	80007c0 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e1a8      	b.n	8001df2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aac:	4b28      	ldr	r3, [pc, #160]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4925      	ldr	r1, [pc, #148]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	600b      	str	r3, [r1, #0]
 8001ac0:	e015      	b.n	8001aee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ac2:	4b24      	ldr	r3, [pc, #144]	@ (8001b54 <HAL_RCC_OscConfig+0x244>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7fe fe7a 	bl	80007c0 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad0:	f7fe fe76 	bl	80007c0 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e187      	b.n	8001df2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d036      	beq.n	8001b68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d016      	beq.n	8001b30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b02:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <HAL_RCC_OscConfig+0x248>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b08:	f7fe fe5a 	bl	80007c0 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b10:	f7fe fe56 	bl	80007c0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e167      	b.n	8001df2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b22:	4b0b      	ldr	r3, [pc, #44]	@ (8001b50 <HAL_RCC_OscConfig+0x240>)
 8001b24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x200>
 8001b2e:	e01b      	b.n	8001b68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b30:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <HAL_RCC_OscConfig+0x248>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b36:	f7fe fe43 	bl	80007c0 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b3c:	e00e      	b.n	8001b5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b3e:	f7fe fe3f 	bl	80007c0 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d907      	bls.n	8001b5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e150      	b.n	8001df2 <HAL_RCC_OscConfig+0x4e2>
 8001b50:	40023800 	.word	0x40023800
 8001b54:	42470000 	.word	0x42470000
 8001b58:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b5c:	4b88      	ldr	r3, [pc, #544]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001b5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1ea      	bne.n	8001b3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 8097 	beq.w	8001ca4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b7a:	4b81      	ldr	r3, [pc, #516]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10f      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	4b7d      	ldr	r3, [pc, #500]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	4a7c      	ldr	r2, [pc, #496]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b96:	4b7a      	ldr	r3, [pc, #488]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba6:	4b77      	ldr	r3, [pc, #476]	@ (8001d84 <HAL_RCC_OscConfig+0x474>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d118      	bne.n	8001be4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bb2:	4b74      	ldr	r3, [pc, #464]	@ (8001d84 <HAL_RCC_OscConfig+0x474>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a73      	ldr	r2, [pc, #460]	@ (8001d84 <HAL_RCC_OscConfig+0x474>)
 8001bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bbe:	f7fe fdff 	bl	80007c0 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc6:	f7fe fdfb 	bl	80007c0 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e10c      	b.n	8001df2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd8:	4b6a      	ldr	r3, [pc, #424]	@ (8001d84 <HAL_RCC_OscConfig+0x474>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0f0      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d106      	bne.n	8001bfa <HAL_RCC_OscConfig+0x2ea>
 8001bec:	4b64      	ldr	r3, [pc, #400]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bf0:	4a63      	ldr	r2, [pc, #396]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bf8:	e01c      	b.n	8001c34 <HAL_RCC_OscConfig+0x324>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b05      	cmp	r3, #5
 8001c00:	d10c      	bne.n	8001c1c <HAL_RCC_OscConfig+0x30c>
 8001c02:	4b5f      	ldr	r3, [pc, #380]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c06:	4a5e      	ldr	r2, [pc, #376]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c0e:	4b5c      	ldr	r3, [pc, #368]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c12:	4a5b      	ldr	r2, [pc, #364]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c1a:	e00b      	b.n	8001c34 <HAL_RCC_OscConfig+0x324>
 8001c1c:	4b58      	ldr	r3, [pc, #352]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c20:	4a57      	ldr	r2, [pc, #348]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001c22:	f023 0301 	bic.w	r3, r3, #1
 8001c26:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c28:	4b55      	ldr	r3, [pc, #340]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c2c:	4a54      	ldr	r2, [pc, #336]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001c2e:	f023 0304 	bic.w	r3, r3, #4
 8001c32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d015      	beq.n	8001c68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3c:	f7fe fdc0 	bl	80007c0 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c44:	f7fe fdbc 	bl	80007c0 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e0cb      	b.n	8001df2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5a:	4b49      	ldr	r3, [pc, #292]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0ee      	beq.n	8001c44 <HAL_RCC_OscConfig+0x334>
 8001c66:	e014      	b.n	8001c92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c68:	f7fe fdaa 	bl	80007c0 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c6e:	e00a      	b.n	8001c86 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c70:	f7fe fda6 	bl	80007c0 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e0b5      	b.n	8001df2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c86:	4b3e      	ldr	r3, [pc, #248]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1ee      	bne.n	8001c70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c92:	7dfb      	ldrb	r3, [r7, #23]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d105      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c98:	4b39      	ldr	r3, [pc, #228]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9c:	4a38      	ldr	r2, [pc, #224]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001c9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ca2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 80a1 	beq.w	8001df0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cae:	4b34      	ldr	r3, [pc, #208]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d05c      	beq.n	8001d74 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d141      	bne.n	8001d46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc2:	4b31      	ldr	r3, [pc, #196]	@ (8001d88 <HAL_RCC_OscConfig+0x478>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc8:	f7fe fd7a 	bl	80007c0 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd0:	f7fe fd76 	bl	80007c0 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e087      	b.n	8001df2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce2:	4b27      	ldr	r3, [pc, #156]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69da      	ldr	r2, [r3, #28]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfc:	019b      	lsls	r3, r3, #6
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d04:	085b      	lsrs	r3, r3, #1
 8001d06:	3b01      	subs	r3, #1
 8001d08:	041b      	lsls	r3, r3, #16
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d10:	061b      	lsls	r3, r3, #24
 8001d12:	491b      	ldr	r1, [pc, #108]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d18:	4b1b      	ldr	r3, [pc, #108]	@ (8001d88 <HAL_RCC_OscConfig+0x478>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1e:	f7fe fd4f 	bl	80007c0 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d26:	f7fe fd4b 	bl	80007c0 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e05c      	b.n	8001df2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d38:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0f0      	beq.n	8001d26 <HAL_RCC_OscConfig+0x416>
 8001d44:	e054      	b.n	8001df0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d46:	4b10      	ldr	r3, [pc, #64]	@ (8001d88 <HAL_RCC_OscConfig+0x478>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7fe fd38 	bl	80007c0 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d54:	f7fe fd34 	bl	80007c0 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e045      	b.n	8001df2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d66:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_RCC_OscConfig+0x470>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x444>
 8001d72:	e03d      	b.n	8001df0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d107      	bne.n	8001d8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e038      	b.n	8001df2 <HAL_RCC_OscConfig+0x4e2>
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40007000 	.word	0x40007000
 8001d88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dfc <HAL_RCC_OscConfig+0x4ec>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d028      	beq.n	8001dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d121      	bne.n	8001dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d11a      	bne.n	8001dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001dc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d111      	bne.n	8001dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd2:	085b      	lsrs	r3, r3, #1
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d107      	bne.n	8001dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d001      	beq.n	8001df0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800

08001e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0cc      	b.n	8001fae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e14:	4b68      	ldr	r3, [pc, #416]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d90c      	bls.n	8001e3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e22:	4b65      	ldr	r3, [pc, #404]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2a:	4b63      	ldr	r3, [pc, #396]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d001      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0b8      	b.n	8001fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d020      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e54:	4b59      	ldr	r3, [pc, #356]	@ (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	4a58      	ldr	r2, [pc, #352]	@ (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e6c:	4b53      	ldr	r3, [pc, #332]	@ (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	4a52      	ldr	r2, [pc, #328]	@ (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e78:	4b50      	ldr	r3, [pc, #320]	@ (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	494d      	ldr	r1, [pc, #308]	@ (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d044      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d107      	bne.n	8001eae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	4b47      	ldr	r3, [pc, #284]	@ (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d119      	bne.n	8001ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e07f      	b.n	8001fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d003      	beq.n	8001ebe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d107      	bne.n	8001ece <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ebe:	4b3f      	ldr	r3, [pc, #252]	@ (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d109      	bne.n	8001ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e06f      	b.n	8001fae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ece:	4b3b      	ldr	r3, [pc, #236]	@ (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e067      	b.n	8001fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ede:	4b37      	ldr	r3, [pc, #220]	@ (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f023 0203 	bic.w	r2, r3, #3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	4934      	ldr	r1, [pc, #208]	@ (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef0:	f7fe fc66 	bl	80007c0 <HAL_GetTick>
 8001ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef6:	e00a      	b.n	8001f0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef8:	f7fe fc62 	bl	80007c0 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e04f      	b.n	8001fae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 020c 	and.w	r2, r3, #12
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d1eb      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f20:	4b25      	ldr	r3, [pc, #148]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d20c      	bcs.n	8001f48 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b22      	ldr	r3, [pc, #136]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	4b20      	ldr	r3, [pc, #128]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d001      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e032      	b.n	8001fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d008      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f54:	4b19      	ldr	r3, [pc, #100]	@ (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	4916      	ldr	r1, [pc, #88]	@ (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d009      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f72:	4b12      	ldr	r3, [pc, #72]	@ (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	490e      	ldr	r1, [pc, #56]	@ (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f86:	f000 f821 	bl	8001fcc <HAL_RCC_GetSysClockFreq>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	091b      	lsrs	r3, r3, #4
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	490a      	ldr	r1, [pc, #40]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	5ccb      	ldrb	r3, [r1, r3]
 8001f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9e:	4a09      	ldr	r2, [pc, #36]	@ (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001fa2:	4b09      	ldr	r3, [pc, #36]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fbc6 	bl	8000738 <HAL_InitTick>

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40023c00 	.word	0x40023c00
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	080046c0 	.word	0x080046c0
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	20000004 	.word	0x20000004

08001fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fd0:	b094      	sub	sp, #80	@ 0x50
 8001fd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fe4:	4b79      	ldr	r3, [pc, #484]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d00d      	beq.n	800200c <HAL_RCC_GetSysClockFreq+0x40>
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	f200 80e1 	bhi.w	80021b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <HAL_RCC_GetSysClockFreq+0x34>
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d003      	beq.n	8002006 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ffe:	e0db      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002000:	4b73      	ldr	r3, [pc, #460]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002002:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002004:	e0db      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002006:	4b73      	ldr	r3, [pc, #460]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002008:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800200a:	e0d8      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800200c:	4b6f      	ldr	r3, [pc, #444]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x200>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002014:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002016:	4b6d      	ldr	r3, [pc, #436]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d063      	beq.n	80020ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002022:	4b6a      	ldr	r3, [pc, #424]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	099b      	lsrs	r3, r3, #6
 8002028:	2200      	movs	r2, #0
 800202a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800202c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800202e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002034:	633b      	str	r3, [r7, #48]	@ 0x30
 8002036:	2300      	movs	r3, #0
 8002038:	637b      	str	r3, [r7, #52]	@ 0x34
 800203a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800203e:	4622      	mov	r2, r4
 8002040:	462b      	mov	r3, r5
 8002042:	f04f 0000 	mov.w	r0, #0
 8002046:	f04f 0100 	mov.w	r1, #0
 800204a:	0159      	lsls	r1, r3, #5
 800204c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002050:	0150      	lsls	r0, r2, #5
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4621      	mov	r1, r4
 8002058:	1a51      	subs	r1, r2, r1
 800205a:	6139      	str	r1, [r7, #16]
 800205c:	4629      	mov	r1, r5
 800205e:	eb63 0301 	sbc.w	r3, r3, r1
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002070:	4659      	mov	r1, fp
 8002072:	018b      	lsls	r3, r1, #6
 8002074:	4651      	mov	r1, sl
 8002076:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800207a:	4651      	mov	r1, sl
 800207c:	018a      	lsls	r2, r1, #6
 800207e:	4651      	mov	r1, sl
 8002080:	ebb2 0801 	subs.w	r8, r2, r1
 8002084:	4659      	mov	r1, fp
 8002086:	eb63 0901 	sbc.w	r9, r3, r1
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800209a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800209e:	4690      	mov	r8, r2
 80020a0:	4699      	mov	r9, r3
 80020a2:	4623      	mov	r3, r4
 80020a4:	eb18 0303 	adds.w	r3, r8, r3
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	462b      	mov	r3, r5
 80020ac:	eb49 0303 	adc.w	r3, r9, r3
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020be:	4629      	mov	r1, r5
 80020c0:	024b      	lsls	r3, r1, #9
 80020c2:	4621      	mov	r1, r4
 80020c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020c8:	4621      	mov	r1, r4
 80020ca:	024a      	lsls	r2, r1, #9
 80020cc:	4610      	mov	r0, r2
 80020ce:	4619      	mov	r1, r3
 80020d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020d2:	2200      	movs	r2, #0
 80020d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80020dc:	f7fe f874 	bl	80001c8 <__aeabi_uldivmod>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4613      	mov	r3, r2
 80020e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020e8:	e058      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ea:	4b38      	ldr	r3, [pc, #224]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x200>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	099b      	lsrs	r3, r3, #6
 80020f0:	2200      	movs	r2, #0
 80020f2:	4618      	mov	r0, r3
 80020f4:	4611      	mov	r1, r2
 80020f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020fa:	623b      	str	r3, [r7, #32]
 80020fc:	2300      	movs	r3, #0
 80020fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002100:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002104:	4642      	mov	r2, r8
 8002106:	464b      	mov	r3, r9
 8002108:	f04f 0000 	mov.w	r0, #0
 800210c:	f04f 0100 	mov.w	r1, #0
 8002110:	0159      	lsls	r1, r3, #5
 8002112:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002116:	0150      	lsls	r0, r2, #5
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4641      	mov	r1, r8
 800211e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002122:	4649      	mov	r1, r9
 8002124:	eb63 0b01 	sbc.w	fp, r3, r1
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002134:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002138:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800213c:	ebb2 040a 	subs.w	r4, r2, sl
 8002140:	eb63 050b 	sbc.w	r5, r3, fp
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	00eb      	lsls	r3, r5, #3
 800214e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002152:	00e2      	lsls	r2, r4, #3
 8002154:	4614      	mov	r4, r2
 8002156:	461d      	mov	r5, r3
 8002158:	4643      	mov	r3, r8
 800215a:	18e3      	adds	r3, r4, r3
 800215c:	603b      	str	r3, [r7, #0]
 800215e:	464b      	mov	r3, r9
 8002160:	eb45 0303 	adc.w	r3, r5, r3
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	f04f 0300 	mov.w	r3, #0
 800216e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002172:	4629      	mov	r1, r5
 8002174:	028b      	lsls	r3, r1, #10
 8002176:	4621      	mov	r1, r4
 8002178:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800217c:	4621      	mov	r1, r4
 800217e:	028a      	lsls	r2, r1, #10
 8002180:	4610      	mov	r0, r2
 8002182:	4619      	mov	r1, r3
 8002184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002186:	2200      	movs	r2, #0
 8002188:	61bb      	str	r3, [r7, #24]
 800218a:	61fa      	str	r2, [r7, #28]
 800218c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002190:	f7fe f81a 	bl	80001c8 <__aeabi_uldivmod>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4613      	mov	r3, r2
 800219a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800219c:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x200>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	0c1b      	lsrs	r3, r3, #16
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	3301      	adds	r3, #1
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80021ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021b6:	e002      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021b8:	4b05      	ldr	r3, [pc, #20]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80021ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3750      	adds	r7, #80	@ 0x50
 80021c4:	46bd      	mov	sp, r7
 80021c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ca:	bf00      	nop
 80021cc:	40023800 	.word	0x40023800
 80021d0:	00f42400 	.word	0x00f42400
 80021d4:	007a1200 	.word	0x007a1200

080021d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e041      	b.n	800226e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7fe f9ea 	bl	80005d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3304      	adds	r3, #4
 8002214:	4619      	mov	r1, r3
 8002216:	4610      	mov	r0, r2
 8002218:	f000 fb48 	bl	80028ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e041      	b.n	800230c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d106      	bne.n	80022a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f839 	bl	8002314 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2202      	movs	r2, #2
 80022a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3304      	adds	r3, #4
 80022b2:	4619      	mov	r1, r3
 80022b4:	4610      	mov	r0, r2
 80022b6:	f000 faf9 	bl	80028ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d109      	bne.n	800234c <HAL_TIM_PWM_Start+0x24>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b01      	cmp	r3, #1
 8002342:	bf14      	ite	ne
 8002344:	2301      	movne	r3, #1
 8002346:	2300      	moveq	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	e022      	b.n	8002392 <HAL_TIM_PWM_Start+0x6a>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	2b04      	cmp	r3, #4
 8002350:	d109      	bne.n	8002366 <HAL_TIM_PWM_Start+0x3e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b01      	cmp	r3, #1
 800235c:	bf14      	ite	ne
 800235e:	2301      	movne	r3, #1
 8002360:	2300      	moveq	r3, #0
 8002362:	b2db      	uxtb	r3, r3
 8002364:	e015      	b.n	8002392 <HAL_TIM_PWM_Start+0x6a>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2b08      	cmp	r3, #8
 800236a:	d109      	bne.n	8002380 <HAL_TIM_PWM_Start+0x58>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b01      	cmp	r3, #1
 8002376:	bf14      	ite	ne
 8002378:	2301      	movne	r3, #1
 800237a:	2300      	moveq	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	e008      	b.n	8002392 <HAL_TIM_PWM_Start+0x6a>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b01      	cmp	r3, #1
 800238a:	bf14      	ite	ne
 800238c:	2301      	movne	r3, #1
 800238e:	2300      	moveq	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e07c      	b.n	8002494 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d104      	bne.n	80023aa <HAL_TIM_PWM_Start+0x82>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023a8:	e013      	b.n	80023d2 <HAL_TIM_PWM_Start+0xaa>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d104      	bne.n	80023ba <HAL_TIM_PWM_Start+0x92>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023b8:	e00b      	b.n	80023d2 <HAL_TIM_PWM_Start+0xaa>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d104      	bne.n	80023ca <HAL_TIM_PWM_Start+0xa2>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023c8:	e003      	b.n	80023d2 <HAL_TIM_PWM_Start+0xaa>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2202      	movs	r2, #2
 80023ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2201      	movs	r2, #1
 80023d8:	6839      	ldr	r1, [r7, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 fd56 	bl	8002e8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a2d      	ldr	r2, [pc, #180]	@ (800249c <HAL_TIM_PWM_Start+0x174>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d004      	beq.n	80023f4 <HAL_TIM_PWM_Start+0xcc>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a2c      	ldr	r2, [pc, #176]	@ (80024a0 <HAL_TIM_PWM_Start+0x178>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d101      	bne.n	80023f8 <HAL_TIM_PWM_Start+0xd0>
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <HAL_TIM_PWM_Start+0xd2>
 80023f8:	2300      	movs	r3, #0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800240c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a22      	ldr	r2, [pc, #136]	@ (800249c <HAL_TIM_PWM_Start+0x174>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d022      	beq.n	800245e <HAL_TIM_PWM_Start+0x136>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002420:	d01d      	beq.n	800245e <HAL_TIM_PWM_Start+0x136>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1f      	ldr	r2, [pc, #124]	@ (80024a4 <HAL_TIM_PWM_Start+0x17c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d018      	beq.n	800245e <HAL_TIM_PWM_Start+0x136>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a1d      	ldr	r2, [pc, #116]	@ (80024a8 <HAL_TIM_PWM_Start+0x180>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d013      	beq.n	800245e <HAL_TIM_PWM_Start+0x136>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a1c      	ldr	r2, [pc, #112]	@ (80024ac <HAL_TIM_PWM_Start+0x184>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d00e      	beq.n	800245e <HAL_TIM_PWM_Start+0x136>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a16      	ldr	r2, [pc, #88]	@ (80024a0 <HAL_TIM_PWM_Start+0x178>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d009      	beq.n	800245e <HAL_TIM_PWM_Start+0x136>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a18      	ldr	r2, [pc, #96]	@ (80024b0 <HAL_TIM_PWM_Start+0x188>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d004      	beq.n	800245e <HAL_TIM_PWM_Start+0x136>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a16      	ldr	r2, [pc, #88]	@ (80024b4 <HAL_TIM_PWM_Start+0x18c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d111      	bne.n	8002482 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2b06      	cmp	r3, #6
 800246e:	d010      	beq.n	8002492 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002480:	e007      	b.n	8002492 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0201 	orr.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40010000 	.word	0x40010000
 80024a0:	40010400 	.word	0x40010400
 80024a4:	40000400 	.word	0x40000400
 80024a8:	40000800 	.word	0x40000800
 80024ac:	40000c00 	.word	0x40000c00
 80024b0:	40014000 	.word	0x40014000
 80024b4:	40001800 	.word	0x40001800

080024b8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2200      	movs	r2, #0
 80024c8:	6839      	ldr	r1, [r7, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 fcde 	bl	8002e8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a2e      	ldr	r2, [pc, #184]	@ (8002590 <HAL_TIM_PWM_Stop+0xd8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d004      	beq.n	80024e4 <HAL_TIM_PWM_Stop+0x2c>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a2d      	ldr	r2, [pc, #180]	@ (8002594 <HAL_TIM_PWM_Stop+0xdc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d101      	bne.n	80024e8 <HAL_TIM_PWM_Stop+0x30>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <HAL_TIM_PWM_Stop+0x32>
 80024e8:	2300      	movs	r3, #0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d017      	beq.n	800251e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6a1a      	ldr	r2, [r3, #32]
 80024f4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10f      	bne.n	800251e <HAL_TIM_PWM_Stop+0x66>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6a1a      	ldr	r2, [r3, #32]
 8002504:	f240 4344 	movw	r3, #1092	@ 0x444
 8002508:	4013      	ands	r3, r2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d107      	bne.n	800251e <HAL_TIM_PWM_Stop+0x66>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800251c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6a1a      	ldr	r2, [r3, #32]
 8002524:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002528:	4013      	ands	r3, r2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10f      	bne.n	800254e <HAL_TIM_PWM_Stop+0x96>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6a1a      	ldr	r2, [r3, #32]
 8002534:	f240 4344 	movw	r3, #1092	@ 0x444
 8002538:	4013      	ands	r3, r2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d107      	bne.n	800254e <HAL_TIM_PWM_Stop+0x96>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0201 	bic.w	r2, r2, #1
 800254c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d104      	bne.n	800255e <HAL_TIM_PWM_Stop+0xa6>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800255c:	e013      	b.n	8002586 <HAL_TIM_PWM_Stop+0xce>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b04      	cmp	r3, #4
 8002562:	d104      	bne.n	800256e <HAL_TIM_PWM_Stop+0xb6>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800256c:	e00b      	b.n	8002586 <HAL_TIM_PWM_Stop+0xce>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b08      	cmp	r3, #8
 8002572:	d104      	bne.n	800257e <HAL_TIM_PWM_Stop+0xc6>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800257c:	e003      	b.n	8002586 <HAL_TIM_PWM_Stop+0xce>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40010000 	.word	0x40010000
 8002594:	40010400 	.word	0x40010400

08002598 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e0ae      	b.n	8002714 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b0c      	cmp	r3, #12
 80025c2:	f200 809f 	bhi.w	8002704 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80025c6:	a201      	add	r2, pc, #4	@ (adr r2, 80025cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80025c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025cc:	08002601 	.word	0x08002601
 80025d0:	08002705 	.word	0x08002705
 80025d4:	08002705 	.word	0x08002705
 80025d8:	08002705 	.word	0x08002705
 80025dc:	08002641 	.word	0x08002641
 80025e0:	08002705 	.word	0x08002705
 80025e4:	08002705 	.word	0x08002705
 80025e8:	08002705 	.word	0x08002705
 80025ec:	08002683 	.word	0x08002683
 80025f0:	08002705 	.word	0x08002705
 80025f4:	08002705 	.word	0x08002705
 80025f8:	08002705 	.word	0x08002705
 80025fc:	080026c3 	.word	0x080026c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f9f6 	bl	80029f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0208 	orr.w	r2, r2, #8
 800261a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699a      	ldr	r2, [r3, #24]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0204 	bic.w	r2, r2, #4
 800262a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6999      	ldr	r1, [r3, #24]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	619a      	str	r2, [r3, #24]
      break;
 800263e:	e064      	b.n	800270a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68b9      	ldr	r1, [r7, #8]
 8002646:	4618      	mov	r0, r3
 8002648:	f000 fa46 	bl	8002ad8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800265a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800266a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6999      	ldr	r1, [r3, #24]
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	021a      	lsls	r2, r3, #8
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	619a      	str	r2, [r3, #24]
      break;
 8002680:	e043      	b.n	800270a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68b9      	ldr	r1, [r7, #8]
 8002688:	4618      	mov	r0, r3
 800268a:	f000 fa9b 	bl	8002bc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	69da      	ldr	r2, [r3, #28]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f042 0208 	orr.w	r2, r2, #8
 800269c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	69da      	ldr	r2, [r3, #28]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0204 	bic.w	r2, r2, #4
 80026ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69d9      	ldr	r1, [r3, #28]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	61da      	str	r2, [r3, #28]
      break;
 80026c0:	e023      	b.n	800270a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68b9      	ldr	r1, [r7, #8]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 faef 	bl	8002cac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	69da      	ldr	r2, [r3, #28]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	69da      	ldr	r2, [r3, #28]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	69d9      	ldr	r1, [r3, #28]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	021a      	lsls	r2, r3, #8
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	61da      	str	r2, [r3, #28]
      break;
 8002702:	e002      	b.n	800270a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	75fb      	strb	r3, [r7, #23]
      break;
 8002708:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002712:	7dfb      	ldrb	r3, [r7, #23]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_TIM_ConfigClockSource+0x1c>
 8002734:	2302      	movs	r3, #2
 8002736:	e0b4      	b.n	80028a2 <HAL_TIM_ConfigClockSource+0x186>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800275e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002770:	d03e      	beq.n	80027f0 <HAL_TIM_ConfigClockSource+0xd4>
 8002772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002776:	f200 8087 	bhi.w	8002888 <HAL_TIM_ConfigClockSource+0x16c>
 800277a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800277e:	f000 8086 	beq.w	800288e <HAL_TIM_ConfigClockSource+0x172>
 8002782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002786:	d87f      	bhi.n	8002888 <HAL_TIM_ConfigClockSource+0x16c>
 8002788:	2b70      	cmp	r3, #112	@ 0x70
 800278a:	d01a      	beq.n	80027c2 <HAL_TIM_ConfigClockSource+0xa6>
 800278c:	2b70      	cmp	r3, #112	@ 0x70
 800278e:	d87b      	bhi.n	8002888 <HAL_TIM_ConfigClockSource+0x16c>
 8002790:	2b60      	cmp	r3, #96	@ 0x60
 8002792:	d050      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x11a>
 8002794:	2b60      	cmp	r3, #96	@ 0x60
 8002796:	d877      	bhi.n	8002888 <HAL_TIM_ConfigClockSource+0x16c>
 8002798:	2b50      	cmp	r3, #80	@ 0x50
 800279a:	d03c      	beq.n	8002816 <HAL_TIM_ConfigClockSource+0xfa>
 800279c:	2b50      	cmp	r3, #80	@ 0x50
 800279e:	d873      	bhi.n	8002888 <HAL_TIM_ConfigClockSource+0x16c>
 80027a0:	2b40      	cmp	r3, #64	@ 0x40
 80027a2:	d058      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x13a>
 80027a4:	2b40      	cmp	r3, #64	@ 0x40
 80027a6:	d86f      	bhi.n	8002888 <HAL_TIM_ConfigClockSource+0x16c>
 80027a8:	2b30      	cmp	r3, #48	@ 0x30
 80027aa:	d064      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0x15a>
 80027ac:	2b30      	cmp	r3, #48	@ 0x30
 80027ae:	d86b      	bhi.n	8002888 <HAL_TIM_ConfigClockSource+0x16c>
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d060      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0x15a>
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d867      	bhi.n	8002888 <HAL_TIM_ConfigClockSource+0x16c>
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d05c      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0x15a>
 80027bc:	2b10      	cmp	r3, #16
 80027be:	d05a      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0x15a>
 80027c0:	e062      	b.n	8002888 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027d2:	f000 fb3b 	bl	8002e4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80027e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	609a      	str	r2, [r3, #8]
      break;
 80027ee:	e04f      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002800:	f000 fb24 	bl	8002e4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002812:	609a      	str	r2, [r3, #8]
      break;
 8002814:	e03c      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002822:	461a      	mov	r2, r3
 8002824:	f000 fa98 	bl	8002d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2150      	movs	r1, #80	@ 0x50
 800282e:	4618      	mov	r0, r3
 8002830:	f000 faf1 	bl	8002e16 <TIM_ITRx_SetConfig>
      break;
 8002834:	e02c      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002842:	461a      	mov	r2, r3
 8002844:	f000 fab7 	bl	8002db6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2160      	movs	r1, #96	@ 0x60
 800284e:	4618      	mov	r0, r3
 8002850:	f000 fae1 	bl	8002e16 <TIM_ITRx_SetConfig>
      break;
 8002854:	e01c      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002862:	461a      	mov	r2, r3
 8002864:	f000 fa78 	bl	8002d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2140      	movs	r1, #64	@ 0x40
 800286e:	4618      	mov	r0, r3
 8002870:	f000 fad1 	bl	8002e16 <TIM_ITRx_SetConfig>
      break;
 8002874:	e00c      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4619      	mov	r1, r3
 8002880:	4610      	mov	r0, r2
 8002882:	f000 fac8 	bl	8002e16 <TIM_ITRx_SetConfig>
      break;
 8002886:	e003      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
      break;
 800288c:	e000      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800288e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a43      	ldr	r2, [pc, #268]	@ (80029cc <TIM_Base_SetConfig+0x120>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d013      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ca:	d00f      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a40      	ldr	r2, [pc, #256]	@ (80029d0 <TIM_Base_SetConfig+0x124>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00b      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a3f      	ldr	r2, [pc, #252]	@ (80029d4 <TIM_Base_SetConfig+0x128>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d007      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a3e      	ldr	r2, [pc, #248]	@ (80029d8 <TIM_Base_SetConfig+0x12c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d003      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a3d      	ldr	r2, [pc, #244]	@ (80029dc <TIM_Base_SetConfig+0x130>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d108      	bne.n	80028fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a32      	ldr	r2, [pc, #200]	@ (80029cc <TIM_Base_SetConfig+0x120>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d02b      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800290c:	d027      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a2f      	ldr	r2, [pc, #188]	@ (80029d0 <TIM_Base_SetConfig+0x124>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d023      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a2e      	ldr	r2, [pc, #184]	@ (80029d4 <TIM_Base_SetConfig+0x128>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d01f      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a2d      	ldr	r2, [pc, #180]	@ (80029d8 <TIM_Base_SetConfig+0x12c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d01b      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a2c      	ldr	r2, [pc, #176]	@ (80029dc <TIM_Base_SetConfig+0x130>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d017      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a2b      	ldr	r2, [pc, #172]	@ (80029e0 <TIM_Base_SetConfig+0x134>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a2a      	ldr	r2, [pc, #168]	@ (80029e4 <TIM_Base_SetConfig+0x138>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00f      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a29      	ldr	r2, [pc, #164]	@ (80029e8 <TIM_Base_SetConfig+0x13c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00b      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a28      	ldr	r2, [pc, #160]	@ (80029ec <TIM_Base_SetConfig+0x140>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a27      	ldr	r2, [pc, #156]	@ (80029f0 <TIM_Base_SetConfig+0x144>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d003      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a26      	ldr	r2, [pc, #152]	@ (80029f4 <TIM_Base_SetConfig+0x148>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d108      	bne.n	8002970 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a0e      	ldr	r2, [pc, #56]	@ (80029cc <TIM_Base_SetConfig+0x120>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d003      	beq.n	800299e <TIM_Base_SetConfig+0xf2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a10      	ldr	r2, [pc, #64]	@ (80029dc <TIM_Base_SetConfig+0x130>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d103      	bne.n	80029a6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f043 0204 	orr.w	r2, r3, #4
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	601a      	str	r2, [r3, #0]
}
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40010000 	.word	0x40010000
 80029d0:	40000400 	.word	0x40000400
 80029d4:	40000800 	.word	0x40000800
 80029d8:	40000c00 	.word	0x40000c00
 80029dc:	40010400 	.word	0x40010400
 80029e0:	40014000 	.word	0x40014000
 80029e4:	40014400 	.word	0x40014400
 80029e8:	40014800 	.word	0x40014800
 80029ec:	40001800 	.word	0x40001800
 80029f0:	40001c00 	.word	0x40001c00
 80029f4:	40002000 	.word	0x40002000

080029f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	f023 0201 	bic.w	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 0303 	bic.w	r3, r3, #3
 8002a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f023 0302 	bic.w	r3, r3, #2
 8002a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a20      	ldr	r2, [pc, #128]	@ (8002ad0 <TIM_OC1_SetConfig+0xd8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d003      	beq.n	8002a5c <TIM_OC1_SetConfig+0x64>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a1f      	ldr	r2, [pc, #124]	@ (8002ad4 <TIM_OC1_SetConfig+0xdc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d10c      	bne.n	8002a76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f023 0308 	bic.w	r3, r3, #8
 8002a62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f023 0304 	bic.w	r3, r3, #4
 8002a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a15      	ldr	r2, [pc, #84]	@ (8002ad0 <TIM_OC1_SetConfig+0xd8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d003      	beq.n	8002a86 <TIM_OC1_SetConfig+0x8e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a14      	ldr	r2, [pc, #80]	@ (8002ad4 <TIM_OC1_SetConfig+0xdc>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d111      	bne.n	8002aaa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	621a      	str	r2, [r3, #32]
}
 8002ac4:	bf00      	nop
 8002ac6:	371c      	adds	r7, #28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	40010000 	.word	0x40010000
 8002ad4:	40010400 	.word	0x40010400

08002ad8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	f023 0210 	bic.w	r2, r3, #16
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	021b      	lsls	r3, r3, #8
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f023 0320 	bic.w	r3, r3, #32
 8002b22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a22      	ldr	r2, [pc, #136]	@ (8002bbc <TIM_OC2_SetConfig+0xe4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d003      	beq.n	8002b40 <TIM_OC2_SetConfig+0x68>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a21      	ldr	r2, [pc, #132]	@ (8002bc0 <TIM_OC2_SetConfig+0xe8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d10d      	bne.n	8002b5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a17      	ldr	r2, [pc, #92]	@ (8002bbc <TIM_OC2_SetConfig+0xe4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d003      	beq.n	8002b6c <TIM_OC2_SetConfig+0x94>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a16      	ldr	r2, [pc, #88]	@ (8002bc0 <TIM_OC2_SetConfig+0xe8>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d113      	bne.n	8002b94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	621a      	str	r2, [r3, #32]
}
 8002bae:	bf00      	nop
 8002bb0:	371c      	adds	r7, #28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40010000 	.word	0x40010000
 8002bc0:	40010400 	.word	0x40010400

08002bc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 0303 	bic.w	r3, r3, #3
 8002bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a21      	ldr	r2, [pc, #132]	@ (8002ca4 <TIM_OC3_SetConfig+0xe0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d003      	beq.n	8002c2a <TIM_OC3_SetConfig+0x66>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a20      	ldr	r2, [pc, #128]	@ (8002ca8 <TIM_OC3_SetConfig+0xe4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d10d      	bne.n	8002c46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	021b      	lsls	r3, r3, #8
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a16      	ldr	r2, [pc, #88]	@ (8002ca4 <TIM_OC3_SetConfig+0xe0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d003      	beq.n	8002c56 <TIM_OC3_SetConfig+0x92>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a15      	ldr	r2, [pc, #84]	@ (8002ca8 <TIM_OC3_SetConfig+0xe4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d113      	bne.n	8002c7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	621a      	str	r2, [r3, #32]
}
 8002c98:	bf00      	nop
 8002c9a:	371c      	adds	r7, #28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	40010000 	.word	0x40010000
 8002ca8:	40010400 	.word	0x40010400

08002cac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002cf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	031b      	lsls	r3, r3, #12
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a12      	ldr	r2, [pc, #72]	@ (8002d50 <TIM_OC4_SetConfig+0xa4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d003      	beq.n	8002d14 <TIM_OC4_SetConfig+0x68>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a11      	ldr	r2, [pc, #68]	@ (8002d54 <TIM_OC4_SetConfig+0xa8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d109      	bne.n	8002d28 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	019b      	lsls	r3, r3, #6
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	621a      	str	r2, [r3, #32]
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40010000 	.word	0x40010000
 8002d54:	40010400 	.word	0x40010400

08002d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	f023 0201 	bic.w	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f023 030a 	bic.w	r3, r3, #10
 8002d94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	621a      	str	r2, [r3, #32]
}
 8002daa:	bf00      	nop
 8002dac:	371c      	adds	r7, #28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b087      	sub	sp, #28
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	f023 0210 	bic.w	r2, r3, #16
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002de0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	031b      	lsls	r3, r3, #12
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002df2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	621a      	str	r2, [r3, #32]
}
 8002e0a:	bf00      	nop
 8002e0c:	371c      	adds	r7, #28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b085      	sub	sp, #20
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f043 0307 	orr.w	r3, r3, #7
 8002e38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	609a      	str	r2, [r3, #8]
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	021a      	lsls	r2, r3, #8
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	609a      	str	r2, [r3, #8]
}
 8002e80:	bf00      	nop
 8002e82:	371c      	adds	r7, #28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a1a      	ldr	r2, [r3, #32]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	401a      	ands	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a1a      	ldr	r2, [r3, #32]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f003 031f 	and.w	r3, r3, #31
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	621a      	str	r2, [r3, #32]
}
 8002eca:	bf00      	nop
 8002ecc:	371c      	adds	r7, #28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
	...

08002ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e05a      	b.n	8002fa6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a21      	ldr	r2, [pc, #132]	@ (8002fb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d022      	beq.n	8002f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f3c:	d01d      	beq.n	8002f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d018      	beq.n	8002f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8002fbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d013      	beq.n	8002f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a1a      	ldr	r2, [pc, #104]	@ (8002fc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d00e      	beq.n	8002f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a18      	ldr	r2, [pc, #96]	@ (8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d009      	beq.n	8002f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a17      	ldr	r2, [pc, #92]	@ (8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d004      	beq.n	8002f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a15      	ldr	r2, [pc, #84]	@ (8002fcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d10c      	bne.n	8002f94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40010000 	.word	0x40010000
 8002fb8:	40000400 	.word	0x40000400
 8002fbc:	40000800 	.word	0x40000800
 8002fc0:	40000c00 	.word	0x40000c00
 8002fc4:	40010400 	.word	0x40010400
 8002fc8:	40014000 	.word	0x40014000
 8002fcc:	40001800 	.word	0x40001800

08002fd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e03d      	b.n	8003068 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	4313      	orrs	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4313      	orrs	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4313      	orrs	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	4313      	orrs	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	4313      	orrs	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <init_buck_converter>:
 *                                   Must not be NULL.
 *
 * @retval None
 */
void init_buck_converter(const buck_converter_cfg_t *buck_converter_cfg_ptr)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
	if(NULL != buck_converter_cfg_ptr)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d010      	beq.n	80030a4 <init_buck_converter+0x30>
	{
		is_cricial_error_detected = false;
 8003082:	4b0b      	ldr	r3, [pc, #44]	@ (80030b0 <init_buck_converter+0x3c>)
 8003084:	2200      	movs	r2, #0
 8003086:	701a      	strb	r2, [r3, #0]
		m_buck_converter_cfg = (buck_converter_cfg_t*)buck_converter_cfg_ptr;
 8003088:	4a0a      	ldr	r2, [pc, #40]	@ (80030b4 <init_buck_converter+0x40>)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6013      	str	r3, [r2, #0]
		start_pwm_channel(PWM_TIMER_ID_FOR_BUCK_MOSFET);
 800308e:	2000      	movs	r0, #0
 8003090:	f000 fcc8 	bl	8003a24 <start_pwm_channel>
		start_software_timer(BUCK_CONVERTER_PID_SOFTWARE_TIMER_ID ,
							 m_buck_converter_cfg->period_time_process_of_controller_ms);
 8003094:	4b07      	ldr	r3, [pc, #28]	@ (80030b4 <init_buck_converter+0x40>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	7a1b      	ldrb	r3, [r3, #8]
		start_software_timer(BUCK_CONVERTER_PID_SOFTWARE_TIMER_ID ,
 800309a:	4619      	mov	r1, r3
 800309c:	2000      	movs	r0, #0
 800309e:	f000 ffaf 	bl	8004000 <start_software_timer>
	}
	else
	{
		report_development_error();
	}
}
 80030a2:	e001      	b.n	80030a8 <init_buck_converter+0x34>
		report_development_error();
 80030a4:	f001 f924 	bl	80042f0 <report_development_error>
}
 80030a8:	bf00      	nop
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	20000088 	.word	0x20000088
 80030b4:	20000084 	.word	0x20000084

080030b8 <control_out_voltage_with_current_limit>:
 * It is called by software timer (BUCK_CONVERTER_PID_SOFTWARE_TIMER_ID) periodically.
 *
 * @retval None
 */
void control_out_voltage_with_current_limit(software_timer_id_t sw_timer_id)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	71fb      	strb	r3, [r7, #7]
	(void)sw_timer_id;

	if(true == is_cricial_error_detected)
 80030c2:	4b3f      	ldr	r3, [pc, #252]	@ (80031c0 <control_out_voltage_with_current_limit+0x108>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d176      	bne.n	80031b8 <control_out_voltage_with_current_limit+0x100>
	{
		return; // This is exist for double prevention,
		//because system will be in ERROR mode when critical error is detected
	}

	float sensed_output_voltage = 0.0f;
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	60fb      	str	r3, [r7, #12]

	adc_sensor_state_e adc_read_state =
		read_adc_sensor_value(BUCK_CONVERTOR_OUT_VOLTAGE_RESISTOR_SENSOR_ID , &sensed_output_voltage);
 80030d0:	f107 030c 	add.w	r3, r7, #12
 80030d4:	4619      	mov	r1, r3
 80030d6:	2001      	movs	r0, #1
 80030d8:	f000 feae 	bl	8003e38 <read_adc_sensor_value>
 80030dc:	4603      	mov	r3, r0
 80030de:	77fb      	strb	r3, [r7, #31]

	if(ADC_SENSOR_ERROR_e == adc_read_state)
 80030e0:	7ffb      	ldrb	r3, [r7, #31]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d102      	bne.n	80030ec <control_out_voltage_with_current_limit+0x34>
	{
		report_sensor_error();
 80030e6:	f001 f8f1 	bl	80042cc <report_sensor_error>
		return;
 80030ea:	e066      	b.n	80031ba <control_out_voltage_with_current_limit+0x102>
	}

	send_signal_over_com(COM_BUCK_OUTPUT_VOLTAGE_SIGNAL_ID,&sensed_output_voltage);
 80030ec:	f107 030c 	add.w	r3, r7, #12
 80030f0:	4619      	mov	r1, r3
 80030f2:	2000      	movs	r0, #0
 80030f4:	f000 ff26 	bl	8003f44 <send_signal_over_com>

	float i_out_reference = PID_Step(m_buck_converter_cfg->pid_out_voltage_cotroller_ptr,
 80030f8:	4b32      	ldr	r3, [pc, #200]	@ (80031c4 <control_out_voltage_with_current_limit+0x10c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	edd7 7a03 	vldr	s15, [r7, #12]
									 sensed_output_voltage,
									 m_buck_converter_cfg->v_out_ref);
 8003102:	4b30      	ldr	r3, [pc, #192]	@ (80031c4 <control_out_voltage_with_current_limit+0x10c>)
 8003104:	681b      	ldr	r3, [r3, #0]
	float i_out_reference = PID_Step(m_buck_converter_cfg->pid_out_voltage_cotroller_ptr,
 8003106:	ed93 7a03 	vldr	s14, [r3, #12]
 800310a:	eef0 0a47 	vmov.f32	s1, s14
 800310e:	eeb0 0a67 	vmov.f32	s0, s15
 8003112:	4610      	mov	r0, r2
 8003114:	f001 f84c 	bl	80041b0 <PID_Step>
 8003118:	ed87 0a06 	vstr	s0, [r7, #24]

	float sensed_output_current = 0.0f;
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	60bb      	str	r3, [r7, #8]

	adc_read_state =
			read_adc_sensor_value(BUCK_CONVERTOR_OUT_CURRENT_ACS724_SENSOR_ID , &sensed_output_current);
 8003122:	f107 0308 	add.w	r3, r7, #8
 8003126:	4619      	mov	r1, r3
 8003128:	2000      	movs	r0, #0
 800312a:	f000 fe85 	bl	8003e38 <read_adc_sensor_value>
 800312e:	4603      	mov	r3, r0
 8003130:	77fb      	strb	r3, [r7, #31]

	if(ADC_SENSOR_ERROR_e == adc_read_state)
 8003132:	7ffb      	ldrb	r3, [r7, #31]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d102      	bne.n	800313e <control_out_voltage_with_current_limit+0x86>
	{
		report_sensor_error();
 8003138:	f001 f8c8 	bl	80042cc <report_sensor_error>
		return;
 800313c:	e03d      	b.n	80031ba <control_out_voltage_with_current_limit+0x102>
	}

	send_signal_over_com(COM_BUCK_OUTPUT_CURRENT_SIGNAL_ID,&sensed_output_current);
 800313e:	f107 0308 	add.w	r3, r7, #8
 8003142:	4619      	mov	r1, r3
 8003144:	2002      	movs	r0, #2
 8003146:	f000 fefd 	bl	8003f44 <send_signal_over_com>
	//TODO : current monitor to detect over current
	bool is_over_current =
		monitor_current_to_detect_over_current(sensed_output_current ,
 800314a:	edd7 7a02 	vldr	s15, [r7, #8]
											   m_buck_converter_cfg->i_out_max,
 800314e:	4b1d      	ldr	r3, [pc, #116]	@ (80031c4 <control_out_voltage_with_current_limit+0x10c>)
 8003150:	681b      	ldr	r3, [r3, #0]
		monitor_current_to_detect_over_current(sensed_output_current ,
 8003152:	ed93 7a04 	vldr	s14, [r3, #16]
											   m_buck_converter_cfg->over_current_occurence_time_min);
 8003156:	4b1b      	ldr	r3, [pc, #108]	@ (80031c4 <control_out_voltage_with_current_limit+0x10c>)
 8003158:	681b      	ldr	r3, [r3, #0]
		monitor_current_to_detect_over_current(sensed_output_current ,
 800315a:	8a9b      	ldrh	r3, [r3, #20]
 800315c:	4618      	mov	r0, r3
 800315e:	eef0 0a47 	vmov.f32	s1, s14
 8003162:	eeb0 0a67 	vmov.f32	s0, s15
 8003166:	f000 f831 	bl	80031cc <monitor_current_to_detect_over_current>
 800316a:	4603      	mov	r3, r0
 800316c:	75fb      	strb	r3, [r7, #23]

	if(true == is_over_current)
 800316e:	7dfb      	ldrb	r3, [r7, #23]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00d      	beq.n	8003190 <control_out_voltage_with_current_limit+0xd8>
	{
		set_pwm_duty(PWM_TIMER_ID_FOR_BUCK_MOSFET , 0.0f);
 8003174:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 80031c8 <control_out_voltage_with_current_limit+0x110>
 8003178:	2000      	movs	r0, #0
 800317a:	f000 fcd7 	bl	8003b2c <set_pwm_duty>
		stop_pwm_channel(PWM_TIMER_ID_FOR_BUCK_MOSFET);
 800317e:	2000      	movs	r0, #0
 8003180:	f000 fc92 	bl	8003aa8 <stop_pwm_channel>
		report_over_current();
 8003184:	f001 f8c6 	bl	8004314 <report_over_current>
		is_cricial_error_detected = true;
 8003188:	4b0d      	ldr	r3, [pc, #52]	@ (80031c0 <control_out_voltage_with_current_limit+0x108>)
 800318a:	2201      	movs	r2, #1
 800318c:	701a      	strb	r2, [r3, #0]
		return;
 800318e:	e014      	b.n	80031ba <control_out_voltage_with_current_limit+0x102>
	}

	float duty_reference = PID_Step(m_buck_converter_cfg->pid_out_current_cotroller_ptr,
 8003190:	4b0c      	ldr	r3, [pc, #48]	@ (80031c4 <control_out_voltage_with_current_limit+0x10c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	edd7 7a02 	vldr	s15, [r7, #8]
 800319a:	edd7 0a06 	vldr	s1, [r7, #24]
 800319e:	eeb0 0a67 	vmov.f32	s0, s15
 80031a2:	4618      	mov	r0, r3
 80031a4:	f001 f804 	bl	80041b0 <PID_Step>
 80031a8:	ed87 0a04 	vstr	s0, [r7, #16]
									sensed_output_current,
									i_out_reference);

	set_pwm_duty(PWM_TIMER_ID_FOR_BUCK_MOSFET , duty_reference);
 80031ac:	ed97 0a04 	vldr	s0, [r7, #16]
 80031b0:	2000      	movs	r0, #0
 80031b2:	f000 fcbb 	bl	8003b2c <set_pwm_duty>
 80031b6:	e000      	b.n	80031ba <control_out_voltage_with_current_limit+0x102>
		return; // This is exist for double prevention,
 80031b8:	bf00      	nop
}
 80031ba:	3720      	adds	r7, #32
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20000088 	.word	0x20000088
 80031c4:	20000084 	.word	0x20000084
 80031c8:	00000000 	.word	0x00000000

080031cc <monitor_current_to_detect_over_current>:

static bool monitor_current_to_detect_over_current(float sensed_output_current ,
												   float over_current_value,
												   uint16_t over_current_occurance_time_min)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	ed87 0a03 	vstr	s0, [r7, #12]
 80031d6:	edc7 0a02 	vstr	s1, [r7, #8]
 80031da:	4603      	mov	r3, r0
 80031dc:	80fb      	strh	r3, [r7, #6]
	bool is_over_current_detected = false;
 80031de:	2300      	movs	r3, #0
 80031e0:	75fb      	strb	r3, [r7, #23]

	static uint16_t over_curent_detect_cnt = 0U;
	if(sensed_output_current > over_current_value)
 80031e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80031e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80031ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f2:	dd06      	ble.n	8003202 <monitor_current_to_detect_over_current+0x36>
	{
		over_curent_detect_cnt ++;
 80031f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003224 <monitor_current_to_detect_over_current+0x58>)
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	3301      	adds	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	4b09      	ldr	r3, [pc, #36]	@ (8003224 <monitor_current_to_detect_over_current+0x58>)
 80031fe:	801a      	strh	r2, [r3, #0]
 8003200:	e002      	b.n	8003208 <monitor_current_to_detect_over_current+0x3c>
	}
	else
	{
		over_curent_detect_cnt = 0;
 8003202:	4b08      	ldr	r3, [pc, #32]	@ (8003224 <monitor_current_to_detect_over_current+0x58>)
 8003204:	2200      	movs	r2, #0
 8003206:	801a      	strh	r2, [r3, #0]
	}

	if(over_current_occurance_time_min <= over_curent_detect_cnt)
 8003208:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <monitor_current_to_detect_over_current+0x58>)
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	88fa      	ldrh	r2, [r7, #6]
 800320e:	429a      	cmp	r2, r3
 8003210:	d801      	bhi.n	8003216 <monitor_current_to_detect_over_current+0x4a>
	{
		is_over_current_detected = true;
 8003212:	2301      	movs	r3, #1
 8003214:	75fb      	strb	r3, [r7, #23]
	}

	return is_over_current_detected;
 8003216:	7dfb      	ldrb	r3, [r7, #23]

}
 8003218:	4618      	mov	r0, r3
 800321a:	371c      	adds	r7, #28
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	2000008a 	.word	0x2000008a

08003228 <init_bsp_adc>:
 * and sets various parameters such as scan mode, trigger source, and number of conversions.
 * 
 * @retval None
 */
void init_bsp_adc()
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    m_hadc1.Instance = ADC1;
 800322c:	4b17      	ldr	r3, [pc, #92]	@ (800328c <init_bsp_adc+0x64>)
 800322e:	4a18      	ldr	r2, [pc, #96]	@ (8003290 <init_bsp_adc+0x68>)
 8003230:	601a      	str	r2, [r3, #0]
    m_hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003232:	4b16      	ldr	r3, [pc, #88]	@ (800328c <init_bsp_adc+0x64>)
 8003234:	2200      	movs	r2, #0
 8003236:	605a      	str	r2, [r3, #4]
    m_hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003238:	4b14      	ldr	r3, [pc, #80]	@ (800328c <init_bsp_adc+0x64>)
 800323a:	2200      	movs	r2, #0
 800323c:	609a      	str	r2, [r3, #8]
    m_hadc1.Init.ScanConvMode = ENABLE;
 800323e:	4b13      	ldr	r3, [pc, #76]	@ (800328c <init_bsp_adc+0x64>)
 8003240:	2201      	movs	r2, #1
 8003242:	611a      	str	r2, [r3, #16]
    m_hadc1.Init.ContinuousConvMode = DISABLE;
 8003244:	4b11      	ldr	r3, [pc, #68]	@ (800328c <init_bsp_adc+0x64>)
 8003246:	2200      	movs	r2, #0
 8003248:	761a      	strb	r2, [r3, #24]
    m_hadc1.Init.DiscontinuousConvMode = DISABLE;
 800324a:	4b10      	ldr	r3, [pc, #64]	@ (800328c <init_bsp_adc+0x64>)
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2020 	strb.w	r2, [r3, #32]
    m_hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003252:	4b0e      	ldr	r3, [pc, #56]	@ (800328c <init_bsp_adc+0x64>)
 8003254:	2200      	movs	r2, #0
 8003256:	62da      	str	r2, [r3, #44]	@ 0x2c
    m_hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003258:	4b0c      	ldr	r3, [pc, #48]	@ (800328c <init_bsp_adc+0x64>)
 800325a:	4a0e      	ldr	r2, [pc, #56]	@ (8003294 <init_bsp_adc+0x6c>)
 800325c:	629a      	str	r2, [r3, #40]	@ 0x28
    m_hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800325e:	4b0b      	ldr	r3, [pc, #44]	@ (800328c <init_bsp_adc+0x64>)
 8003260:	2200      	movs	r2, #0
 8003262:	60da      	str	r2, [r3, #12]
    m_hadc1.Init.NbrOfConversion = 3U;
 8003264:	4b09      	ldr	r3, [pc, #36]	@ (800328c <init_bsp_adc+0x64>)
 8003266:	2203      	movs	r2, #3
 8003268:	61da      	str	r2, [r3, #28]
    m_hadc1.Init.DMAContinuousRequests = DISABLE;
 800326a:	4b08      	ldr	r3, [pc, #32]	@ (800328c <init_bsp_adc+0x64>)
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    m_hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003272:	4b06      	ldr	r3, [pc, #24]	@ (800328c <init_bsp_adc+0x64>)
 8003274:	2201      	movs	r2, #1
 8003276:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&m_hadc1) != HAL_OK)
 8003278:	4804      	ldr	r0, [pc, #16]	@ (800328c <init_bsp_adc+0x64>)
 800327a:	f7fd faad 	bl	80007d8 <HAL_ADC_Init>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <init_bsp_adc+0x60>
    {
    	report_init_error();
 8003284:	f001 f858 	bl	8004338 <report_init_error>
    }

}
 8003288:	bf00      	nop
 800328a:	bd80      	pop	{r7, pc}
 800328c:	2000008c 	.word	0x2000008c
 8003290:	40012000 	.word	0x40012000
 8003294:	0f000001 	.word	0x0f000001

08003298 <read_current_sense_adc_value>:
 * @param[out] raw_value Pointer to store the ADC voltage value.
 * @retval BSP_ADC_STATE_OK_e if the conversion is successful.
 * @retval BSP_ADC_STATE_ERROR_e if the conversion fails.
 */
bsp_adc_status_e read_current_sense_adc_value(float *voltage_value_ptr)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
    bsp_adc_status_e read_status = BSP_ADC_STATE_ERROR_e;
 80032a0:	2301      	movs	r3, #1
 80032a2:	73fb      	strb	r3, [r7, #15]
    configure_current_sense_adc_channel();
 80032a4:	f000 f888 	bl	80033b8 <configure_current_sense_adc_channel>
    HAL_ADC_Start(&m_hadc1);
 80032a8:	4811      	ldr	r0, [pc, #68]	@ (80032f0 <read_current_sense_adc_value+0x58>)
 80032aa:	f7fd fad9 	bl	8000860 <HAL_ADC_Start>
    HAL_StatusTypeDef poll_state =
        HAL_ADC_PollForConversion(&m_hadc1,5U);
 80032ae:	2105      	movs	r1, #5
 80032b0:	480f      	ldr	r0, [pc, #60]	@ (80032f0 <read_current_sense_adc_value+0x58>)
 80032b2:	f7fd fbda 	bl	8000a6a <HAL_ADC_PollForConversion>
 80032b6:	4603      	mov	r3, r0
 80032b8:	73bb      	strb	r3, [r7, #14]

    if(HAL_OK == poll_state)
 80032ba:	7bbb      	ldrb	r3, [r7, #14]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10f      	bne.n	80032e0 <read_current_sense_adc_value+0x48>
    {
    	*voltage_value_ptr = RAW_TO_VOLTAGE_FACTOR * HAL_ADC_GetValue(&m_hadc1);
 80032c0:	480b      	ldr	r0, [pc, #44]	@ (80032f0 <read_current_sense_adc_value+0x58>)
 80032c2:	f7fd fc5d 	bl	8000b80 <HAL_ADC_GetValue>
 80032c6:	ee07 0a90 	vmov	s15, r0
 80032ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ce:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80032f4 <read_current_sense_adc_value+0x5c>
 80032d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	edc3 7a00 	vstr	s15, [r3]
        read_status = BSP_ADC_STATE_OK_e;
 80032dc:	2300      	movs	r3, #0
 80032de:	73fb      	strb	r3, [r7, #15]
    }

    HAL_ADC_Stop(&m_hadc1);
 80032e0:	4803      	ldr	r0, [pc, #12]	@ (80032f0 <read_current_sense_adc_value+0x58>)
 80032e2:	f7fd fb8f 	bl	8000a04 <HAL_ADC_Stop>

    return read_status;
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	2000008c 	.word	0x2000008c
 80032f4:	3a534067 	.word	0x3a534067

080032f8 <read_voltage_sense_adc_value>:
 * @param[out] voltage_value_ptr Pointer to store the ADC voltage value.
 * @retval BSP_ADC_STATE_OK_e if the conversion is successful.
 * @retval BSP_ADC_STATE_ERROR_e if the conversion fails.
 */
bsp_adc_status_e read_voltage_sense_adc_value(float *voltage_value_ptr)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
    bsp_adc_status_e read_status = BSP_ADC_STATE_ERROR_e;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
    configure_voltage_sense_adc_channel();
 8003304:	f000 f878 	bl	80033f8 <configure_voltage_sense_adc_channel>
    HAL_ADC_Start(&m_hadc1);
 8003308:	4811      	ldr	r0, [pc, #68]	@ (8003350 <read_voltage_sense_adc_value+0x58>)
 800330a:	f7fd faa9 	bl	8000860 <HAL_ADC_Start>
    HAL_StatusTypeDef poll_state =
        HAL_ADC_PollForConversion(&m_hadc1,5U);
 800330e:	2105      	movs	r1, #5
 8003310:	480f      	ldr	r0, [pc, #60]	@ (8003350 <read_voltage_sense_adc_value+0x58>)
 8003312:	f7fd fbaa 	bl	8000a6a <HAL_ADC_PollForConversion>
 8003316:	4603      	mov	r3, r0
 8003318:	73bb      	strb	r3, [r7, #14]

    if(HAL_OK == poll_state)
 800331a:	7bbb      	ldrb	r3, [r7, #14]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10f      	bne.n	8003340 <read_voltage_sense_adc_value+0x48>
    {
    	*voltage_value_ptr = RAW_TO_VOLTAGE_FACTOR * HAL_ADC_GetValue(&m_hadc1);
 8003320:	480b      	ldr	r0, [pc, #44]	@ (8003350 <read_voltage_sense_adc_value+0x58>)
 8003322:	f7fd fc2d 	bl	8000b80 <HAL_ADC_GetValue>
 8003326:	ee07 0a90 	vmov	s15, r0
 800332a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800332e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003354 <read_voltage_sense_adc_value+0x5c>
 8003332:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	edc3 7a00 	vstr	s15, [r3]
        read_status = BSP_ADC_STATE_OK_e;
 800333c:	2300      	movs	r3, #0
 800333e:	73fb      	strb	r3, [r7, #15]
    }

    HAL_ADC_Stop(&m_hadc1);
 8003340:	4803      	ldr	r0, [pc, #12]	@ (8003350 <read_voltage_sense_adc_value+0x58>)
 8003342:	f7fd fb5f 	bl	8000a04 <HAL_ADC_Stop>

    return read_status;
 8003346:	7bfb      	ldrb	r3, [r7, #15]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	2000008c 	.word	0x2000008c
 8003354:	3a534067 	.word	0x3a534067

08003358 <read_temperature_sense_adc_value>:
 * @param[out] voltage_value_ptr Pointer to store the ADC voltage value.
 * @retval BSP_ADC_STATE_OK_e if the conversion is successful.
 * @retval BSP_ADC_STATE_ERROR_e if the conversion fails.
 */
bsp_adc_status_e read_temperature_sense_adc_value(float *voltage_value_ptr)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
    bsp_adc_status_e read_status = BSP_ADC_STATE_ERROR_e;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
    configure_temperature_sense_adc_channel();
 8003364:	f000 f868 	bl	8003438 <configure_temperature_sense_adc_channel>
    HAL_ADC_Start(&m_hadc1);
 8003368:	4811      	ldr	r0, [pc, #68]	@ (80033b0 <read_temperature_sense_adc_value+0x58>)
 800336a:	f7fd fa79 	bl	8000860 <HAL_ADC_Start>
    HAL_StatusTypeDef poll_state =
        HAL_ADC_PollForConversion(&m_hadc1,5U);
 800336e:	2105      	movs	r1, #5
 8003370:	480f      	ldr	r0, [pc, #60]	@ (80033b0 <read_temperature_sense_adc_value+0x58>)
 8003372:	f7fd fb7a 	bl	8000a6a <HAL_ADC_PollForConversion>
 8003376:	4603      	mov	r3, r0
 8003378:	73bb      	strb	r3, [r7, #14]

    if(HAL_OK == poll_state)
 800337a:	7bbb      	ldrb	r3, [r7, #14]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10f      	bne.n	80033a0 <read_temperature_sense_adc_value+0x48>
    {
    	*voltage_value_ptr = RAW_TO_VOLTAGE_FACTOR * HAL_ADC_GetValue(&m_hadc1);
 8003380:	480b      	ldr	r0, [pc, #44]	@ (80033b0 <read_temperature_sense_adc_value+0x58>)
 8003382:	f7fd fbfd 	bl	8000b80 <HAL_ADC_GetValue>
 8003386:	ee07 0a90 	vmov	s15, r0
 800338a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80033b4 <read_temperature_sense_adc_value+0x5c>
 8003392:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	edc3 7a00 	vstr	s15, [r3]
        read_status = BSP_ADC_STATE_OK_e;
 800339c:	2300      	movs	r3, #0
 800339e:	73fb      	strb	r3, [r7, #15]
    }

    HAL_ADC_Stop(&m_hadc1);
 80033a0:	4803      	ldr	r0, [pc, #12]	@ (80033b0 <read_temperature_sense_adc_value+0x58>)
 80033a2:	f7fd fb2f 	bl	8000a04 <HAL_ADC_Stop>

    return read_status;
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	2000008c 	.word	0x2000008c
 80033b4:	3a534067 	.word	0x3a534067

080033b8 <configure_current_sense_adc_channel>:
/**
 * @brief Configures the ADC channel and sampling time for current sensing.
 * @note  Sets the rank and channel to ADC_CHANNEL_1 with a short sampling time.
 */
static void configure_current_sense_adc_channel()
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    ADC_ChannelConfTypeDef sConfig = {0};
 80033be:	463b      	mov	r3, r7
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	605a      	str	r2, [r3, #4]
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_1;
 80033ca:	2301      	movs	r3, #1
 80033cc:	603b      	str	r3, [r7, #0]
    sConfig.Rank = ADC_CHANNEL_FIRST_RANK;
 80033ce:	2301      	movs	r3, #1
 80033d0:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80033d2:	2301      	movs	r3, #1
 80033d4:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&m_hadc1, &sConfig) != HAL_OK)
 80033d6:	463b      	mov	r3, r7
 80033d8:	4619      	mov	r1, r3
 80033da:	4806      	ldr	r0, [pc, #24]	@ (80033f4 <configure_current_sense_adc_channel+0x3c>)
 80033dc:	f7fd fbde 	bl	8000b9c <HAL_ADC_ConfigChannel>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <configure_current_sense_adc_channel+0x32>
    {
        report_init_error();
 80033e6:	f000 ffa7 	bl	8004338 <report_init_error>
    }
}
 80033ea:	bf00      	nop
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	2000008c 	.word	0x2000008c

080033f8 <configure_voltage_sense_adc_channel>:
/**
 * @brief Configures the ADC channel and sampling time for voltage sensing.
 * @note  Sets the rank and channel to ADC_CHANNEL_2 with medium sampling time.
 */
static void configure_voltage_sense_adc_channel()
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    ADC_ChannelConfTypeDef sConfig = {0};
 80033fe:	463b      	mov	r3, r7
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_2;
 800340a:	2302      	movs	r3, #2
 800340c:	603b      	str	r3, [r7, #0]
    sConfig.Rank = ADC_CHANNEL_SECOND_RANK;
 800340e:	2302      	movs	r3, #2
 8003410:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003412:	2303      	movs	r3, #3
 8003414:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&m_hadc1, &sConfig) != HAL_OK)
 8003416:	463b      	mov	r3, r7
 8003418:	4619      	mov	r1, r3
 800341a:	4806      	ldr	r0, [pc, #24]	@ (8003434 <configure_voltage_sense_adc_channel+0x3c>)
 800341c:	f7fd fbbe 	bl	8000b9c <HAL_ADC_ConfigChannel>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <configure_voltage_sense_adc_channel+0x32>
    {
        report_init_error();
 8003426:	f000 ff87 	bl	8004338 <report_init_error>
    }
}
 800342a:	bf00      	nop
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	2000008c 	.word	0x2000008c

08003438 <configure_temperature_sense_adc_channel>:
/**
 * @brief Configures the ADC channel and sampling time for temperature sensing.
 * @note  Sets the rank and channel to ADC_CHANNEL_3 with a long sampling time.
 */
static void configure_temperature_sense_adc_channel()
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    ADC_ChannelConfTypeDef sConfig = {0};
 800343e:	463b      	mov	r3, r7
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	60da      	str	r2, [r3, #12]
    sConfig.Channel = ADC_CHANNEL_3;
 800344a:	2303      	movs	r3, #3
 800344c:	603b      	str	r3, [r7, #0]
    sConfig.Rank = ADC_CHANNEL_THIRD_RANK;
 800344e:	2303      	movs	r3, #3
 8003450:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8003452:	2305      	movs	r3, #5
 8003454:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&m_hadc1, &sConfig) != HAL_OK)
 8003456:	463b      	mov	r3, r7
 8003458:	4619      	mov	r1, r3
 800345a:	4806      	ldr	r0, [pc, #24]	@ (8003474 <configure_temperature_sense_adc_channel+0x3c>)
 800345c:	f7fd fb9e 	bl	8000b9c <HAL_ADC_ConfigChannel>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <configure_temperature_sense_adc_channel+0x32>
    {
        report_init_error();
 8003466:	f000 ff67 	bl	8004338 <report_init_error>
    }
}
 800346a:	bf00      	nop
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	2000008c 	.word	0x2000008c

08003478 <init_bsp_can>:
 * and starts the CAN module.
 *
 * @param[in] bsp_can_configs_ptr Pointer to the CAN configuration structure.
 */
void init_bsp_can(const bsp_can_cfg_t *bsp_can_configs_ptr)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
	if(NULL == bsp_can_configs_ptr)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d102      	bne.n	800348c <init_bsp_can+0x14>
	{
		report_development_error();
 8003486:	f000 ff33 	bl	80042f0 <report_development_error>
		return;
 800348a:	e046      	b.n	800351a <init_bsp_can+0xa2>
	}

	m_bsp_can_config_ptr = (bsp_can_cfg_t *)bsp_can_configs_ptr;
 800348c:	4a24      	ldr	r2, [pc, #144]	@ (8003520 <init_bsp_can+0xa8>)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6013      	str	r3, [r2, #0]

	init_gpio_pin(m_bsp_can_config_ptr->can_gpio_pins_id);
 8003492:	4b23      	ldr	r3, [pc, #140]	@ (8003520 <init_bsp_can+0xa8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	7d1b      	ldrb	r3, [r3, #20]
 8003498:	4618      	mov	r0, r3
 800349a:	f000 f8df 	bl	800365c <init_gpio_pin>

	m_can_driver.Instance = m_bsp_can_config_ptr->can_instance_ptr;
 800349e:	4b20      	ldr	r3, [pc, #128]	@ (8003520 <init_bsp_can+0xa8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003524 <init_bsp_can+0xac>)
 80034a6:	6013      	str	r3, [r2, #0]
	m_can_driver.Init.Prescaler = m_bsp_can_config_ptr->clock_prescaler;
 80034a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003520 <init_bsp_can+0xa8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003524 <init_bsp_can+0xac>)
 80034b0:	6053      	str	r3, [r2, #4]
	m_can_driver.Init.Mode = CAN_MODE_NORMAL;
 80034b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003524 <init_bsp_can+0xac>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	609a      	str	r2, [r3, #8]
	m_can_driver.Init.SyncJumpWidth = m_bsp_can_config_ptr->sync_jump_bit;
 80034b8:	4b19      	ldr	r3, [pc, #100]	@ (8003520 <init_bsp_can+0xa8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	4a19      	ldr	r2, [pc, #100]	@ (8003524 <init_bsp_can+0xac>)
 80034c0:	60d3      	str	r3, [r2, #12]
	m_can_driver.Init.TimeSeg1 = m_bsp_can_config_ptr->time_segment_1;
 80034c2:	4b17      	ldr	r3, [pc, #92]	@ (8003520 <init_bsp_can+0xa8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	4a16      	ldr	r2, [pc, #88]	@ (8003524 <init_bsp_can+0xac>)
 80034ca:	6113      	str	r3, [r2, #16]
	m_can_driver.Init.TimeSeg2 = m_bsp_can_config_ptr->time_segment_2;
 80034cc:	4b14      	ldr	r3, [pc, #80]	@ (8003520 <init_bsp_can+0xa8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	4a14      	ldr	r2, [pc, #80]	@ (8003524 <init_bsp_can+0xac>)
 80034d4:	6153      	str	r3, [r2, #20]
	m_can_driver.Init.TimeTriggeredMode = DISABLE;
 80034d6:	4b13      	ldr	r3, [pc, #76]	@ (8003524 <init_bsp_can+0xac>)
 80034d8:	2200      	movs	r2, #0
 80034da:	761a      	strb	r2, [r3, #24]
	m_can_driver.Init.AutoBusOff = DISABLE;
 80034dc:	4b11      	ldr	r3, [pc, #68]	@ (8003524 <init_bsp_can+0xac>)
 80034de:	2200      	movs	r2, #0
 80034e0:	765a      	strb	r2, [r3, #25]
	m_can_driver.Init.AutoWakeUp = DISABLE;
 80034e2:	4b10      	ldr	r3, [pc, #64]	@ (8003524 <init_bsp_can+0xac>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	769a      	strb	r2, [r3, #26]
	m_can_driver.Init.AutoRetransmission = DISABLE;
 80034e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003524 <init_bsp_can+0xac>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	76da      	strb	r2, [r3, #27]
	m_can_driver.Init.ReceiveFifoLocked = DISABLE;
 80034ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003524 <init_bsp_can+0xac>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	771a      	strb	r2, [r3, #28]
	m_can_driver.Init.TransmitFifoPriority = DISABLE;
 80034f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003524 <init_bsp_can+0xac>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	775a      	strb	r2, [r3, #29]

	if (HAL_CAN_Init(&m_can_driver) != HAL_OK)
 80034fa:	480a      	ldr	r0, [pc, #40]	@ (8003524 <init_bsp_can+0xac>)
 80034fc:	f7fd fd6c 	bl	8000fd8 <HAL_CAN_Init>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <init_bsp_can+0x92>
	{
		report_init_error();
 8003506:	f000 ff17 	bl	8004338 <report_init_error>
	}

	if (HAL_CAN_Start(&m_can_driver) != HAL_OK)
 800350a:	4806      	ldr	r0, [pc, #24]	@ (8003524 <init_bsp_can+0xac>)
 800350c:	f7fd fe69 	bl	80011e2 <HAL_CAN_Start>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <init_bsp_can+0xa2>
	{
		report_init_error();
 8003516:	f000 ff0f 	bl	8004338 <report_init_error>
	}

}
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	200000fc 	.word	0x200000fc
 8003524:	200000d4 	.word	0x200000d4

08003528 <send_message_over_canbus>:
 * @param[in] data_len         Length of the data in bytes.
 */
void send_message_over_canbus(uint16_t message_id,
							  uint8_t *message_data_ptr ,
							  uint16_t data_len)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	6039      	str	r1, [r7, #0]
 8003532:	80fb      	strh	r3, [r7, #6]
 8003534:	4613      	mov	r3, r2
 8003536:	80bb      	strh	r3, [r7, #4]
	can_tx_message_cfg_t *tx_message_cfg_ptr = NULL;
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]

	bool is_msg_found = find_message_id_from_config(message_id,tx_message_cfg_ptr);
 800353c:	88fb      	ldrh	r3, [r7, #6]
 800353e:	68f9      	ldr	r1, [r7, #12]
 8003540:	4618      	mov	r0, r3
 8003542:	f000 f83b 	bl	80035bc <find_message_id_from_config>
 8003546:	4603      	mov	r3, r0
 8003548:	72fb      	strb	r3, [r7, #11]

	if(false == is_msg_found)
 800354a:	7afb      	ldrb	r3, [r7, #11]
 800354c:	f083 0301 	eor.w	r3, r3, #1
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <send_message_over_canbus+0x34>
	{
		report_development_error();
 8003556:	f000 fecb 	bl	80042f0 <report_development_error>
		return;
 800355a:	e026      	b.n	80035aa <send_message_over_canbus+0x82>
	}

	if(CANID_STANDARD_e == tx_message_cfg_ptr->id_type)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	7a1b      	ldrb	r3, [r3, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d107      	bne.n	8003574 <send_message_over_canbus+0x4c>
	{
		m_bsp_can_tx_header.IDE = CAN_ID_STD;
 8003564:	4b12      	ldr	r3, [pc, #72]	@ (80035b0 <send_message_over_canbus+0x88>)
 8003566:	2200      	movs	r2, #0
 8003568:	609a      	str	r2, [r3, #8]
		m_bsp_can_tx_header.StdId = tx_message_cfg_ptr->can_id;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	4a10      	ldr	r2, [pc, #64]	@ (80035b0 <send_message_over_canbus+0x88>)
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	e00e      	b.n	8003592 <send_message_over_canbus+0x6a>
	}
	else if(CANID_EXTENDED_e == tx_message_cfg_ptr->id_type)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	7a1b      	ldrb	r3, [r3, #8]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d107      	bne.n	800358c <send_message_over_canbus+0x64>
	{
		m_bsp_can_tx_header.IDE = CAN_ID_EXT;
 800357c:	4b0c      	ldr	r3, [pc, #48]	@ (80035b0 <send_message_over_canbus+0x88>)
 800357e:	2204      	movs	r2, #4
 8003580:	609a      	str	r2, [r3, #8]
		m_bsp_can_tx_header.ExtId = tx_message_cfg_ptr->can_id;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4a0a      	ldr	r2, [pc, #40]	@ (80035b0 <send_message_over_canbus+0x88>)
 8003588:	6053      	str	r3, [r2, #4]
 800358a:	e002      	b.n	8003592 <send_message_over_canbus+0x6a>
	}
	else
	{
		report_development_error();
 800358c:	f000 feb0 	bl	80042f0 <report_development_error>
		return;
 8003590:	e00b      	b.n	80035aa <send_message_over_canbus+0x82>
	}

	m_bsp_can_tx_header.DLC = data_len;
 8003592:	88bb      	ldrh	r3, [r7, #4]
 8003594:	4a06      	ldr	r2, [pc, #24]	@ (80035b0 <send_message_over_canbus+0x88>)
 8003596:	6113      	str	r3, [r2, #16]
	m_bsp_can_tx_header.RTR = CAN_RTR_DATA;
 8003598:	4b05      	ldr	r3, [pc, #20]	@ (80035b0 <send_message_over_canbus+0x88>)
 800359a:	2200      	movs	r2, #0
 800359c:	60da      	str	r2, [r3, #12]

	HAL_CAN_AddTxMessage(&m_can_driver,
 800359e:	4b05      	ldr	r3, [pc, #20]	@ (80035b4 <send_message_over_canbus+0x8c>)
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	4903      	ldr	r1, [pc, #12]	@ (80035b0 <send_message_over_canbus+0x88>)
 80035a4:	4804      	ldr	r0, [pc, #16]	@ (80035b8 <send_message_over_canbus+0x90>)
 80035a6:	f7fd fe60 	bl	800126a <HAL_CAN_AddTxMessage>
							 &m_bsp_can_tx_header,
							 message_data_ptr,
							 &m_mailbox);
}
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	20000100 	.word	0x20000100
 80035b4:	20000118 	.word	0x20000118
 80035b8:	200000d4 	.word	0x200000d4

080035bc <find_message_id_from_config>:
 * because `tx_message_cfg_ptr` is passed by value. Consider changing
 * to `can_tx_message_cfg_t **` for proper use.
 */
static bool find_message_id_from_config(uint16_t message_id,
										const can_tx_message_cfg_t *tx_message_cfg_ptr)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	6039      	str	r1, [r7, #0]
 80035c6:	80fb      	strh	r3, [r7, #6]
	bool is_message_found = false;
 80035c8:	2300      	movs	r3, #0
 80035ca:	737b      	strb	r3, [r7, #13]

	for(uint16_t tx_can_cfg_idx = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	81fb      	strh	r3, [r7, #14]
 80035d0:	bf00      	nop
			tx_message_cfg_ptr =
				&m_bsp_can_config_ptr->tx_messages_ptr[tx_can_cfg_idx];
		}
	}

	return is_message_found;
 80035d2:	7b7b      	ldrb	r3, [r7, #13]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <init_bsp_gpio>:
 * Stores the pointer to the array of GPIO pin configurations to be used in further operations.
 *
 * @param[in] gpio_pin_configs_ptr Pointer to the array of GPIO pin configurations.
 */
void init_bsp_gpio(const gpio_pin_cfg_t *gpio_pin_configs_ptr)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	4b19      	ldr	r3, [pc, #100]	@ (8003654 <init_bsp_gpio+0x74>)
 80035ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f0:	4a18      	ldr	r2, [pc, #96]	@ (8003654 <init_bsp_gpio+0x74>)
 80035f2:	f043 0302 	orr.w	r3, r3, #2
 80035f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80035f8:	4b16      	ldr	r3, [pc, #88]	@ (8003654 <init_bsp_gpio+0x74>)
 80035fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003604:	2300      	movs	r3, #0
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	4b12      	ldr	r3, [pc, #72]	@ (8003654 <init_bsp_gpio+0x74>)
 800360a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360c:	4a11      	ldr	r2, [pc, #68]	@ (8003654 <init_bsp_gpio+0x74>)
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	6313      	str	r3, [r2, #48]	@ 0x30
 8003614:	4b0f      	ldr	r3, [pc, #60]	@ (8003654 <init_bsp_gpio+0x74>)
 8003616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	4b0b      	ldr	r3, [pc, #44]	@ (8003654 <init_bsp_gpio+0x74>)
 8003626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003628:	4a0a      	ldr	r2, [pc, #40]	@ (8003654 <init_bsp_gpio+0x74>)
 800362a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800362e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003630:	4b08      	ldr	r3, [pc, #32]	@ (8003654 <init_bsp_gpio+0x74>)
 8003632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	68fb      	ldr	r3, [r7, #12]
    if(NULL != gpio_pin_configs_ptr)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <init_bsp_gpio+0x68>
    {
        m_last_gpio_pin_config_ptr = (gpio_pin_cfg_t *)gpio_pin_configs_ptr;
 8003642:	4a05      	ldr	r2, [pc, #20]	@ (8003658 <init_bsp_gpio+0x78>)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6013      	str	r3, [r2, #0]
    }
}
 8003648:	bf00      	nop
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	40023800 	.word	0x40023800
 8003658:	2000011c 	.word	0x2000011c

0800365c <init_gpio_pin>:
 * Configures the selected GPIO pin using the settings stored in the configuration table.
 *
 * @param[in] pin_no Index and unique identifier of the GPIO pin in the configuration table.
 */
void init_gpio_pin(uint8_t pin_no)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	71fb      	strb	r3, [r7, #7]
  if(NULL == m_last_gpio_pin_config_ptr)
 8003666:	4b30      	ldr	r3, [pc, #192]	@ (8003728 <init_gpio_pin+0xcc>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d102      	bne.n	8003674 <init_gpio_pin+0x18>
  {
	  report_development_error();
 800366e:	f000 fe3f 	bl	80042f0 <report_development_error>
 8003672:	e056      	b.n	8003722 <init_gpio_pin+0xc6>
	  return;
  }

  enable_used_gpio_pin_clock(m_last_gpio_pin_config_ptr[pin_no].Port);
 8003674:	4b2c      	ldr	r3, [pc, #176]	@ (8003728 <init_gpio_pin+0xcc>)
 8003676:	6819      	ldr	r1, [r3, #0]
 8003678:	79fa      	ldrb	r2, [r7, #7]
 800367a:	4613      	mov	r3, r2
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	4413      	add	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	440b      	add	r3, r1
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	4618      	mov	r0, r3
 8003688:	f000 f850 	bl	800372c <enable_used_gpio_pin_clock>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800368c:	f107 030c 	add.w	r3, r7, #12
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	60da      	str	r2, [r3, #12]
 800369a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = m_last_gpio_pin_config_ptr[pin_no].Pin;
 800369c:	4b22      	ldr	r3, [pc, #136]	@ (8003728 <init_gpio_pin+0xcc>)
 800369e:	6819      	ldr	r1, [r3, #0]
 80036a0:	79fa      	ldrb	r2, [r7, #7]
 80036a2:	4613      	mov	r3, r2
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	4413      	add	r3, r2
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	440b      	add	r3, r1
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = m_last_gpio_pin_config_ptr[pin_no].Mode; 
 80036b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003728 <init_gpio_pin+0xcc>)
 80036b2:	6819      	ldr	r1, [r3, #0]
 80036b4:	79fa      	ldrb	r2, [r7, #7]
 80036b6:	4613      	mov	r3, r2
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	4413      	add	r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	440b      	add	r3, r1
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = m_last_gpio_pin_config_ptr[pin_no].Pull;
 80036c4:	4b18      	ldr	r3, [pc, #96]	@ (8003728 <init_gpio_pin+0xcc>)
 80036c6:	6819      	ldr	r1, [r3, #0]
 80036c8:	79fa      	ldrb	r2, [r7, #7]
 80036ca:	4613      	mov	r3, r2
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	4413      	add	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	440b      	add	r3, r1
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	617b      	str	r3, [r7, #20]

  if(NULL != m_last_gpio_pin_config_ptr[pin_no].Alternate_ptr)
 80036d8:	4b13      	ldr	r3, [pc, #76]	@ (8003728 <init_gpio_pin+0xcc>)
 80036da:	6819      	ldr	r1, [r3, #0]
 80036dc:	79fa      	ldrb	r2, [r7, #7]
 80036de:	4613      	mov	r3, r2
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	4413      	add	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	440b      	add	r3, r1
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <init_gpio_pin+0xa8>
  {
	  GPIO_InitStruct.Alternate =
		 *m_last_gpio_pin_config_ptr[pin_no].Alternate_ptr;
 80036ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003728 <init_gpio_pin+0xcc>)
 80036f0:	6819      	ldr	r1, [r3, #0]
 80036f2:	79fa      	ldrb	r2, [r7, #7]
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	440b      	add	r3, r1
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	681b      	ldr	r3, [r3, #0]
	  GPIO_InitStruct.Alternate =
 8003702:	61fb      	str	r3, [r7, #28]
  }

  HAL_GPIO_Init(m_last_gpio_pin_config_ptr[pin_no].Port, &GPIO_InitStruct);
 8003704:	4b08      	ldr	r3, [pc, #32]	@ (8003728 <init_gpio_pin+0xcc>)
 8003706:	6819      	ldr	r1, [r3, #0]
 8003708:	79fa      	ldrb	r2, [r7, #7]
 800370a:	4613      	mov	r3, r2
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	4413      	add	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	440b      	add	r3, r1
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f107 020c 	add.w	r2, r7, #12
 800371a:	4611      	mov	r1, r2
 800371c:	4618      	mov	r0, r3
 800371e:	f7fd ff5b 	bl	80015d8 <HAL_GPIO_Init>
}
 8003722:	3720      	adds	r7, #32
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	2000011c 	.word	0x2000011c

0800372c <enable_used_gpio_pin_clock>:
 * If the provided port is not supported, a development error is reported.
 *
 * @param[in] gpio_port Pointer to the GPIO port (e.g., GPIOA, GPIOB, etc.).
 */
static void enable_used_gpio_pin_clock(GPIO_TypeDef* gpio_port)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
	if(GPIOA == gpio_port)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a28      	ldr	r2, [pc, #160]	@ (80037d8 <enable_used_gpio_pin_clock+0xac>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d10e      	bne.n	800375a <enable_used_gpio_pin_clock+0x2e>
	{
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	4b26      	ldr	r3, [pc, #152]	@ (80037dc <enable_used_gpio_pin_clock+0xb0>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003744:	4a25      	ldr	r2, [pc, #148]	@ (80037dc <enable_used_gpio_pin_clock+0xb0>)
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	6313      	str	r3, [r2, #48]	@ 0x30
 800374c:	4b23      	ldr	r3, [pc, #140]	@ (80037dc <enable_used_gpio_pin_clock+0xb0>)
 800374e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	697b      	ldr	r3, [r7, #20]
	else
	{
		report_development_error();
	}

}
 8003758:	e03a      	b.n	80037d0 <enable_used_gpio_pin_clock+0xa4>
	else if(GPIOB == gpio_port)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a20      	ldr	r2, [pc, #128]	@ (80037e0 <enable_used_gpio_pin_clock+0xb4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d10e      	bne.n	8003780 <enable_used_gpio_pin_clock+0x54>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	4b1d      	ldr	r3, [pc, #116]	@ (80037dc <enable_used_gpio_pin_clock+0xb0>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376a:	4a1c      	ldr	r2, [pc, #112]	@ (80037dc <enable_used_gpio_pin_clock+0xb0>)
 800376c:	f043 0302 	orr.w	r3, r3, #2
 8003770:	6313      	str	r3, [r2, #48]	@ 0x30
 8003772:	4b1a      	ldr	r3, [pc, #104]	@ (80037dc <enable_used_gpio_pin_clock+0xb0>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	693b      	ldr	r3, [r7, #16]
}
 800377e:	e027      	b.n	80037d0 <enable_used_gpio_pin_clock+0xa4>
	else if(GPIOC == gpio_port)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a18      	ldr	r2, [pc, #96]	@ (80037e4 <enable_used_gpio_pin_clock+0xb8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d10e      	bne.n	80037a6 <enable_used_gpio_pin_clock+0x7a>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	4b13      	ldr	r3, [pc, #76]	@ (80037dc <enable_used_gpio_pin_clock+0xb0>)
 800378e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003790:	4a12      	ldr	r2, [pc, #72]	@ (80037dc <enable_used_gpio_pin_clock+0xb0>)
 8003792:	f043 0304 	orr.w	r3, r3, #4
 8003796:	6313      	str	r3, [r2, #48]	@ 0x30
 8003798:	4b10      	ldr	r3, [pc, #64]	@ (80037dc <enable_used_gpio_pin_clock+0xb0>)
 800379a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	68fb      	ldr	r3, [r7, #12]
}
 80037a4:	e014      	b.n	80037d0 <enable_used_gpio_pin_clock+0xa4>
	else if(GPIOH == gpio_port)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a0f      	ldr	r2, [pc, #60]	@ (80037e8 <enable_used_gpio_pin_clock+0xbc>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d10e      	bne.n	80037cc <enable_used_gpio_pin_clock+0xa0>
		__HAL_RCC_GPIOH_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	4b0a      	ldr	r3, [pc, #40]	@ (80037dc <enable_used_gpio_pin_clock+0xb0>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b6:	4a09      	ldr	r2, [pc, #36]	@ (80037dc <enable_used_gpio_pin_clock+0xb0>)
 80037b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80037be:	4b07      	ldr	r3, [pc, #28]	@ (80037dc <enable_used_gpio_pin_clock+0xb0>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	68bb      	ldr	r3, [r7, #8]
}
 80037ca:	e001      	b.n	80037d0 <enable_used_gpio_pin_clock+0xa4>
		report_development_error();
 80037cc:	f000 fd90 	bl	80042f0 <report_development_error>
}
 80037d0:	bf00      	nop
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40020000 	.word	0x40020000
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40020400 	.word	0x40020400
 80037e4:	40020800 	.word	0x40020800
 80037e8:	40021c00 	.word	0x40021c00

080037ec <init_bsp_pwm>:
 * @brief Initializes all configured PWM timers and GPIOs.
 * 
 * @param[in] bsp_pwm_configs_ptr Pointer to array of PWM configurations.
 */
void init_bsp_pwm(const bsp_pwm_config_t *bsp_pwm_configs_ptr)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b092      	sub	sp, #72	@ 0x48
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	if(NULL != bsp_pwm_configs_ptr)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <init_bsp_pwm+0x14>
	{
		m_last_bsp_pwm_config_ptr = (bsp_pwm_config_t *)bsp_pwm_configs_ptr;
 80037fa:	4a88      	ldr	r2, [pc, #544]	@ (8003a1c <init_bsp_pwm+0x230>)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6013      	str	r3, [r2, #0]
	}

	for(uint8_t pwm_timer_idx = 0U; pwm_timer_idx < PWM_TIMER_TOTAL_CNT;pwm_timer_idx++)
 8003800:	2300      	movs	r3, #0
 8003802:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003806:	e0ff      	b.n	8003a08 <init_bsp_pwm+0x21c>
	{
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003808:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003816:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	605a      	str	r2, [r3, #4]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003820:	f107 030c 	add.w	r3, r7, #12
 8003824:	2220      	movs	r2, #32
 8003826:	2100      	movs	r1, #0
 8003828:	4618      	mov	r0, r3
 800382a:	f000 ff11 	bl	8004650 <memset>

	  m_htim[pwm_timer_idx].Instance = bsp_pwm_configs_ptr[pwm_timer_idx].timer_instance_ptr;
 800382e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8003832:	4613      	mov	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	461a      	mov	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4413      	add	r3, r2
 8003840:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8003844:	6819      	ldr	r1, [r3, #0]
 8003846:	4876      	ldr	r0, [pc, #472]	@ (8003a20 <init_bsp_pwm+0x234>)
 8003848:	4613      	mov	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4413      	add	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4403      	add	r3, r0
 8003852:	6019      	str	r1, [r3, #0]
	  m_htim[pwm_timer_idx].Init.Prescaler = bsp_pwm_configs_ptr[pwm_timer_idx].pwm_timer_prescalar;
 8003854:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8003858:	4613      	mov	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	461a      	mov	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4413      	add	r3, r2
 8003866:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800386a:	6919      	ldr	r1, [r3, #16]
 800386c:	486c      	ldr	r0, [pc, #432]	@ (8003a20 <init_bsp_pwm+0x234>)
 800386e:	4613      	mov	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	4413      	add	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4403      	add	r3, r0
 8003878:	3304      	adds	r3, #4
 800387a:	6019      	str	r1, [r3, #0]
	  m_htim[pwm_timer_idx].Init.CounterMode = TIM_COUNTERMODE_UP;
 800387c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8003880:	4967      	ldr	r1, [pc, #412]	@ (8003a20 <init_bsp_pwm+0x234>)
 8003882:	4613      	mov	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4413      	add	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	440b      	add	r3, r1
 800388c:	3308      	adds	r3, #8
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
	  m_htim[pwm_timer_idx].Init.Period = bsp_pwm_configs_ptr[pwm_timer_idx].pwm_timer_period;
 8003892:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8003896:	4613      	mov	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	461a      	mov	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4413      	add	r3, r2
 80038a4:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80038a8:	6959      	ldr	r1, [r3, #20]
 80038aa:	485d      	ldr	r0, [pc, #372]	@ (8003a20 <init_bsp_pwm+0x234>)
 80038ac:	4613      	mov	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4413      	add	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4403      	add	r3, r0
 80038b6:	330c      	adds	r3, #12
 80038b8:	6019      	str	r1, [r3, #0]
	  m_htim[pwm_timer_idx].Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038ba:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80038be:	4958      	ldr	r1, [pc, #352]	@ (8003a20 <init_bsp_pwm+0x234>)
 80038c0:	4613      	mov	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4413      	add	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	440b      	add	r3, r1
 80038ca:	3310      	adds	r3, #16
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
	  m_htim[pwm_timer_idx].Init.RepetitionCounter = 0;
 80038d0:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80038d4:	4952      	ldr	r1, [pc, #328]	@ (8003a20 <init_bsp_pwm+0x234>)
 80038d6:	4613      	mov	r3, r2
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	4413      	add	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	440b      	add	r3, r1
 80038e0:	3314      	adds	r3, #20
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
	  m_htim[pwm_timer_idx].Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038e6:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80038ea:	494d      	ldr	r1, [pc, #308]	@ (8003a20 <init_bsp_pwm+0x234>)
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4413      	add	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	440b      	add	r3, r1
 80038f6:	3318      	adds	r3, #24
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
	  if (HAL_TIM_Base_Init(&m_htim[pwm_timer_idx]) != HAL_OK)
 80038fc:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8003900:	4613      	mov	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	4413      	add	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4a45      	ldr	r2, [pc, #276]	@ (8003a20 <init_bsp_pwm+0x234>)
 800390a:	4413      	add	r3, r2
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe fc63 	bl	80021d8 <HAL_TIM_Base_Init>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <init_bsp_pwm+0x130>
	  {
	    report_init_error(); // TODO: gerçek error handler ekle
 8003918:	f000 fd0e 	bl	8004338 <report_init_error>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800391c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003920:	637b      	str	r3, [r7, #52]	@ 0x34
	  if (HAL_TIM_ConfigClockSource(&m_htim[pwm_timer_idx], &sClockSourceConfig) != HAL_OK)
 8003922:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8003926:	4613      	mov	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4413      	add	r3, r2
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	4a3c      	ldr	r2, [pc, #240]	@ (8003a20 <init_bsp_pwm+0x234>)
 8003930:	4413      	add	r3, r2
 8003932:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8003936:	4611      	mov	r1, r2
 8003938:	4618      	mov	r0, r3
 800393a:	f7fe feef 	bl	800271c <HAL_TIM_ConfigClockSource>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <init_bsp_pwm+0x15c>
	  {
	    report_init_error(); // TODO: gerçek error handler ekle
 8003944:	f000 fcf8 	bl	8004338 <report_init_error>
	  }
	  if (HAL_TIM_PWM_Init(&m_htim[pwm_timer_idx]) != HAL_OK)
 8003948:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800394c:	4613      	mov	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	4413      	add	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	4a32      	ldr	r2, [pc, #200]	@ (8003a20 <init_bsp_pwm+0x234>)
 8003956:	4413      	add	r3, r2
 8003958:	4618      	mov	r0, r3
 800395a:	f7fe fc8c 	bl	8002276 <HAL_TIM_PWM_Init>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <init_bsp_pwm+0x17c>
	  {
	    report_init_error(); // TODO: gerçek error handler ekle
 8003964:	f000 fce8 	bl	8004338 <report_init_error>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003968:	2300      	movs	r3, #0
 800396a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800396c:	2300      	movs	r3, #0
 800396e:	633b      	str	r3, [r7, #48]	@ 0x30
	  if (HAL_TIMEx_MasterConfigSynchronization(&m_htim[pwm_timer_idx], &sMasterConfig) != HAL_OK)
 8003970:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8003974:	4613      	mov	r3, r2
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	4413      	add	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4a28      	ldr	r2, [pc, #160]	@ (8003a20 <init_bsp_pwm+0x234>)
 800397e:	4413      	add	r3, r2
 8003980:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003984:	4611      	mov	r1, r2
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff faa6 	bl	8002ed8 <HAL_TIMEx_MasterConfigSynchronization>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <init_bsp_pwm+0x1aa>
	  {
	    report_init_error(); // TODO: gerçek error handler ekle
 8003992:	f000 fcd1 	bl	8004338 <report_init_error>
	  }

	  init_timer_pwm_channels(pwm_timer_idx);
 8003996:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800399a:	4618      	mov	r0, r3
 800399c:	f000 f9d8 	bl	8003d50 <init_timer_pwm_channels>
	  
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80039b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039b8:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80039ba:	2300      	movs	r3, #0
 80039bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	  if (HAL_TIMEx_ConfigBreakDeadTime(&m_htim[pwm_timer_idx], &sBreakDeadTimeConfig) != HAL_OK)
 80039be:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	4a15      	ldr	r2, [pc, #84]	@ (8003a20 <init_bsp_pwm+0x234>)
 80039cc:	4413      	add	r3, r2
 80039ce:	f107 020c 	add.w	r2, r7, #12
 80039d2:	4611      	mov	r1, r2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff fafb 	bl	8002fd0 <HAL_TIMEx_ConfigBreakDeadTime>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <init_bsp_pwm+0x1f8>
	  {
	    report_init_error();
 80039e0:	f000 fcaa 	bl	8004338 <report_init_error>
	  }

	  init_gpio_pin(bsp_pwm_configs_ptr[pwm_timer_idx].pwm_out_gpio_pin_id_in_bsp_gpio);
 80039e4:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80039e8:	4613      	mov	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	1a9b      	subs	r3, r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	461a      	mov	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4413      	add	r3, r2
 80039f6:	791b      	ldrb	r3, [r3, #4]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff fe2f 	bl	800365c <init_gpio_pin>
	for(uint8_t pwm_timer_idx = 0U; pwm_timer_idx < PWM_TIMER_TOTAL_CNT;pwm_timer_idx++)
 80039fe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003a02:	3301      	adds	r3, #1
 8003a04:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003a08:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f43f aefb 	beq.w	8003808 <init_bsp_pwm+0x1c>
	}
}
 8003a12:	bf00      	nop
 8003a14:	bf00      	nop
 8003a16:	3748      	adds	r7, #72	@ 0x48
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	20000168 	.word	0x20000168
 8003a20:	20000120 	.word	0x20000120

08003a24 <start_pwm_channel>:
 * @brief Starts a specific PWM channel.
 * 
 * @param[in] bsp_pwm_channel PWM channel to start.
 */
void start_pwm_channel(bsp_pwm_channel_idx_t bsp_pwm_channel)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	71fb      	strb	r3, [r7, #7]
	if(NULL == m_last_bsp_pwm_config_ptr)
 8003a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8003aa0 <start_pwm_channel+0x7c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d102      	bne.n	8003a3c <start_pwm_channel+0x18>
	{
		// bsp_pwm module has not initialized.
		report_development_error(); //TODO:
 8003a36:	f000 fc5b 	bl	80042f0 <report_development_error>
 8003a3a:	e02e      	b.n	8003a9a <start_pwm_channel+0x76>
		return;
	}

	uint8_t timer_config_idx = 0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	73fb      	strb	r3, [r7, #15]
	uint8_t pwm_config_idx = 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	73bb      	strb	r3, [r7, #14]
	bool is_pwm_found =
		find_timer_config_index_of_pwm_channel(bsp_pwm_channel,&timer_config_idx,&pwm_config_idx);
 8003a44:	f107 020e 	add.w	r2, r7, #14
 8003a48:	f107 010f 	add.w	r1, r7, #15
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f92e 	bl	8003cb0 <find_timer_config_index_of_pwm_channel>
 8003a54:	4603      	mov	r3, r0
 8003a56:	75fb      	strb	r3, [r7, #23]

		
	if(is_pwm_found)
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d01b      	beq.n	8003a96 <start_pwm_channel+0x72>
	{
		uint32_t timer_channel_idx = m_last_bsp_pwm_config_ptr[timer_config_idx].
 8003a5e:	4b10      	ldr	r3, [pc, #64]	@ (8003aa0 <start_pwm_channel+0x7c>)
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	4619      	mov	r1, r3
 8003a66:	460b      	mov	r3, r1
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	1a5b      	subs	r3, r3, r1
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
			timer_channel_configs.pwm_channels_ptr[pwm_config_idx].timer_channel;
 8003a70:	689a      	ldr	r2, [r3, #8]
 8003a72:	7bbb      	ldrb	r3, [r7, #14]
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4413      	add	r3, r2
		uint32_t timer_channel_idx = m_last_bsp_pwm_config_ptr[timer_config_idx].
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	613b      	str	r3, [r7, #16]

		HAL_TIM_PWM_Start(&m_htim[timer_config_idx],timer_channel_idx);
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	4613      	mov	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	4413      	add	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4a06      	ldr	r2, [pc, #24]	@ (8003aa4 <start_pwm_channel+0x80>)
 8003a8a:	4413      	add	r3, r2
 8003a8c:	6939      	ldr	r1, [r7, #16]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fe fc4a 	bl	8002328 <HAL_TIM_PWM_Start>
 8003a94:	e001      	b.n	8003a9a <start_pwm_channel+0x76>
	}
	else
	{
		report_development_error();
 8003a96:	f000 fc2b 	bl	80042f0 <report_development_error>
	}
}
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	20000168 	.word	0x20000168
 8003aa4:	20000120 	.word	0x20000120

08003aa8 <stop_pwm_channel>:
 * @brief Stops a specific PWM channel.
 * 
 * @param[in] bsp_pwm_channel PWM channel to stop.
 */
void stop_pwm_channel(bsp_pwm_channel_idx_t bsp_pwm_channel)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	71fb      	strb	r3, [r7, #7]
	if(NULL == m_last_bsp_pwm_config_ptr)
 8003ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8003b24 <stop_pwm_channel+0x7c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d102      	bne.n	8003ac0 <stop_pwm_channel+0x18>
	{
		// bsp_pwm module has not initialized.
		report_development_error(); //TODO:
 8003aba:	f000 fc19 	bl	80042f0 <report_development_error>
 8003abe:	e02e      	b.n	8003b1e <stop_pwm_channel+0x76>
		return;
	}

	uint8_t timer_config_idx = 0;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	73fb      	strb	r3, [r7, #15]
	uint8_t pwm_config_idx = 0;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	73bb      	strb	r3, [r7, #14]
	bool is_pwm_found =
		find_timer_config_index_of_pwm_channel(bsp_pwm_channel,&timer_config_idx,&pwm_config_idx);
 8003ac8:	f107 020e 	add.w	r2, r7, #14
 8003acc:	f107 010f 	add.w	r1, r7, #15
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 f8ec 	bl	8003cb0 <find_timer_config_index_of_pwm_channel>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	75fb      	strb	r3, [r7, #23]


	if(is_pwm_found)
 8003adc:	7dfb      	ldrb	r3, [r7, #23]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d01b      	beq.n	8003b1a <stop_pwm_channel+0x72>
	{
		uint32_t timer_channel_idx = m_last_bsp_pwm_config_ptr[timer_config_idx].
 8003ae2:	4b10      	ldr	r3, [pc, #64]	@ (8003b24 <stop_pwm_channel+0x7c>)
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
 8003ae8:	4619      	mov	r1, r3
 8003aea:	460b      	mov	r3, r1
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	1a5b      	subs	r3, r3, r1
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
			timer_channel_configs.pwm_channels_ptr[pwm_config_idx].timer_channel;
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	7bbb      	ldrb	r3, [r7, #14]
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	4413      	add	r3, r2
		uint32_t timer_channel_idx = m_last_bsp_pwm_config_ptr[timer_config_idx].
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	613b      	str	r3, [r7, #16]

		HAL_TIM_PWM_Stop(&m_htim[timer_config_idx],timer_channel_idx);
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
 8003b02:	461a      	mov	r2, r3
 8003b04:	4613      	mov	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4413      	add	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4a06      	ldr	r2, [pc, #24]	@ (8003b28 <stop_pwm_channel+0x80>)
 8003b0e:	4413      	add	r3, r2
 8003b10:	6939      	ldr	r1, [r7, #16]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fe fcd0 	bl	80024b8 <HAL_TIM_PWM_Stop>
 8003b18:	e001      	b.n	8003b1e <stop_pwm_channel+0x76>
	}
	else
	{
		report_development_error();
 8003b1a:	f000 fbe9 	bl	80042f0 <report_development_error>
	}
}
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20000168 	.word	0x20000168
 8003b28:	20000120 	.word	0x20000120

08003b2c <set_pwm_duty>:
 * @param[in] bsp_pwm_channel PWM channel to set.
 * @param[in] duty_rate Duty cycle to set (range: 0.0 to 1.0).
 */
void set_pwm_duty(bsp_pwm_channel_idx_t bsp_pwm_channel, 
				  float duty_rate)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	ed87 0a00 	vstr	s0, [r7]
 8003b38:	71fb      	strb	r3, [r7, #7]

	/* Check limits of duty rate */
	if ((duty_rate < PWM_DUTY_MIN) || (duty_rate > PWM_DUTY_MAX))
 8003b3a:	edd7 7a00 	vldr	s15, [r7]
 8003b3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b46:	d408      	bmi.n	8003b5a <set_pwm_duty+0x2e>
 8003b48:	edd7 7a00 	vldr	s15, [r7]
 8003b4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b58:	dd02      	ble.n	8003b60 <set_pwm_duty+0x34>
	{
		report_development_error(); //TODO: 
 8003b5a:	f000 fbc9 	bl	80042f0 <report_development_error>
		return;
 8003b5e:	e046      	b.n	8003bee <set_pwm_duty+0xc2>
	}

	if(NULL == m_last_bsp_pwm_config_ptr)
 8003b60:	4b24      	ldr	r3, [pc, #144]	@ (8003bf4 <set_pwm_duty+0xc8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d102      	bne.n	8003b6e <set_pwm_duty+0x42>
	{
		// bsp_pwm module has not initialized.
		report_development_error(); //TODO:
 8003b68:	f000 fbc2 	bl	80042f0 <report_development_error>
		return;
 8003b6c:	e03f      	b.n	8003bee <set_pwm_duty+0xc2>
	}

	uint8_t timer_config_idx = 0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	72fb      	strb	r3, [r7, #11]
	uint8_t pwm_config_idx = 0;
 8003b72:	2300      	movs	r3, #0
 8003b74:	72bb      	strb	r3, [r7, #10]
	bool is_pwm_found = 
		find_timer_config_index_of_pwm_channel(bsp_pwm_channel,&timer_config_idx,&pwm_config_idx);
 8003b76:	f107 020a 	add.w	r2, r7, #10
 8003b7a:	f107 010b 	add.w	r1, r7, #11
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 f895 	bl	8003cb0 <find_timer_config_index_of_pwm_channel>
 8003b86:	4603      	mov	r3, r0
 8003b88:	75fb      	strb	r3, [r7, #23]

	if(is_pwm_found)
 8003b8a:	7dfb      	ldrb	r3, [r7, #23]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d02c      	beq.n	8003bea <set_pwm_duty+0xbe>
	{
		uint32_t calculated_pwm_value = 
			m_last_bsp_pwm_config_ptr[timer_config_idx].pwm_timer_period * duty_rate;
 8003b90:	4b18      	ldr	r3, [pc, #96]	@ (8003bf4 <set_pwm_duty+0xc8>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	7afb      	ldrb	r3, [r7, #11]
 8003b96:	4619      	mov	r1, r3
 8003b98:	460b      	mov	r3, r1
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	1a5b      	subs	r3, r3, r1
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	ee07 3a90 	vmov	s15, r3
 8003ba8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bac:	edd7 7a00 	vldr	s15, [r7]
 8003bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
		uint32_t calculated_pwm_value = 
 8003bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bb8:	ee17 3a90 	vmov	r3, s15
 8003bbc:	613b      	str	r3, [r7, #16]

		uint32_t timer_channel_id =
			m_last_bsp_pwm_config_ptr[timer_config_idx].timer_channel_configs.
 8003bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf4 <set_pwm_duty+0xc8>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	7afb      	ldrb	r3, [r7, #11]
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	1a5b      	subs	r3, r3, r1
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	689a      	ldr	r2, [r3, #8]
			pwm_channels_ptr[pwm_config_idx].timer_channel;
 8003bd2:	7abb      	ldrb	r3, [r7, #10]
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4413      	add	r3, r2
		uint32_t timer_channel_id =
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60fb      	str	r3, [r7, #12]

		set_capture_compare_register_of_pwm_channel(timer_config_idx,
 8003bdc:	7afb      	ldrb	r3, [r7, #11]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	68f9      	ldr	r1, [r7, #12]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 f808 	bl	8003bf8 <set_capture_compare_register_of_pwm_channel>
 8003be8:	e001      	b.n	8003bee <set_pwm_duty+0xc2>
													timer_channel_id,
													calculated_pwm_value);
	}
	else
	{
		report_development_error();
 8003bea:	f000 fb81 	bl	80042f0 <report_development_error>
	}
}
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20000168 	.word	0x20000168

08003bf8 <set_capture_compare_register_of_pwm_channel>:

static void set_capture_compare_register_of_pwm_channel(uint8_t timer_config_idx,
														uint32_t timer_pwm_channel,
														uint32_t CCR_value)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	73fb      	strb	r3, [r7, #15]
	switch(timer_pwm_channel)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b0c      	cmp	r3, #12
 8003c0a:	d849      	bhi.n	8003ca0 <set_capture_compare_register_of_pwm_channel+0xa8>
 8003c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c14 <set_capture_compare_register_of_pwm_channel+0x1c>)
 8003c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c12:	bf00      	nop
 8003c14:	08003c49 	.word	0x08003c49
 8003c18:	08003ca1 	.word	0x08003ca1
 8003c1c:	08003ca1 	.word	0x08003ca1
 8003c20:	08003ca1 	.word	0x08003ca1
 8003c24:	08003c5f 	.word	0x08003c5f
 8003c28:	08003ca1 	.word	0x08003ca1
 8003c2c:	08003ca1 	.word	0x08003ca1
 8003c30:	08003ca1 	.word	0x08003ca1
 8003c34:	08003c75 	.word	0x08003c75
 8003c38:	08003ca1 	.word	0x08003ca1
 8003c3c:	08003ca1 	.word	0x08003ca1
 8003c40:	08003ca1 	.word	0x08003ca1
 8003c44:	08003c8b 	.word	0x08003c8b
	{
		case TIM_CHANNEL_1:
		{
			m_htim[timer_config_idx].Instance->CCR1 = CCR_value;
 8003c48:	7bfa      	ldrb	r2, [r7, #15]
 8003c4a:	4918      	ldr	r1, [pc, #96]	@ (8003cac <set_capture_compare_register_of_pwm_channel+0xb4>)
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4413      	add	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	440b      	add	r3, r1
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8003c5c:	e020      	b.n	8003ca0 <set_capture_compare_register_of_pwm_channel+0xa8>
		}
		case TIM_CHANNEL_2:
		{
			m_htim[timer_config_idx].Instance->CCR2 = CCR_value;
 8003c5e:	7bfa      	ldrb	r2, [r7, #15]
 8003c60:	4912      	ldr	r1, [pc, #72]	@ (8003cac <set_capture_compare_register_of_pwm_channel+0xb4>)
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4413      	add	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	440b      	add	r3, r1
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8003c72:	e015      	b.n	8003ca0 <set_capture_compare_register_of_pwm_channel+0xa8>
		}
		case TIM_CHANNEL_3:
		{
			m_htim[timer_config_idx].Instance->CCR3 = CCR_value;
 8003c74:	7bfa      	ldrb	r2, [r7, #15]
 8003c76:	490d      	ldr	r1, [pc, #52]	@ (8003cac <set_capture_compare_register_of_pwm_channel+0xb4>)
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	440b      	add	r3, r1
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8003c88:	e00a      	b.n	8003ca0 <set_capture_compare_register_of_pwm_channel+0xa8>
		}
		case TIM_CHANNEL_4:
		{
			m_htim[timer_config_idx].Instance->CCR4 = CCR_value;
 8003c8a:	7bfa      	ldrb	r2, [r7, #15]
 8003c8c:	4907      	ldr	r1, [pc, #28]	@ (8003cac <set_capture_compare_register_of_pwm_channel+0xb4>)
 8003c8e:	4613      	mov	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	4413      	add	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	440b      	add	r3, r1
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8003c9e:	bf00      	nop
		}
	}
}
 8003ca0:	bf00      	nop
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	20000120 	.word	0x20000120

08003cb0 <find_timer_config_index_of_pwm_channel>:

static bool find_timer_config_index_of_pwm_channel(bsp_pwm_channel_idx_t bsp_pwm_channel,
												uint8_t *timer_config_index_ptr,
												uint8_t *pwm_config_index_ptr)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b089      	sub	sp, #36	@ 0x24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
 8003cbc:	73fb      	strb	r3, [r7, #15]
	bool pwm_channel_found_state = false;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	77fb      	strb	r3, [r7, #31]

	if((NULL == m_last_bsp_pwm_config_ptr) || (NULL == timer_config_index_ptr))
 8003cc2:	4b22      	ldr	r3, [pc, #136]	@ (8003d4c <find_timer_config_index_of_pwm_channel+0x9c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <find_timer_config_index_of_pwm_channel+0x20>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <find_timer_config_index_of_pwm_channel+0x24>
	{
		return pwm_channel_found_state;
 8003cd0:	7ffb      	ldrb	r3, [r7, #31]
 8003cd2:	e035      	b.n	8003d40 <find_timer_config_index_of_pwm_channel+0x90>
	}

	for (uint8_t config_idx = 0; config_idx < PWM_TIMER_TOTAL_CNT; config_idx++)
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	77bb      	strb	r3, [r7, #30]
 8003cd8:	e02e      	b.n	8003d38 <find_timer_config_index_of_pwm_channel+0x88>
	{
		uint8_t total_pwm_of_timer = 
			m_last_bsp_pwm_config_ptr[config_idx].
 8003cda:	4b1c      	ldr	r3, [pc, #112]	@ (8003d4c <find_timer_config_index_of_pwm_channel+0x9c>)
 8003cdc:	6819      	ldr	r1, [r3, #0]
 8003cde:	7fba      	ldrb	r2, [r7, #30]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
		uint8_t total_pwm_of_timer = 
 8003cea:	7b1b      	ldrb	r3, [r3, #12]
 8003cec:	75fb      	strb	r3, [r7, #23]
			timer_channel_configs.total_timer_channel;
		
		for (size_t pwm_cfg_idx = 0; pwm_cfg_idx < total_pwm_of_timer; pwm_cfg_idx++)
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	e01a      	b.n	8003d2a <find_timer_config_index_of_pwm_channel+0x7a>
		{
			bsp_pwm_channel_idx_t pwm_channel_id = m_last_bsp_pwm_config_ptr[config_idx].
 8003cf4:	4b15      	ldr	r3, [pc, #84]	@ (8003d4c <find_timer_config_index_of_pwm_channel+0x9c>)
 8003cf6:	6819      	ldr	r1, [r3, #0]
 8003cf8:	7fba      	ldrb	r2, [r7, #30]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	1a9b      	subs	r3, r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
			timer_channel_configs.pwm_channels_ptr[pwm_cfg_idx].pwm_channel_id;
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4413      	add	r3, r2
			bsp_pwm_channel_idx_t pwm_channel_id = m_last_bsp_pwm_config_ptr[config_idx].
 8003d0c:	791b      	ldrb	r3, [r3, #4]
 8003d0e:	75bb      	strb	r3, [r7, #22]
			if(pwm_channel_id == bsp_pwm_channel)
 8003d10:	7dba      	ldrb	r2, [r7, #22]
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d105      	bne.n	8003d24 <find_timer_config_index_of_pwm_channel+0x74>
			{
				// pwm channel is found !!
				*timer_config_index_ptr = config_idx;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	7fba      	ldrb	r2, [r7, #30]
 8003d1c:	701a      	strb	r2, [r3, #0]
				pwm_channel_found_state = true;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	77fb      	strb	r3, [r7, #31]
				break;
 8003d22:	e006      	b.n	8003d32 <find_timer_config_index_of_pwm_channel+0x82>
		for (size_t pwm_cfg_idx = 0; pwm_cfg_idx < total_pwm_of_timer; pwm_cfg_idx++)
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	3301      	adds	r3, #1
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d3e0      	bcc.n	8003cf4 <find_timer_config_index_of_pwm_channel+0x44>
	for (uint8_t config_idx = 0; config_idx < PWM_TIMER_TOTAL_CNT; config_idx++)
 8003d32:	7fbb      	ldrb	r3, [r7, #30]
 8003d34:	3301      	adds	r3, #1
 8003d36:	77bb      	strb	r3, [r7, #30]
 8003d38:	7fbb      	ldrb	r3, [r7, #30]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0cd      	beq.n	8003cda <find_timer_config_index_of_pwm_channel+0x2a>
			}
		}
	}

	return pwm_channel_found_state;
 8003d3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3724      	adds	r7, #36	@ 0x24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	20000168 	.word	0x20000168

08003d50 <init_timer_pwm_channels>:


static void init_timer_pwm_channels(uint8_t timer_idx_of_pwm_channels)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08c      	sub	sp, #48	@ 0x30
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	4603      	mov	r3, r0
 8003d58:	71fb      	strb	r3, [r7, #7]
	uint8_t total_pwm_channel = m_last_bsp_pwm_config_ptr[timer_idx_of_pwm_channels].timer_channel_configs.total_timer_channel;
 8003d5a:	4b2c      	ldr	r3, [pc, #176]	@ (8003e0c <init_timer_pwm_channels+0xbc>)
 8003d5c:	6819      	ldr	r1, [r3, #0]
 8003d5e:	79fa      	ldrb	r2, [r7, #7]
 8003d60:	4613      	mov	r3, r2
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	7b1b      	ldrb	r3, [r3, #12]
 8003d6c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	for (uint8_t pwm_channel_cfg_idx = 0; pwm_channel_cfg_idx < total_pwm_channel; pwm_channel_cfg_idx++)
 8003d70:	2300      	movs	r3, #0
 8003d72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003d76:	e03d      	b.n	8003df4 <init_timer_pwm_channels+0xa4>
	{
		uint32_t pwm_channel_idx =
			m_last_bsp_pwm_config_ptr[timer_idx_of_pwm_channels].timer_channel_configs.
 8003d78:	4b24      	ldr	r3, [pc, #144]	@ (8003e0c <init_timer_pwm_channels+0xbc>)
 8003d7a:	6819      	ldr	r1, [r3, #0]
 8003d7c:	79fa      	ldrb	r2, [r7, #7]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	689a      	ldr	r2, [r3, #8]
			pwm_channels_ptr[pwm_channel_cfg_idx].pwm_channel_id;
 8003d8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4413      	add	r3, r2
 8003d92:	791b      	ldrb	r3, [r3, #4]
		uint32_t pwm_channel_idx =
 8003d94:	62bb      	str	r3, [r7, #40]	@ 0x28
		TIM_OC_InitTypeDef sConfigOC = {0};
 8003d96:	f107 030c 	add.w	r3, r7, #12
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	605a      	str	r2, [r3, #4]
 8003da0:	609a      	str	r2, [r3, #8]
 8003da2:	60da      	str	r2, [r3, #12]
 8003da4:	611a      	str	r2, [r3, #16]
 8003da6:	615a      	str	r2, [r3, #20]
 8003da8:	619a      	str	r2, [r3, #24]
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003daa:	2360      	movs	r3, #96	@ 0x60
 8003dac:	60fb      	str	r3, [r7, #12]
		sConfigOC.Pulse = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	613b      	str	r3, [r7, #16]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
		sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61bb      	str	r3, [r7, #24]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61fb      	str	r3, [r7, #28]
		sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	623b      	str	r3, [r7, #32]
		sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (HAL_TIM_PWM_ConfigChannel(&m_htim[timer_idx_of_pwm_channels], &sConfigOC, pwm_channel_idx) != HAL_OK)
 8003dc6:	79fa      	ldrb	r2, [r7, #7]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	4413      	add	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4a0f      	ldr	r2, [pc, #60]	@ (8003e10 <init_timer_pwm_channels+0xc0>)
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f107 010c 	add.w	r1, r7, #12
 8003dd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fe fbdc 	bl	8002598 <HAL_TIM_PWM_ConfigChannel>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <init_timer_pwm_channels+0x9a>
		{
			report_init_error();
 8003de6:	f000 faa7 	bl	8004338 <report_init_error>
	for (uint8_t pwm_channel_cfg_idx = 0; pwm_channel_cfg_idx < total_pwm_channel; pwm_channel_cfg_idx++)
 8003dea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003dee:	3301      	adds	r3, #1
 8003df0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003df4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003df8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d3bb      	bcc.n	8003d78 <init_timer_pwm_channels+0x28>
		}
	}
}
 8003e00:	bf00      	nop
 8003e02:	bf00      	nop
 8003e04:	3730      	adds	r7, #48	@ 0x30
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000168 	.word	0x20000168
 8003e10:	20000120 	.word	0x20000120

08003e14 <init_adc_sensor_driver>:
 *                               Must not be NULL.
 * 
 * @retval None
 */
void init_adc_sensor_driver(const adc_sensor_driver_config_t *adc_sensors_config)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
	if(NULL == adc_sensors_config)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d102      	bne.n	8003e28 <init_adc_sensor_driver+0x14>
	{
		report_development_error();
 8003e22:	f000 fa65 	bl	80042f0 <report_development_error>
		return;
 8003e26:	e002      	b.n	8003e2e <init_adc_sensor_driver+0x1a>
	}

	m_adc_sensor_driver_configs_ptr = adc_sensors_config;
 8003e28:	4a02      	ldr	r2, [pc, #8]	@ (8003e34 <init_adc_sensor_driver+0x20>)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6013      	str	r3, [r2, #0]
}
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	2000016c 	.word	0x2000016c

08003e38 <read_adc_sensor_value>:
 *                               Must not be NULL.
 * 
 * @retval None
 */
adc_sensor_state_e read_adc_sensor_value(uint8_t sensor_id , float *sensor_value_ptr)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	6039      	str	r1, [r7, #0]
 8003e42:	71fb      	strb	r3, [r7, #7]
	float read_data_for_adc_raw_voltage = 0.0f;
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	60fb      	str	r3, [r7, #12]
	bsp_adc_status_e raw_voltage_read_state = m_adc_sensor_driver_configs_ptr[sensor_id].
 8003e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ec8 <read_adc_sensor_value+0x90>)
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	4413      	add	r3, r2
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f107 020c 	add.w	r2, r7, #12
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	4798      	blx	r3
 8003e5e:	4603      	mov	r3, r0
 8003e60:	77bb      	strb	r3, [r7, #30]
	read_adc_sensor_raw_voltage_func(&read_data_for_adc_raw_voltage);

	float raw_voltage_factor = m_adc_sensor_driver_configs_ptr[sensor_id].raw_voltage_factor;
 8003e62:	4b19      	ldr	r3, [pc, #100]	@ (8003ec8 <read_adc_sensor_value+0x90>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	79fb      	ldrb	r3, [r7, #7]
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	4413      	add	r3, r2
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	61bb      	str	r3, [r7, #24]
	float voltage_ref = m_adc_sensor_driver_configs_ptr[sensor_id].reference_voltage_for_zero_output;
 8003e70:	4b15      	ldr	r3, [pc, #84]	@ (8003ec8 <read_adc_sensor_value+0x90>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	4413      	add	r3, r2
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	617b      	str	r3, [r7, #20]
	float volt_per_output_unit = m_adc_sensor_driver_configs_ptr[sensor_id].sensitivity_volt_per_output_unit;
 8003e7e:	4b12      	ldr	r3, [pc, #72]	@ (8003ec8 <read_adc_sensor_value+0x90>)
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	4413      	add	r3, r2
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	613b      	str	r3, [r7, #16]

	adc_sensor_state_e success_status = ADC_SENSOR_OK_e;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	77fb      	strb	r3, [r7, #31]

	if(BSP_ADC_STATE_OK_e == raw_voltage_read_state)
 8003e90:	7fbb      	ldrb	r3, [r7, #30]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d111      	bne.n	8003eba <read_adc_sensor_value+0x82>
	{
		*sensor_value_ptr =
			((read_data_for_adc_raw_voltage*raw_voltage_factor) - voltage_ref) / volt_per_output_unit;
 8003e96:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ea2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ea6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003eaa:	ed97 7a04 	vldr	s14, [r7, #16]
 8003eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
		*sensor_value_ptr =
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	edc3 7a00 	vstr	s15, [r3]
 8003eb8:	e001      	b.n	8003ebe <read_adc_sensor_value+0x86>

	}
	else
	{
		// low level notified an error already. It is not necessary in here.
		success_status = ADC_SENSOR_ERROR_e;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	77fb      	strb	r3, [r7, #31]
	}

	return success_status;
 8003ebe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3720      	adds	r7, #32
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	2000016c 	.word	0x2000016c

08003ecc <init_com_driver>:
 * Sets up internal pointers and starts software timers for periodic message transmission.
 *
 * @param[in] com_configs_ptr Pointer to communication configuration.
 */
void init_com_driver(const com_configs_t *com_configs_ptr)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	if(NULL != com_configs_ptr)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <init_com_driver+0x1a>
	{
		m_com_configs_ptr = (com_configs_t *)com_configs_ptr;
 8003eda:	4a06      	ldr	r2, [pc, #24]	@ (8003ef4 <init_com_driver+0x28>)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6013      	str	r3, [r2, #0]

        start_periodic_tx_messages_timers();
 8003ee0:	f000 f870 	bl	8003fc4 <start_periodic_tx_messages_timers>
	}
	else
	{
		report_development_error();
	}
}
 8003ee4:	e001      	b.n	8003eea <init_com_driver+0x1e>
		report_development_error();
 8003ee6:	f000 fa03 	bl	80042f0 <report_development_error>
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20000170 	.word	0x20000170

08003ef8 <trigger_send_of_message>:
 * periodicity or signal updates—only performs transmission with current data.
 *
 * @param[in] message_id The ID of the message to be transmitted.
 */
void trigger_send_of_message(com_message_id_t message_id)
{
 8003ef8:	b590      	push	{r4, r7, lr}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	4603      	mov	r3, r0
 8003f00:	80fb      	strh	r3, [r7, #6]
	send_message_over_related_bus(
	                m_com_configs_ptr->messages_ptr[message_id].transmission_bus_of_message,
 8003f02:	4b0e      	ldr	r3, [pc, #56]	@ (8003f3c <trigger_send_of_message+0x44>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6819      	ldr	r1, [r3, #0]
 8003f08:	88fa      	ldrh	r2, [r7, #6]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	440b      	add	r3, r1
 8003f14:	7a98      	ldrb	r0, [r3, #10]
	send_message_over_related_bus(
 8003f16:	4c0a      	ldr	r4, [pc, #40]	@ (8003f40 <trigger_send_of_message+0x48>)
					message_id,
	                &m_com_message_buffer[message_id][0],
	                m_com_configs_ptr->messages_ptr[message_id].message_data_length);
 8003f18:	4b08      	ldr	r3, [pc, #32]	@ (8003f3c <trigger_send_of_message+0x44>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6819      	ldr	r1, [r3, #0]
 8003f1e:	88fa      	ldrh	r2, [r7, #6]
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	891b      	ldrh	r3, [r3, #8]
	send_message_over_related_bus(
 8003f2c:	88f9      	ldrh	r1, [r7, #6]
 8003f2e:	4622      	mov	r2, r4
 8003f30:	f000 f823 	bl	8003f7a <send_message_over_related_bus>
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd90      	pop	{r4, r7, pc}
 8003f3c:	20000170 	.word	0x20000170
 8003f40:	20000170 	.word	0x20000170

08003f44 <send_signal_over_com>:
 * @param[in] signal_id ID of the signal to be sent.
 * @param[in] signal_value_ptr Pointer to the value of the signal to be sent.
 * @return true if successful, false otherwise.
 */
bool send_signal_over_com(com_signal_id_t signal_id , void *signal_value_ptr)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	6039      	str	r1, [r7, #0]
 8003f4e:	80fb      	strh	r3, [r7, #6]
	if(signal_id >= COM_SIGNAL_CNT)
	{
		report_development_error();
 8003f50:	f000 f9ce 	bl	80042f0 <report_development_error>
		return false;
 8003f54:	2300      	movs	r3, #0
	signal_to_message_locate((*signal_base_info_ptr),
						 signal_value_ptr,
						 &m_com_message_buffer[message_id][0]);

	return true;
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <send_periodic_message_timeout_cb>:
 * Called by the software timer and checks which message should be sent.
 *
 * @param[in] sw_timer_id ID of the triggered software timer.
 */
void send_periodic_message_timeout_cb(software_timer_id_t sw_timer_id)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b085      	sub	sp, #20
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	4603      	mov	r3, r0
 8003f66:	71fb      	strb	r3, [r7, #7]
    for (uint8_t msg_idx = 0U; msg_idx < COM_MESSAGE_CNT; msg_idx++)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	73fb      	strb	r3, [r7, #15]
 8003f6c:	bf00      	nop
                &m_com_message_buffer[msg_idx][0],
                m_com_configs_ptr->messages_ptr[msg_idx].message_data_length);
        }
    }
    
}
 8003f6e:	bf00      	nop
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <send_message_over_related_bus>:
 */
static void send_message_over_related_bus(com_message_bus_e message_bus,
                                         com_message_id_t message_id,
                                         uint8_t *message_data_ptr,
                                         uint16_t message_length)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60ba      	str	r2, [r7, #8]
 8003f82:	461a      	mov	r2, r3
 8003f84:	4603      	mov	r3, r0
 8003f86:	73fb      	strb	r3, [r7, #15]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	81bb      	strh	r3, [r7, #12]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	80fb      	strh	r3, [r7, #6]
    switch (message_bus)
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d00d      	beq.n	8003fb2 <send_message_over_related_bus+0x38>
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	dc0d      	bgt.n	8003fb6 <send_message_over_related_bus+0x3c>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <send_message_over_related_bus+0x2a>
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d00b      	beq.n	8003fba <send_message_over_related_bus+0x40>
        {
            // message transmission bus easly change in configuration.
            break;
        }
    default:
        break;
 8003fa2:	e008      	b.n	8003fb6 <send_message_over_related_bus+0x3c>
            send_message_over_canbus(message_id,message_data_ptr,message_length);
 8003fa4:	88fa      	ldrh	r2, [r7, #6]
 8003fa6:	89bb      	ldrh	r3, [r7, #12]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff fabc 	bl	8003528 <send_message_over_canbus>
            break;
 8003fb0:	e004      	b.n	8003fbc <send_message_over_related_bus+0x42>
            break;
 8003fb2:	bf00      	nop
 8003fb4:	e002      	b.n	8003fbc <send_message_over_related_bus+0x42>
        break;
 8003fb6:	bf00      	nop
 8003fb8:	e000      	b.n	8003fbc <send_message_over_related_bus+0x42>
            break;
 8003fba:	bf00      	nop
    }
}
 8003fbc:	bf00      	nop
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <start_periodic_tx_messages_timers>:

/**
 * @brief Starts software timers for periodic transmission of messages.
 */
static void start_periodic_tx_messages_timers()
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
    for (uint8_t msg_idx = 0; msg_idx < COM_MESSAGE_CNT; msg_idx++)
 8003fca:	2300      	movs	r3, #0
 8003fcc:	71fb      	strb	r3, [r7, #7]
 8003fce:	bf00      	nop
                m_com_configs_ptr->messages_ptr[msg_idx].periodic_send_info->send_period_ms;

            start_software_timer(sw_timer_id , tx_period_ms);
        }
    }
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <init_software_timer_module>:
static software_timer_general_cfg_t *m_software_timer_general_config_ptr;

static void timer_timeout_process(software_timer_id_t sw_timer_id);

void init_software_timer_module(const software_timer_general_cfg_t *timer_general_cfg_ptr)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	if(NULL == timer_general_cfg_ptr)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d102      	bne.n	8003ff0 <init_software_timer_module+0x14>
	{
		report_development_error();
 8003fea:	f000 f981 	bl	80042f0 <report_development_error>
		return;
 8003fee:	e002      	b.n	8003ff6 <init_software_timer_module+0x1a>
	}
	m_software_timer_general_config_ptr = (software_timer_general_cfg_t*)timer_general_cfg_ptr;
 8003ff0:	4a02      	ldr	r2, [pc, #8]	@ (8003ffc <init_software_timer_module+0x20>)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6013      	str	r3, [r2, #0]
}
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20000198 	.word	0x20000198

08004000 <start_software_timer>:

void start_software_timer(software_timer_id_t sw_timer_id,uint32_t timeout_value)
{
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	6039      	str	r1, [r7, #0]
 800400a:	71fb      	strb	r3, [r7, #7]
	if(sw_timer_id >= SOFTWARE_TIMER_CNT)
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d902      	bls.n	8004018 <start_software_timer+0x18>
	{
		report_development_error();
 8004012:	f000 f96d 	bl	80042f0 <report_development_error>
		return;
 8004016:	e020      	b.n	800405a <start_software_timer+0x5a>
	}
	m_software_timers[sw_timer_id].start_tick =
		m_software_timer_general_config_ptr->get_timer_tick_ms_func();
 8004018:	4b11      	ldr	r3, [pc, #68]	@ (8004060 <start_software_timer+0x60>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
	m_software_timers[sw_timer_id].start_tick =
 800401e:	79fc      	ldrb	r4, [r7, #7]
		m_software_timer_general_config_ptr->get_timer_tick_ms_func();
 8004020:	4798      	blx	r3
 8004022:	4602      	mov	r2, r0
	m_software_timers[sw_timer_id].start_tick =
 8004024:	490f      	ldr	r1, [pc, #60]	@ (8004064 <start_software_timer+0x64>)
 8004026:	4623      	mov	r3, r4
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	4423      	add	r3, r4
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	3304      	adds	r3, #4
 8004032:	601a      	str	r2, [r3, #0]

	m_software_timers[sw_timer_id].timeout_value = timeout_value;
 8004034:	79fa      	ldrb	r2, [r7, #7]
 8004036:	490b      	ldr	r1, [pc, #44]	@ (8004064 <start_software_timer+0x64>)
 8004038:	4613      	mov	r3, r2
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	601a      	str	r2, [r3, #0]

	m_software_timers[sw_timer_id].state = TIMER_STATE_RUNNING_e;
 8004046:	79fa      	ldrb	r2, [r7, #7]
 8004048:	4906      	ldr	r1, [pc, #24]	@ (8004064 <start_software_timer+0x64>)
 800404a:	4613      	mov	r3, r2
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	4413      	add	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	440b      	add	r3, r1
 8004054:	3308      	adds	r3, #8
 8004056:	2201      	movs	r2, #1
 8004058:	701a      	strb	r2, [r3, #0]
}
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	bd90      	pop	{r4, r7, pc}
 8004060:	20000198 	.word	0x20000198
 8004064:	20000174 	.word	0x20000174

08004068 <stop_software_timer>:

void stop_software_timer(software_timer_id_t sw_timer_id)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	71fb      	strb	r3, [r7, #7]
	if(sw_timer_id >= SOFTWARE_TIMER_CNT)
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d902      	bls.n	800407e <stop_software_timer+0x16>
	{
		report_development_error();
 8004078:	f000 f93a 	bl	80042f0 <report_development_error>
		return;
 800407c:	e009      	b.n	8004092 <stop_software_timer+0x2a>
	}

	m_software_timers[sw_timer_id].state = TIMER_STATE_STOP_e;
 800407e:	79fa      	ldrb	r2, [r7, #7]
 8004080:	4905      	ldr	r1, [pc, #20]	@ (8004098 <stop_software_timer+0x30>)
 8004082:	4613      	mov	r3, r2
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	440b      	add	r3, r1
 800408c:	3308      	adds	r3, #8
 800408e:	2200      	movs	r2, #0
 8004090:	701a      	strb	r2, [r3, #0]
}
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20000174 	.word	0x20000174

0800409c <run_all_software_timers>:

void run_all_software_timers(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
	for(uint8_t timer_idx = 0U; timer_idx < SOFTWARE_TIMER_CNT; timer_idx++)
 80040a2:	2300      	movs	r3, #0
 80040a4:	71fb      	strb	r3, [r7, #7]
 80040a6:	e011      	b.n	80040cc <run_all_software_timers+0x30>
	{
		if(TIMER_STATE_TIMEOUT_e == m_software_timers[timer_idx].state)
 80040a8:	79fa      	ldrb	r2, [r7, #7]
 80040aa:	490c      	ldr	r1, [pc, #48]	@ (80040dc <run_all_software_timers+0x40>)
 80040ac:	4613      	mov	r3, r2
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	3308      	adds	r3, #8
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d103      	bne.n	80040c6 <run_all_software_timers+0x2a>
		{
			timer_timeout_process(timer_idx);
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 f80d 	bl	80040e0 <timer_timeout_process>
	for(uint8_t timer_idx = 0U; timer_idx < SOFTWARE_TIMER_CNT; timer_idx++)
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	3301      	adds	r3, #1
 80040ca:	71fb      	strb	r3, [r7, #7]
 80040cc:	79fb      	ldrb	r3, [r7, #7]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d9ea      	bls.n	80040a8 <run_all_software_timers+0xc>
		}
	}
}
 80040d2:	bf00      	nop
 80040d4:	bf00      	nop
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20000174 	.word	0x20000174

080040e0 <timer_timeout_process>:
	
	return m_software_timers[sw_timer_id].state;
}

static void timer_timeout_process(software_timer_id_t sw_timer_id)
{
 80040e0:	b590      	push	{r4, r7, lr}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	4603      	mov	r3, r0
 80040e8:	71fb      	strb	r3, [r7, #7]
	timer_timeout_cb_func_t timer_callback_func =
			m_software_timer_general_config_ptr->software_timer_cfg_ptr[sw_timer_id].
 80040ea:	4b2f      	ldr	r3, [pc, #188]	@ (80041a8 <timer_timeout_process+0xc8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	79fb      	ldrb	r3, [r7, #7]
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4413      	add	r3, r2
	timer_timeout_cb_func_t timer_callback_func =
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	60fb      	str	r3, [r7, #12]
			timeout_callback_func;

	if(NULL != timer_callback_func)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <timer_timeout_process+0x28>
	{
		timer_callback_func(sw_timer_id);
 8004100:	79fa      	ldrb	r2, [r7, #7]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4610      	mov	r0, r2
 8004106:	4798      	blx	r3
	}

	timer_reload_option_e timer_reload_option =
			m_software_timer_general_config_ptr->software_timer_cfg_ptr[sw_timer_id].
 8004108:	4b27      	ldr	r3, [pc, #156]	@ (80041a8 <timer_timeout_process+0xc8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	79fb      	ldrb	r3, [r7, #7]
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	4413      	add	r3, r2
	timer_reload_option_e timer_reload_option =
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	72fb      	strb	r3, [r7, #11]
			reload_option;

	if(TIMER_RELOAD_AUTO_e == timer_reload_option)
 8004118:	7afb      	ldrb	r3, [r7, #11]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d118      	bne.n	8004150 <timer_timeout_process+0x70>
	{
		m_software_timers[sw_timer_id].start_tick =
				m_software_timer_general_config_ptr->get_timer_tick_ms_func();
 800411e:	4b22      	ldr	r3, [pc, #136]	@ (80041a8 <timer_timeout_process+0xc8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
		m_software_timers[sw_timer_id].start_tick =
 8004124:	79fc      	ldrb	r4, [r7, #7]
				m_software_timer_general_config_ptr->get_timer_tick_ms_func();
 8004126:	4798      	blx	r3
 8004128:	4602      	mov	r2, r0
		m_software_timers[sw_timer_id].start_tick =
 800412a:	4920      	ldr	r1, [pc, #128]	@ (80041ac <timer_timeout_process+0xcc>)
 800412c:	4623      	mov	r3, r4
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	4423      	add	r3, r4
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	3304      	adds	r3, #4
 8004138:	601a      	str	r2, [r3, #0]


		m_software_timers[sw_timer_id].state = TIMER_STATE_RUNNING_e;
 800413a:	79fa      	ldrb	r2, [r7, #7]
 800413c:	491b      	ldr	r1, [pc, #108]	@ (80041ac <timer_timeout_process+0xcc>)
 800413e:	4613      	mov	r3, r2
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	4413      	add	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	440b      	add	r3, r1
 8004148:	3308      	adds	r3, #8
 800414a:	2201      	movs	r2, #1
 800414c:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* MISRA */
	}
}
 800414e:	e027      	b.n	80041a0 <timer_timeout_process+0xc0>
	else if(TIMER_RELOAD_PERIODIC_e == timer_reload_option)
 8004150:	7afb      	ldrb	r3, [r7, #11]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d124      	bne.n	80041a0 <timer_timeout_process+0xc0>
		m_software_timers[sw_timer_id].start_tick +=
 8004156:	79fa      	ldrb	r2, [r7, #7]
 8004158:	4914      	ldr	r1, [pc, #80]	@ (80041ac <timer_timeout_process+0xcc>)
 800415a:	4613      	mov	r3, r2
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	440b      	add	r3, r1
 8004164:	3304      	adds	r3, #4
 8004166:	6819      	ldr	r1, [r3, #0]
			m_software_timers[sw_timer_id].timeout_value;
 8004168:	79fa      	ldrb	r2, [r7, #7]
 800416a:	4810      	ldr	r0, [pc, #64]	@ (80041ac <timer_timeout_process+0xcc>)
 800416c:	4613      	mov	r3, r2
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4403      	add	r3, r0
 8004176:	681b      	ldr	r3, [r3, #0]
		m_software_timers[sw_timer_id].start_tick +=
 8004178:	79fa      	ldrb	r2, [r7, #7]
 800417a:	4419      	add	r1, r3
 800417c:	480b      	ldr	r0, [pc, #44]	@ (80041ac <timer_timeout_process+0xcc>)
 800417e:	4613      	mov	r3, r2
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4403      	add	r3, r0
 8004188:	3304      	adds	r3, #4
 800418a:	6019      	str	r1, [r3, #0]
		m_software_timers[sw_timer_id].state = TIMER_STATE_RUNNING_e;
 800418c:	79fa      	ldrb	r2, [r7, #7]
 800418e:	4907      	ldr	r1, [pc, #28]	@ (80041ac <timer_timeout_process+0xcc>)
 8004190:	4613      	mov	r3, r2
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	4413      	add	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	3308      	adds	r3, #8
 800419c:	2201      	movs	r2, #1
 800419e:	701a      	strb	r2, [r3, #0]
}
 80041a0:	bf00      	nop
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd90      	pop	{r4, r7, pc}
 80041a8:	20000198 	.word	0x20000198
 80041ac:	20000174 	.word	0x20000174

080041b0 <PID_Step>:

#include "pid_controller.h"

float PID_Step(pid_controller_t *pid_parameters_ptr, float sensed_value, float reference_point)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b089      	sub	sp, #36	@ 0x24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80041bc:	edc7 0a01 	vstr	s1, [r7, #4]
    float command;
    float command_sat;
    float derivation_measure;

    /* Error calculation */
    calculated_error = reference_point - sensed_value;
 80041c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80041c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80041c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041cc:	edc7 7a06 	vstr	s15, [r7, #24]

    /* Integral term calculation - including anti-windup */
    pid_parameters_ptr->integral += 
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	ed93 7a07 	vldr	s14, [r3, #28]
        pid_parameters_ptr->Ki*calculated_error*pid_parameters_ptr->TimeStep + 
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	edd3 6a01 	vldr	s13, [r3, #4]
 80041dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80041e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80041ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pid_parameters_ptr->Kaw*
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	ed93 6a03 	vldr	s12, [r3, #12]
        (pid_parameters_ptr->command_sat_prev - pid_parameters_ptr->command_prev)*
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	edd3 5a09 	vldr	s11, [r3, #36]	@ 0x24
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004200:	ee75 7ae7 	vsub.f32	s15, s11, s15
        pid_parameters_ptr->Kaw*
 8004204:	ee26 6a27 	vmul.f32	s12, s12, s15
        pid_parameters_ptr->TimeStep;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	edd3 7a04 	vldr	s15, [r3, #16]
        (pid_parameters_ptr->command_sat_prev - pid_parameters_ptr->command_prev)*
 800420e:	ee66 7a27 	vmul.f32	s15, s12, s15
        pid_parameters_ptr->Ki*calculated_error*pid_parameters_ptr->TimeStep + 
 8004212:	ee76 7aa7 	vadd.f32	s15, s13, s15
    pid_parameters_ptr->integral += 
 8004216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	edc3 7a07 	vstr	s15, [r3, #28]
    
    /* Derivative term calculation using filtered derivative method */
    derivation_measure = (calculated_error - pid_parameters_ptr->error_previous )/(pid_parameters_ptr->TimeStep);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	edd3 7a08 	vldr	s15, [r3, #32]
 8004226:	ed97 7a06 	vldr	s14, [r7, #24]
 800422a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	ed93 7a04 	vldr	s14, [r3, #16]
 8004234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004238:	edc7 7a05 	vstr	s15, [r7, #20]
    pid_parameters_ptr->error_previous = calculated_error;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	621a      	str	r2, [r3, #32]

    /* Summing the 3 terms */
    command = pid_parameters_ptr->Kp*calculated_error + pid_parameters_ptr->integral + pid_parameters_ptr->Kd*derivation_measure;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	ed93 7a00 	vldr	s14, [r3]
 8004248:	edd7 7a06 	vldr	s15, [r7, #24]
 800424c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	edd3 7a07 	vldr	s15, [r3, #28]
 8004256:	ee37 7a27 	vadd.f32	s14, s14, s15
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004260:	edd7 7a05 	vldr	s15, [r7, #20]
 8004264:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800426c:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Remember command at previous step */
    pid_parameters_ptr->command_prev = command;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Saturate command */
    if (command > pid_parameters_ptr->controller_output_max)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	edd3 7a05 	vldr	s15, [r3, #20]
 800427c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004280:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004288:	dd03      	ble.n	8004292 <PID_Step+0xe2>
    {
        command_sat = pid_parameters_ptr->controller_output_max;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	61fb      	str	r3, [r7, #28]
 8004290:	e00f      	b.n	80042b2 <PID_Step+0x102>
    }
    else if (command < pid_parameters_ptr->controller_output_min)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	edd3 7a06 	vldr	s15, [r3, #24]
 8004298:	ed97 7a04 	vldr	s14, [r7, #16]
 800429c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a4:	d503      	bpl.n	80042ae <PID_Step+0xfe>
    {
        command_sat = pid_parameters_ptr->controller_output_min;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	61fb      	str	r3, [r7, #28]
 80042ac:	e001      	b.n	80042b2 <PID_Step+0x102>
    }
    else
    {
        command_sat = command;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	61fb      	str	r3, [r7, #28]
    }

    /* Remember saturated command at previous step */
    pid_parameters_ptr->command_sat_prev = command_sat;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	625a      	str	r2, [r3, #36]	@ 0x24

    return command_sat;
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	ee07 3a90 	vmov	s15, r3
}
 80042be:	eeb0 0a67 	vmov.f32	s0, s15
 80042c2:	3724      	adds	r7, #36	@ 0x24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <report_sensor_error>:
 *
 * Sets the corresponding bit in the error status variable and transmits it
 * over the communication layer.
 */
void report_sensor_error(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
	m_system_errors |= (1U << ERROR_TYPE_SENSOR);
 80042d0:	4b06      	ldr	r3, [pc, #24]	@ (80042ec <report_sensor_error+0x20>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	f043 0301 	orr.w	r3, r3, #1
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	4b04      	ldr	r3, [pc, #16]	@ (80042ec <report_sensor_error+0x20>)
 80042dc:	701a      	strb	r2, [r3, #0]

	send_signal_over_com(COM_SYSTEM_ERROR_STATE_SIGNAL_ID,&m_system_errors);
 80042de:	4903      	ldr	r1, [pc, #12]	@ (80042ec <report_sensor_error+0x20>)
 80042e0:	2006      	movs	r0, #6
 80042e2:	f7ff fe2f 	bl	8003f44 <send_signal_over_com>
}
 80042e6:	bf00      	nop
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	2000019c 	.word	0x2000019c

080042f0 <report_development_error>:
 *
 * Typically used for assertion failures or invalid configuration. Sets the
 * appropriate error bit and notifies via communication.
 */
void report_development_error(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
	m_system_errors |= (1U << ERROR_TYPE_DEVELOPMENT);
 80042f4:	4b06      	ldr	r3, [pc, #24]	@ (8004310 <report_development_error+0x20>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	f043 0302 	orr.w	r3, r3, #2
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	4b04      	ldr	r3, [pc, #16]	@ (8004310 <report_development_error+0x20>)
 8004300:	701a      	strb	r2, [r3, #0]

	send_signal_over_com(COM_SYSTEM_ERROR_STATE_SIGNAL_ID,&m_system_errors);
 8004302:	4903      	ldr	r1, [pc, #12]	@ (8004310 <report_development_error+0x20>)
 8004304:	2006      	movs	r0, #6
 8004306:	f7ff fe1d 	bl	8003f44 <send_signal_over_com>
}
 800430a:	bf00      	nop
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	2000019c 	.word	0x2000019c

08004314 <report_over_current>:
 * @brief Reports an overcurrent condition.
 *
 * Marks the overcurrent bit in the system error status and sends the update.
 */
void report_over_current(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
	m_system_errors |= (1U << ERROR_TYPE_OVERCURRENT);
 8004318:	4b06      	ldr	r3, [pc, #24]	@ (8004334 <report_over_current+0x20>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	f043 0304 	orr.w	r3, r3, #4
 8004320:	b2da      	uxtb	r2, r3
 8004322:	4b04      	ldr	r3, [pc, #16]	@ (8004334 <report_over_current+0x20>)
 8004324:	701a      	strb	r2, [r3, #0]

	send_signal_over_com(COM_SYSTEM_ERROR_STATE_SIGNAL_ID,&m_system_errors);
 8004326:	4903      	ldr	r1, [pc, #12]	@ (8004334 <report_over_current+0x20>)
 8004328:	2006      	movs	r0, #6
 800432a:	f7ff fe0b 	bl	8003f44 <send_signal_over_com>
}
 800432e:	bf00      	nop
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	2000019c 	.word	0x2000019c

08004338 <report_init_error>:
 *
 * Used to indicate failure during hardware or module initialization. Sets
 * the init error bit and updates the communication layer.
 */
void report_init_error(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
	m_system_errors |= (1U << ERROR_TYPE_INITIALIZE);
 800433c:	4b06      	ldr	r3, [pc, #24]	@ (8004358 <report_init_error+0x20>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	f043 0308 	orr.w	r3, r3, #8
 8004344:	b2da      	uxtb	r2, r3
 8004346:	4b04      	ldr	r3, [pc, #16]	@ (8004358 <report_init_error+0x20>)
 8004348:	701a      	strb	r2, [r3, #0]

	send_signal_over_com(COM_SYSTEM_ERROR_STATE_SIGNAL_ID,&m_system_errors);
 800434a:	4903      	ldr	r1, [pc, #12]	@ (8004358 <report_init_error+0x20>)
 800434c:	2006      	movs	r0, #6
 800434e:	f7ff fdf9 	bl	8003f44 <send_signal_over_com>
}
 8004352:	bf00      	nop
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	2000019c 	.word	0x2000019c

0800435c <get_system_overcurrent_error_status>:
 * @brief Returns whether an overcurrent system error is currently active.
 * 
 * @return uint8_t 1 if the overcurrent error bit is set, 0 otherwise.
 */
bool get_system_overcurrent_error_status(void)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
	bool is_overcurrent_exist = false;
 8004362:	2300      	movs	r3, #0
 8004364:	71fb      	strb	r3, [r7, #7]
	if(1U == ((m_system_errors >> ERROR_TYPE_OVERCURRENT) & 0x01U))
 8004366:	4b08      	ldr	r3, [pc, #32]	@ (8004388 <get_system_overcurrent_error_status+0x2c>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	089b      	lsrs	r3, r3, #2
 800436c:	b2db      	uxtb	r3, r3
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <get_system_overcurrent_error_status+0x1e>
	{
		is_overcurrent_exist = true;
 8004376:	2301      	movs	r3, #1
 8004378:	71fb      	strb	r3, [r7, #7]
	}
    return is_overcurrent_exist;
 800437a:	79fb      	ldrb	r3, [r7, #7]
}
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	2000019c 	.word	0x2000019c

0800438c <run_state_machine_of_system_manager>:
 * @details This function controls the main operating flow of the system, transitioning
 * between initialization, running, error, safe-running, and idle states. It is intended
 * to be called periodically in the main application loop.
 */
void run_state_machine_of_system_manager(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
	switch(m_system_state)
 8004392:	4b37      	ldr	r3, [pc, #220]	@ (8004470 <run_state_machine_of_system_manager+0xe4>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b04      	cmp	r3, #4
 8004398:	d863      	bhi.n	8004462 <run_state_machine_of_system_manager+0xd6>
 800439a:	a201      	add	r2, pc, #4	@ (adr r2, 80043a0 <run_state_machine_of_system_manager+0x14>)
 800439c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a0:	080043b5 	.word	0x080043b5
 80043a4:	08004409 	.word	0x08004409
 80043a8:	0800442b 	.word	0x0800442b
 80043ac:	08004457 	.word	0x08004457
 80043b0:	08004463 	.word	0x08004463
			// it may be necessary for power management
			break;
		}
		case SYSTEM_STATE_INIT_e:
		{
			HAL_Init();
 80043b4:	f7fc f99e 	bl	80006f4 <HAL_Init>
			SystemClock_Config();
 80043b8:	f000 f8ee 	bl	8004598 <SystemClock_Config>
			init_bsp_gpio(g_pin_cfg_container);
 80043bc:	482d      	ldr	r0, [pc, #180]	@ (8004474 <run_state_machine_of_system_manager+0xe8>)
 80043be:	f7ff f90f 	bl	80035e0 <init_bsp_gpio>
			init_bsp_adc();
 80043c2:	f7fe ff31 	bl	8003228 <init_bsp_adc>
			init_bsp_pwm(g_bsp_pwm_timer_configs);
 80043c6:	482c      	ldr	r0, [pc, #176]	@ (8004478 <run_state_machine_of_system_manager+0xec>)
 80043c8:	f7ff fa10 	bl	80037ec <init_bsp_pwm>
			init_bsp_can(&g_bsp_can_configurations);
 80043cc:	482b      	ldr	r0, [pc, #172]	@ (800447c <run_state_machine_of_system_manager+0xf0>)
 80043ce:	f7ff f853 	bl	8003478 <init_bsp_can>
			init_software_timer_module(&g_software_timer_general_config);
 80043d2:	482b      	ldr	r0, [pc, #172]	@ (8004480 <run_state_machine_of_system_manager+0xf4>)
 80043d4:	f7ff fe02 	bl	8003fdc <init_software_timer_module>
			init_adc_sensor_driver(g_adc_sensors_configuration);
 80043d8:	482a      	ldr	r0, [pc, #168]	@ (8004484 <run_state_machine_of_system_manager+0xf8>)
 80043da:	f7ff fd1b 	bl	8003e14 <init_adc_sensor_driver>
			init_com_driver(&g_com_message_configs);
 80043de:	482a      	ldr	r0, [pc, #168]	@ (8004488 <run_state_machine_of_system_manager+0xfc>)
 80043e0:	f7ff fd74 	bl	8003ecc <init_com_driver>
			init_buck_converter(&g_buck_converter_config);
 80043e4:	4829      	ldr	r0, [pc, #164]	@ (800448c <run_state_machine_of_system_manager+0x100>)
 80043e6:	f7fe fe45 	bl	8003074 <init_buck_converter>

			send_signal_over_com(COM_SYSTEM_STATE_SIGNAL_ID,(uint8_t*)&m_system_state);
 80043ea:	4921      	ldr	r1, [pc, #132]	@ (8004470 <run_state_machine_of_system_manager+0xe4>)
 80043ec:	2005      	movs	r0, #5
 80043ee:	f7ff fda9 	bl	8003f44 <send_signal_over_com>
			trigger_send_of_message(COM_SYSTEM_INFO_MESSAGE_ID);
 80043f2:	2002      	movs	r0, #2
 80043f4:	f7ff fd80 	bl	8003ef8 <trigger_send_of_message>

			start_software_timer(SYSTEM_TEMPERATURE_PROCESS_TIMER_ID,
 80043f8:	2164      	movs	r1, #100	@ 0x64
 80043fa:	2002      	movs	r0, #2
 80043fc:	f7ff fe00 	bl	8004000 <start_software_timer>
								 SYSTEM_TEMPERATURE_SENSE_PERIOD_MS);

			m_system_state = SYSTEM_STATE_RUNNING_e;
 8004400:	4b1b      	ldr	r3, [pc, #108]	@ (8004470 <run_state_machine_of_system_manager+0xe4>)
 8004402:	2201      	movs	r2, #1
 8004404:	701a      	strb	r2, [r3, #0]

			break;
 8004406:	e02f      	b.n	8004468 <run_state_machine_of_system_manager+0xdc>
		}
		case SYSTEM_STATE_RUNNING_e:
		{
			send_signal_over_com(COM_SYSTEM_STATE_SIGNAL_ID,(uint8_t*)&m_system_state);
 8004408:	4919      	ldr	r1, [pc, #100]	@ (8004470 <run_state_machine_of_system_manager+0xe4>)
 800440a:	2005      	movs	r0, #5
 800440c:	f7ff fd9a 	bl	8003f44 <send_signal_over_com>
			// all application process connected a software timer callback so it is enough
			//to call run_all_software_timers
			run_all_software_timers();
 8004410:	f7ff fe44 	bl	800409c <run_all_software_timers>

			bool over_current_error_flag =
					get_system_overcurrent_error_status();
 8004414:	f7ff ffa2 	bl	800435c <get_system_overcurrent_error_status>
 8004418:	4603      	mov	r3, r0
 800441a:	71fb      	strb	r3, [r7, #7]

			if(true == over_current_error_flag)
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d021      	beq.n	8004466 <run_state_machine_of_system_manager+0xda>
			{
				m_system_state = SYSTEM_STATE_ERROR_e;
 8004422:	4b13      	ldr	r3, [pc, #76]	@ (8004470 <run_state_machine_of_system_manager+0xe4>)
 8004424:	2202      	movs	r2, #2
 8004426:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004428:	e01d      	b.n	8004466 <run_state_machine_of_system_manager+0xda>
		}
		case SYSTEM_STATE_ERROR_e:
		{
			send_signal_over_com(COM_SYSTEM_STATE_SIGNAL_ID,(uint8_t*)&m_system_state);
 800442a:	4911      	ldr	r1, [pc, #68]	@ (8004470 <run_state_machine_of_system_manager+0xe4>)
 800442c:	2005      	movs	r0, #5
 800442e:	f7ff fd89 	bl	8003f44 <send_signal_over_com>
			trigger_send_of_message(COM_SYSTEM_INFO_MESSAGE_ID);
 8004432:	2002      	movs	r0, #2
 8004434:	f7ff fd60 	bl	8003ef8 <trigger_send_of_message>
			// Stop buck converter controller task
			stop_software_timer(BUCK_CONVERTER_PID_SOFTWARE_TIMER_ID);
 8004438:	2000      	movs	r0, #0
 800443a:	f7ff fe15 	bl	8004068 <stop_software_timer>
			// Reset pwm duty of buck converter mosfet
			set_pwm_duty(PWM_TIMER_ID_FOR_BUCK_MOSFET,0.0f);
 800443e:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8004490 <run_state_machine_of_system_manager+0x104>
 8004442:	2000      	movs	r0, #0
 8004444:	f7ff fb72 	bl	8003b2c <set_pwm_duty>
			// stop buck converter mosfet PWM
			stop_pwm_channel(PWM_TIMER_ID_FOR_BUCK_MOSFET);
 8004448:	2000      	movs	r0, #0
 800444a:	f7ff fb2d 	bl	8003aa8 <stop_pwm_channel>

			m_system_state = SYSTEM_STATE_SAFE_RUNNING_e;
 800444e:	4b08      	ldr	r3, [pc, #32]	@ (8004470 <run_state_machine_of_system_manager+0xe4>)
 8004450:	2203      	movs	r2, #3
 8004452:	701a      	strb	r2, [r3, #0]
			break;
 8004454:	e008      	b.n	8004468 <run_state_machine_of_system_manager+0xdc>
		}

		case SYSTEM_STATE_SAFE_RUNNING_e:
		{
			send_signal_over_com(COM_SYSTEM_STATE_SIGNAL_ID,(uint8_t*)&m_system_state);
 8004456:	4906      	ldr	r1, [pc, #24]	@ (8004470 <run_state_machine_of_system_manager+0xe4>)
 8004458:	2005      	movs	r0, #5
 800445a:	f7ff fd73 	bl	8003f44 <send_signal_over_com>

			run_all_software_timers(); // only commmunication tasks are running.
 800445e:	f7ff fe1d 	bl	800409c <run_all_software_timers>
		}

		default:
		{

			break;
 8004462:	bf00      	nop
 8004464:	e000      	b.n	8004468 <run_state_machine_of_system_manager+0xdc>
			break;
 8004466:	bf00      	nop
		}
	}
}
 8004468:	bf00      	nop
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	2000019d 	.word	0x2000019d
 8004474:	0800475c 	.word	0x0800475c
 8004478:	08004794 	.word	0x08004794
 800447c:	0800473c 	.word	0x0800473c
 8004480:	08004860 	.word	0x08004860
 8004484:	080046d0 	.word	0x080046d0
 8004488:	08004844 	.word	0x08004844
 800448c:	08004700 	.word	0x08004700
 8004490:	00000000 	.word	0x00000000

08004494 <calculate_system_temperature>:
 *
 * @details Temperature is read from an ADC-based sensor, scaled to a communication format,
 * and sent via CAN or another protocol defined in the communication layer.
 */
void calculate_system_temperature(software_timer_id_t sw_timer_id )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	4603      	mov	r3, r0
 800449c:	71fb      	strb	r3, [r7, #7]
	float system_temperature = 0.0f;
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]
	read_adc_sensor_value(TEMPERATURE_LM35_SENSOR_ID,&system_temperature);
 80044a4:	f107 030c 	add.w	r3, r7, #12
 80044a8:	4619      	mov	r1, r3
 80044aa:	2002      	movs	r0, #2
 80044ac:	f7ff fcc4 	bl	8003e38 <read_adc_sensor_value>
	uint16_t raw_com_value =
			scale_temperature_for_send_over_com(system_temperature,
 80044b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80044b4:	ed9f 2a0b 	vldr	s4, [pc, #44]	@ 80044e4 <calculate_system_temperature+0x50>
 80044b8:	eddf 1a0b 	vldr	s3, [pc, #44]	@ 80044e8 <calculate_system_temperature+0x54>
 80044bc:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 80044ec <calculate_system_temperature+0x58>
 80044c0:	eddf 0a09 	vldr	s1, [pc, #36]	@ 80044e8 <calculate_system_temperature+0x54>
 80044c4:	eeb0 0a67 	vmov.f32	s0, s15
 80044c8:	f000 f812 	bl	80044f0 <scale_temperature_for_send_over_com>
 80044cc:	4603      	mov	r3, r0
	uint16_t raw_com_value =
 80044ce:	817b      	strh	r3, [r7, #10]
												SYSTEM_TEMPERATURE_SCALE_MIN,
												SYSTEM_TEMPERATURE_SCALE_MAX,
												SYSTEM_TEMPERATURE_SCALE_ZERO_OFFSET,
												SYSTEM_TEMPERATURE_SCALE_FACTOR);

	send_signal_over_com(COM_SYSTEM_TEMPERATURE_SIGNAL_ID,&raw_com_value);
 80044d0:	f107 030a 	add.w	r3, r7, #10
 80044d4:	4619      	mov	r1, r3
 80044d6:	2004      	movs	r0, #4
 80044d8:	f7ff fd34 	bl	8003f44 <send_signal_over_com>
}
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	3dcccccd 	.word	0x3dcccccd
 80044e8:	00000000 	.word	0x00000000
 80044ec:	428c0000 	.word	0x428c0000

080044f0 <scale_temperature_for_send_over_com>:
static uint16_t scale_temperature_for_send_over_com(float temperature,
													float scale_min,
													float scale_max,
													float zero_offset,
													float factor)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b08b      	sub	sp, #44	@ 0x2c
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	ed87 0a05 	vstr	s0, [r7, #20]
 80044fa:	edc7 0a04 	vstr	s1, [r7, #16]
 80044fe:	ed87 1a03 	vstr	s2, [r7, #12]
 8004502:	edc7 1a02 	vstr	s3, [r7, #8]
 8004506:	ed87 2a01 	vstr	s4, [r7, #4]
    // Offset uygulandıktan sonra yeni sıcaklık
    float adjusted_temp = (temperature + zero_offset)/factor;
 800450a:	ed97 7a05 	vldr	s14, [r7, #20]
 800450e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004512:	ee77 6a27 	vadd.f32	s13, s14, s15
 8004516:	ed97 7a01 	vldr	s14, [r7, #4]
 800451a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800451e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Aralık kontrolü
    if (adjusted_temp < scale_min) adjusted_temp = scale_min;
 8004522:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004526:	edd7 7a04 	vldr	s15, [r7, #16]
 800452a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800452e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004532:	d501      	bpl.n	8004538 <scale_temperature_for_send_over_com+0x48>
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	627b      	str	r3, [r7, #36]	@ 0x24
    if (adjusted_temp > scale_max) adjusted_temp = scale_max;
 8004538:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800453c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004540:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004548:	dd01      	ble.n	800454e <scale_temperature_for_send_over_com+0x5e>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	627b      	str	r3, [r7, #36]	@ 0x24

    // Ölçekleme işlemi
    float normalized = (adjusted_temp - scale_min) / (scale_max - scale_min);
 800454e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004552:	edd7 7a04 	vldr	s15, [r7, #16]
 8004556:	ee77 6a67 	vsub.f32	s13, s14, s15
 800455a:	ed97 7a03 	vldr	s14, [r7, #12]
 800455e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004562:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800456a:	edc7 7a08 	vstr	s15, [r7, #32]
    uint16_t result = (uint16_t)(normalized * 65535.0f); // uint16_t max: 65535
 800456e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004572:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004594 <scale_temperature_for_send_over_com+0xa4>
 8004576:	ee67 7a87 	vmul.f32	s15, s15, s14
 800457a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800457e:	ee17 3a90 	vmov	r3, s15
 8004582:	83fb      	strh	r3, [r7, #30]

    return result;
 8004584:	8bfb      	ldrh	r3, [r7, #30]
}
 8004586:	4618      	mov	r0, r3
 8004588:	372c      	adds	r7, #44	@ 0x2c
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	477fff00 	.word	0x477fff00

08004598 <SystemClock_Config>:
 * @brief Configures the system clock using HSE oscillator.
 *
 * @details Initializes RCC oscillator settings and sets HSE as the system clock source.
 */
static void SystemClock_Config(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b094      	sub	sp, #80	@ 0x50
 800459c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800459e:	f107 0320 	add.w	r3, r7, #32
 80045a2:	2230      	movs	r2, #48	@ 0x30
 80045a4:	2100      	movs	r1, #0
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 f852 	bl	8004650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045ac:	f107 030c 	add.w	r3, r7, #12
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	605a      	str	r2, [r3, #4]
 80045b6:	609a      	str	r2, [r3, #8]
 80045b8:	60da      	str	r2, [r3, #12]
 80045ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80045bc:	2300      	movs	r3, #0
 80045be:	60bb      	str	r3, [r7, #8]
 80045c0:	4b21      	ldr	r3, [pc, #132]	@ (8004648 <SystemClock_Config+0xb0>)
 80045c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c4:	4a20      	ldr	r2, [pc, #128]	@ (8004648 <SystemClock_Config+0xb0>)
 80045c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80045cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004648 <SystemClock_Config+0xb0>)
 80045ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80045d8:	2300      	movs	r3, #0
 80045da:	607b      	str	r3, [r7, #4]
 80045dc:	4b1b      	ldr	r3, [pc, #108]	@ (800464c <SystemClock_Config+0xb4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a1a      	ldr	r2, [pc, #104]	@ (800464c <SystemClock_Config+0xb4>)
 80045e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	4b18      	ldr	r3, [pc, #96]	@ (800464c <SystemClock_Config+0xb4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045f0:	607b      	str	r3, [r7, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80045f4:	2301      	movs	r3, #1
 80045f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80045f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80045fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80045fe:	2300      	movs	r3, #0
 8004600:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004602:	f107 0320 	add.w	r3, r7, #32
 8004606:	4618      	mov	r0, r3
 8004608:	f7fd f982 	bl	8001910 <HAL_RCC_OscConfig>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <SystemClock_Config+0x7e>
  {
    report_init_error();
 8004612:	f7ff fe91 	bl	8004338 <report_init_error>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004616:	230f      	movs	r3, #15
 8004618:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800461a:	2301      	movs	r3, #1
 800461c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004622:	2300      	movs	r3, #0
 8004624:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800462a:	f107 030c 	add.w	r3, r7, #12
 800462e:	2100      	movs	r1, #0
 8004630:	4618      	mov	r0, r3
 8004632:	f7fd fbe5 	bl	8001e00 <HAL_RCC_ClockConfig>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <SystemClock_Config+0xa8>
  {
    report_init_error();
 800463c:	f7ff fe7c 	bl	8004338 <report_init_error>
  }
}
 8004640:	bf00      	nop
 8004642:	3750      	adds	r7, #80	@ 0x50
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40023800 	.word	0x40023800
 800464c:	40007000 	.word	0x40007000

08004650 <memset>:
 8004650:	4402      	add	r2, r0
 8004652:	4603      	mov	r3, r0
 8004654:	4293      	cmp	r3, r2
 8004656:	d100      	bne.n	800465a <memset+0xa>
 8004658:	4770      	bx	lr
 800465a:	f803 1b01 	strb.w	r1, [r3], #1
 800465e:	e7f9      	b.n	8004654 <memset+0x4>

08004660 <__libc_init_array>:
 8004660:	b570      	push	{r4, r5, r6, lr}
 8004662:	4d0d      	ldr	r5, [pc, #52]	@ (8004698 <__libc_init_array+0x38>)
 8004664:	4c0d      	ldr	r4, [pc, #52]	@ (800469c <__libc_init_array+0x3c>)
 8004666:	1b64      	subs	r4, r4, r5
 8004668:	10a4      	asrs	r4, r4, #2
 800466a:	2600      	movs	r6, #0
 800466c:	42a6      	cmp	r6, r4
 800466e:	d109      	bne.n	8004684 <__libc_init_array+0x24>
 8004670:	4d0b      	ldr	r5, [pc, #44]	@ (80046a0 <__libc_init_array+0x40>)
 8004672:	4c0c      	ldr	r4, [pc, #48]	@ (80046a4 <__libc_init_array+0x44>)
 8004674:	f000 f818 	bl	80046a8 <_init>
 8004678:	1b64      	subs	r4, r4, r5
 800467a:	10a4      	asrs	r4, r4, #2
 800467c:	2600      	movs	r6, #0
 800467e:	42a6      	cmp	r6, r4
 8004680:	d105      	bne.n	800468e <__libc_init_array+0x2e>
 8004682:	bd70      	pop	{r4, r5, r6, pc}
 8004684:	f855 3b04 	ldr.w	r3, [r5], #4
 8004688:	4798      	blx	r3
 800468a:	3601      	adds	r6, #1
 800468c:	e7ee      	b.n	800466c <__libc_init_array+0xc>
 800468e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004692:	4798      	blx	r3
 8004694:	3601      	adds	r6, #1
 8004696:	e7f2      	b.n	800467e <__libc_init_array+0x1e>
 8004698:	08004870 	.word	0x08004870
 800469c:	08004870 	.word	0x08004870
 80046a0:	08004870 	.word	0x08004870
 80046a4:	08004874 	.word	0x08004874

080046a8 <_init>:
 80046a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046aa:	bf00      	nop
 80046ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ae:	bc08      	pop	{r3}
 80046b0:	469e      	mov	lr, r3
 80046b2:	4770      	bx	lr

080046b4 <_fini>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	bf00      	nop
 80046b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ba:	bc08      	pop	{r3}
 80046bc:	469e      	mov	lr, r3
 80046be:	4770      	bx	lr
